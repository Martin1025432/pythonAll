<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>kApiNet</name>
  </assembly>
  <members>
    <member name="T:Lmi3d.Zen.K16s">
      <summary>Represents a 16-bit signed integer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K16s.#ctor(System.Int16)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.K16s</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.K16s.Equals(Lmi3d.Zen.K16s)"></member>
    <member name="M:Lmi3d.Zen.K16s.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.K16s.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.K16s.KTypeId"></member>
    <member name="F:Lmi3d.Zen.K16s.Max">
      <summary>K16s maximum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K16s.Min">
      <summary>K16s minimum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K16s.Null">
      <summary>K16s invalid value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K16s.op_Equality(Lmi3d.Zen.K16s,Lmi3d.Zen.K16s)"></member>
    <member name="M:Lmi3d.Zen.K16s.op_Implicit(Lmi3d.Zen.K16s)~System.Int16"></member>
    <member name="M:Lmi3d.Zen.K16s.op_Implicit(System.Int16)~Lmi3d.Zen.K16s"></member>
    <member name="M:Lmi3d.Zen.K16s.op_Inequality(Lmi3d.Zen.K16s,Lmi3d.Zen.K16s)"></member>
    <member name="M:Lmi3d.Zen.K16s.ToString"></member>
    <member name="F:Lmi3d.Zen.K16s.Value"></member>
    <member name="T:Lmi3d.Zen.K16u">
      <summary>Represents a 16-bit unsigned integer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K16u.#ctor(System.UInt16)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.K16u</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.K16u.Equals(Lmi3d.Zen.K16u)"></member>
    <member name="M:Lmi3d.Zen.K16u.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.K16u.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.K16u.KTypeId"></member>
    <member name="F:Lmi3d.Zen.K16u.Max">
      <summary>K16u maximum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K16u.Min">
      <summary>K16u minimum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K16u.Null">
      <summary>K16u invalid value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K16u.op_Equality(Lmi3d.Zen.K16u,Lmi3d.Zen.K16u)"></member>
    <member name="M:Lmi3d.Zen.K16u.op_Implicit(Lmi3d.Zen.K16u)~System.UInt16"></member>
    <member name="M:Lmi3d.Zen.K16u.op_Implicit(System.UInt16)~Lmi3d.Zen.K16u"></member>
    <member name="M:Lmi3d.Zen.K16u.op_Inequality(Lmi3d.Zen.K16u,Lmi3d.Zen.K16u)"></member>
    <member name="M:Lmi3d.Zen.K16u.ToString"></member>
    <member name="F:Lmi3d.Zen.K16u.Value"></member>
    <member name="T:Lmi3d.Zen.K32f">
      <summary>Represents a 32-bit floating-point value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K32f.#ctor(System.Single)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.K32f</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.K32f.Equals(Lmi3d.Zen.K32f)"></member>
    <member name="M:Lmi3d.Zen.K32f.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.K32f.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.K32f.KTypeId"></member>
    <member name="F:Lmi3d.Zen.K32f.Max">
      <summary>K32f maximum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K32f.Min">
      <summary>K32f minimum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K32f.Null">
      <summary>K32f invalid value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K32f.op_Equality(Lmi3d.Zen.K32f,Lmi3d.Zen.K32f)"></member>
    <member name="M:Lmi3d.Zen.K32f.op_Implicit(Lmi3d.Zen.K32f)~System.Single"></member>
    <member name="M:Lmi3d.Zen.K32f.op_Implicit(System.Single)~Lmi3d.Zen.K32f"></member>
    <member name="M:Lmi3d.Zen.K32f.op_Inequality(Lmi3d.Zen.K32f,Lmi3d.Zen.K32f)"></member>
    <member name="M:Lmi3d.Zen.K32f.ToString"></member>
    <member name="F:Lmi3d.Zen.K32f.Value"></member>
    <member name="T:Lmi3d.Zen.K32s">
      <summary>Represents a 32-bit signed integer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K32s.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.K32s</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.K32s.Equals(Lmi3d.Zen.K32s)"></member>
    <member name="M:Lmi3d.Zen.K32s.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.K32s.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.K32s.KTypeId"></member>
    <member name="F:Lmi3d.Zen.K32s.Max">
      <summary>K32s maximum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K32s.Min">
      <summary>K32s minimum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K32s.Null">
      <summary>K32s invalid value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K32s.op_Equality(Lmi3d.Zen.K32s,Lmi3d.Zen.K32s)"></member>
    <member name="M:Lmi3d.Zen.K32s.op_Implicit(Lmi3d.Zen.K32s)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.K32s.op_Implicit(System.Int32)~Lmi3d.Zen.K32s"></member>
    <member name="M:Lmi3d.Zen.K32s.op_Inequality(Lmi3d.Zen.K32s,Lmi3d.Zen.K32s)"></member>
    <member name="M:Lmi3d.Zen.K32s.ToString"></member>
    <member name="F:Lmi3d.Zen.K32s.Value"></member>
    <member name="T:Lmi3d.Zen.K32u">
      <summary>Represents a 32-bit unsigned integer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K32u.#ctor(System.UInt32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.K32u</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.K32u.Equals(Lmi3d.Zen.K32u)"></member>
    <member name="M:Lmi3d.Zen.K32u.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.K32u.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.K32u.KTypeId"></member>
    <member name="F:Lmi3d.Zen.K32u.Max">
      <summary>K32u maximum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K32u.Min">
      <summary>K32u minimum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K32u.Null">
      <summary>K32u invalid value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K32u.op_Equality(Lmi3d.Zen.K32u,Lmi3d.Zen.K32u)"></member>
    <member name="M:Lmi3d.Zen.K32u.op_Implicit(Lmi3d.Zen.K32u)~System.UInt32"></member>
    <member name="M:Lmi3d.Zen.K32u.op_Implicit(System.UInt32)~Lmi3d.Zen.K32u"></member>
    <member name="M:Lmi3d.Zen.K32u.op_Inequality(Lmi3d.Zen.K32u,Lmi3d.Zen.K32u)"></member>
    <member name="M:Lmi3d.Zen.K32u.ToString"></member>
    <member name="F:Lmi3d.Zen.K32u.Value"></member>
    <member name="T:Lmi3d.Zen.K64f">
      <summary>Represents a 32-bit floating-point value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K64f.#ctor(System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.K64f</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.K64f.Equals(Lmi3d.Zen.K64f)"></member>
    <member name="M:Lmi3d.Zen.K64f.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.K64f.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.K64f.KTypeId"></member>
    <member name="F:Lmi3d.Zen.K64f.Max">
      <summary>K64f maximum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K64f.Min">
      <summary>K64f minimum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K64f.Null">
      <summary>K64f invalid value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K64f.op_Equality(Lmi3d.Zen.K64f,Lmi3d.Zen.K64f)"></member>
    <member name="M:Lmi3d.Zen.K64f.op_Implicit(Lmi3d.Zen.K64f)~System.Double"></member>
    <member name="M:Lmi3d.Zen.K64f.op_Implicit(System.Double)~Lmi3d.Zen.K64f"></member>
    <member name="M:Lmi3d.Zen.K64f.op_Inequality(Lmi3d.Zen.K64f,Lmi3d.Zen.K64f)"></member>
    <member name="M:Lmi3d.Zen.K64f.ToString"></member>
    <member name="F:Lmi3d.Zen.K64f.Value"></member>
    <member name="T:Lmi3d.Zen.K64s">
      <summary>Represents a 64-bit signed integer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K64s.#ctor(System.Int64)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.K64s</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.K64s.Equals(Lmi3d.Zen.K64s)"></member>
    <member name="M:Lmi3d.Zen.K64s.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.K64s.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.K64s.KTypeId"></member>
    <member name="F:Lmi3d.Zen.K64s.Max">
      <summary>K64s maximum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K64s.Min">
      <summary>K64s minimum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K64s.Null">
      <summary>K64s invalid value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K64s.op_Equality(Lmi3d.Zen.K64s,Lmi3d.Zen.K64s)"></member>
    <member name="M:Lmi3d.Zen.K64s.op_Implicit(Lmi3d.Zen.K64s)~System.Int64"></member>
    <member name="M:Lmi3d.Zen.K64s.op_Implicit(System.Int64)~Lmi3d.Zen.K64s"></member>
    <member name="M:Lmi3d.Zen.K64s.op_Inequality(Lmi3d.Zen.K64s,Lmi3d.Zen.K64s)"></member>
    <member name="M:Lmi3d.Zen.K64s.ToString"></member>
    <member name="F:Lmi3d.Zen.K64s.Value"></member>
    <member name="T:Lmi3d.Zen.K64u">
      <summary>Represents a 64-bit unsigned integer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K64u.#ctor(System.UInt64)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.K64u</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.K64u.Equals(Lmi3d.Zen.K64u)"></member>
    <member name="M:Lmi3d.Zen.K64u.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.K64u.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.K64u.KTypeId"></member>
    <member name="F:Lmi3d.Zen.K64u.Max">
      <summary>K64u maximum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K64u.Min">
      <summary>K64u minimum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K64u.Null">
      <summary>K64u invalid value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K64u.op_Equality(Lmi3d.Zen.K64u,Lmi3d.Zen.K64u)"></member>
    <member name="M:Lmi3d.Zen.K64u.op_Implicit(Lmi3d.Zen.K64u)~System.UInt64"></member>
    <member name="M:Lmi3d.Zen.K64u.op_Implicit(System.UInt64)~Lmi3d.Zen.K64u"></member>
    <member name="M:Lmi3d.Zen.K64u.op_Inequality(Lmi3d.Zen.K64u,Lmi3d.Zen.K64u)"></member>
    <member name="M:Lmi3d.Zen.K64u.ToString"></member>
    <member name="F:Lmi3d.Zen.K64u.Value"></member>
    <member name="T:Lmi3d.Zen.K8s">
      <summary>Represents an 8-bit signed integer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K8s.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.K8s</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.K8s.Equals(Lmi3d.Zen.K8s)"></member>
    <member name="M:Lmi3d.Zen.K8s.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.K8s.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.K8s.KTypeId"></member>
    <member name="F:Lmi3d.Zen.K8s.Max">
      <summary>K8s maximum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K8s.Min">
      <summary>K8s minimum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K8s.Null">
      <summary>K8s invalid value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K8s.op_Equality(Lmi3d.Zen.K8s,Lmi3d.Zen.K8s)"></member>
    <member name="M:Lmi3d.Zen.K8s.op_Implicit(Lmi3d.Zen.K8s)~System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte"></member>
    <member name="M:Lmi3d.Zen.K8s.op_Implicit(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)~Lmi3d.Zen.K8s"></member>
    <member name="M:Lmi3d.Zen.K8s.op_Inequality(Lmi3d.Zen.K8s,Lmi3d.Zen.K8s)"></member>
    <member name="M:Lmi3d.Zen.K8s.ToString"></member>
    <member name="F:Lmi3d.Zen.K8s.Value"></member>
    <member name="T:Lmi3d.Zen.K8u">
      <summary>Represents an 8-bit unsigned integer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K8u.#ctor(System.Byte)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.K8u</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.K8u.Equals(Lmi3d.Zen.K8u)"></member>
    <member name="M:Lmi3d.Zen.K8u.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.K8u.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.K8u.KTypeId"></member>
    <member name="F:Lmi3d.Zen.K8u.Max">
      <summary>K8u maximum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K8u.Min">
      <summary>K8u minimum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.K8u.Null">
      <summary>K8u invalid value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.K8u.op_Equality(Lmi3d.Zen.K8u,Lmi3d.Zen.K8u)"></member>
    <member name="M:Lmi3d.Zen.K8u.op_Implicit(Lmi3d.Zen.K8u)~System.Byte"></member>
    <member name="M:Lmi3d.Zen.K8u.op_Implicit(System.Byte)~Lmi3d.Zen.K8u"></member>
    <member name="M:Lmi3d.Zen.K8u.op_Inequality(Lmi3d.Zen.K8u,Lmi3d.Zen.K8u)"></member>
    <member name="M:Lmi3d.Zen.K8u.ToString"></member>
    <member name="F:Lmi3d.Zen.K8u.Value"></member>
    <member name="T:Lmi3d.Zen.KAlloc">
      <summary>Abstract base class for memory allocators.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KAlloc.App">
      <summary>Gets the allocator that should normally be used by applications to request memory.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KAlloc.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.KAlloc.Fallback(Lmi3d.Zen.KAlloc)">
      <summary>Returns the passed allocator, or if null, the App allocator. </summary>
      <param name="alloc">Allocator.</param>
      <returns>Allocator.</returns>
    </member>
    <member name="M:Lmi3d.Zen.KAlloc.Free(System.IntPtr)">
      <summary>Frees a block of memory.</summary>
      <param name="mem">Pointer to memory to be freed.</param>
    </member>
    <member name="M:Lmi3d.Zen.KAlloc.Get(System.Int64)">
      <summary>Allocates a block of memory.</summary>
      <param name="size">Size of memory to be allocated.</param>
      <returns>Pointer to allocated memory.</returns>
    </member>
    <member name="M:Lmi3d.Zen.KAlloc.GetZero(System.Int64)">
      <summary> Allocates a block of memory and zero-initializes the block.</summary>
      <param name="size">Size of memory to be allocated.</param>
      <returns>Pointer to allocated memory.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KAlloc.KTypeId"></member>
    <member name="P:Lmi3d.Zen.KAlloc.System">
      <summary>Gets an allocator that can be used to allocate directly from main system memory.</summary>
    </member>
    <member name="T:Lmi3d.Zen.KApiLib">
      <summary>Singleton assembly manager for the Zen API native type assembly (kApiLib).</summary>
    </member>
    <member name="M:Lmi3d.Zen.KApiLib.Construct">
      <summary>Constructs the KApiLib assembly manager.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KApiLib.Dispose">
      <summary>Disposes the KApiLib assembly manager.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KApiLib.Instance">
      <summary>Gets a reference to the KApiLib singleton instance.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KApiLib.LeaksDetected">
      <summary>Reports memory leaks detected after disposing KApiLib.</summary>
    </member>
    <member name="E:Lmi3d.Zen.KApiLib.MessageLogged">
      <summary>Occurs when the Zen library emits a log message.</summary>
    </member>
    <member name="E:Lmi3d.Zen.KApiLib.OnAssert">
      <summary>Occurs when the Zen library triggers an assert.</summary>
    </member>
    <member name="T:Lmi3d.Zen.KAssembly">
      <summary>Represents a native Zen-based type library.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KAssembly.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KAssembly class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.KAssembly.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.KAssembly.DependencyAt(System.Int32)">
      <summary>Gets the assembly dependency at the specified index.</summary>
      <param name="index">Index of assembly dependency.</param>
      <returns>Assembly dependency.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KAssembly.DependencyCount">
      <summary>Gets the count of assembly dependencies.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KAssembly.Enumerate">
      <summary>Gets a list of the currently-loaded assemblies.</summary>
      <returns>List of loaded assemblies.</returns>
    </member>
    <member name="M:Lmi3d.Zen.KAssembly.FindType(System.String)">
      <summary>Finds a type by name.</summary>
      <param name="name">Type name.</param>
      <returns>Type object.</returns>
      <exception cref="T:Lmi3d.Zen.KException">Thrown when type not found.</exception>
    </member>
    <member name="P:Lmi3d.Zen.KAssembly.KTypeId"></member>
    <member name="P:Lmi3d.Zen.KAssembly.Name">
      <summary>Gets the assembly name.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KAssembly.PlatformVersion">
      <summary>Gets the platform version.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KAssembly.TypeAt(System.Int32)">
      <summary>Gets the type at a particular index within an assembly.</summary>
      <param name="index">Index of type.</param>
      <returns>Type object.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KAssembly.TypeCount">
      <summary>Gets the number of types in an assembly.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KAssembly.Version">
      <summary>Gets the assembly version.</summary>
    </member>
    <member name="T:Lmi3d.Zen.KAssemblyManager">
      <summary>Abstract base class for assembly managers.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KAssemblyManager.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KAssemblyManager</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Lmi3d.Zen.KAssemblyManager.Assembly">
      <summary>Gets zen assembly object.</summary>
    </member>
    <member name="T:Lmi3d.Zen.KBool">
      <summary>Represents a boolean value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KBool.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KBool</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.KBool.Equals(Lmi3d.Zen.KBool)"></member>
    <member name="M:Lmi3d.Zen.KBool.Equals(System.Object)"></member>
    <member name="F:Lmi3d.Zen.KBool.False">
      <summary>KBool false.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KBool.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.KBool.KTypeId"></member>
    <member name="M:Lmi3d.Zen.KBool.op_Equality(Lmi3d.Zen.KBool,Lmi3d.Zen.KBool)"></member>
    <member name="M:Lmi3d.Zen.KBool.op_Implicit(Lmi3d.Zen.KBool)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.KBool.op_Implicit(Lmi3d.Zen.KBool)~System.Boolean"></member>
    <member name="M:Lmi3d.Zen.KBool.op_Implicit(System.Boolean)~Lmi3d.Zen.KBool"></member>
    <member name="M:Lmi3d.Zen.KBool.op_Implicit(System.Int32)~Lmi3d.Zen.KBool"></member>
    <member name="M:Lmi3d.Zen.KBool.op_Inequality(Lmi3d.Zen.KBool,Lmi3d.Zen.KBool)"></member>
    <member name="M:Lmi3d.Zen.KBool.ToString"></member>
    <member name="F:Lmi3d.Zen.KBool.True">
      <summary>KBool true.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KBool.Value"></member>
    <member name="T:Lmi3d.Zen.KByte">
      <summary>Represents a byte on the current platform.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KByte.#ctor(System.Byte)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KByte</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.KByte.Equals(Lmi3d.Zen.KByte)"></member>
    <member name="M:Lmi3d.Zen.KByte.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.KByte.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.KByte.KTypeId"></member>
    <member name="M:Lmi3d.Zen.KByte.op_Equality(Lmi3d.Zen.KByte,Lmi3d.Zen.KByte)"></member>
    <member name="M:Lmi3d.Zen.KByte.op_Implicit(Lmi3d.Zen.KByte)~System.Byte"></member>
    <member name="M:Lmi3d.Zen.KByte.op_Implicit(System.Byte)~Lmi3d.Zen.KByte"></member>
    <member name="M:Lmi3d.Zen.KByte.op_Inequality(Lmi3d.Zen.KByte,Lmi3d.Zen.KByte)"></member>
    <member name="M:Lmi3d.Zen.KByte.ToString"></member>
    <member name="F:Lmi3d.Zen.KByte.Value"></member>
    <member name="T:Lmi3d.Zen.KCallbackFx">
      <summary>A delegate that matches the signature of kCallbackFx from the underlying Zen library.</summary>
    </member>
    <member name="T:Lmi3d.Zen.KChar">
      <summary>Represents a single unit (byte) in a UTF-8 character. </summary>
    </member>
    <member name="M:Lmi3d.Zen.KChar.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KChar</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.KChar.Equals(Lmi3d.Zen.KChar)"></member>
    <member name="M:Lmi3d.Zen.KChar.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.KChar.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.KChar.KTypeId"></member>
    <member name="M:Lmi3d.Zen.KChar.op_Equality(Lmi3d.Zen.KChar,Lmi3d.Zen.KChar)"></member>
    <member name="M:Lmi3d.Zen.KChar.op_Implicit(Lmi3d.Zen.KChar)~System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte"></member>
    <member name="M:Lmi3d.Zen.KChar.op_Implicit(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)~Lmi3d.Zen.KChar"></member>
    <member name="M:Lmi3d.Zen.KChar.op_Inequality(Lmi3d.Zen.KChar,Lmi3d.Zen.KChar)"></member>
    <member name="M:Lmi3d.Zen.KChar.ToString"></member>
    <member name="F:Lmi3d.Zen.KChar.Value"></member>
    <member name="T:Lmi3d.Zen.KEndianness">
      <summary>Represents the byte-ordering of primative data types.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KEndianness.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KEndianness</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Lmi3d.Zen.KEndianness.Big">
      <summary>Command not recognized.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KEndianness.Equals(Lmi3d.Zen.KEndianness)"></member>
    <member name="M:Lmi3d.Zen.KEndianness.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.KEndianness.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.KEndianness.GetHashCode"></member>
    <member name="M:Lmi3d.Zen.KEndianness.Host">
      <summary>Reports the endianness of the current platform.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KEndianness.KTypeId"></member>
    <member name="F:Lmi3d.Zen.KEndianness.Little">
      <summary>Item is not found.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KEndianness.op_Equality(Lmi3d.Zen.KEndianness,Lmi3d.Zen.KEndianness)"></member>
    <member name="M:Lmi3d.Zen.KEndianness.op_Equality(Lmi3d.Zen.KEndianness,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.KEndianness.op_Implicit(Lmi3d.Zen.KEndianness)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.KEndianness.op_Implicit(System.Int32)~Lmi3d.Zen.KEndianness"></member>
    <member name="M:Lmi3d.Zen.KEndianness.op_Inequality(Lmi3d.Zen.KEndianness,Lmi3d.Zen.KEndianness)"></member>
    <member name="M:Lmi3d.Zen.KEndianness.op_Inequality(Lmi3d.Zen.KEndianness,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.KEndianness.ShouldSwap(Lmi3d.Zen.KEndianness)">
      <summary>Reports whether byte ordering must be reversed to be consistent with the current platform.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KEndianness.ToString"></member>
    <member name="P:Lmi3d.Zen.KEndianness.Value"></member>
    <member name="T:Lmi3d.Zen.KEnumeratorInfo">
      <summary> Represents enumerator information. </summary>
    </member>
    <member name="P:Lmi3d.Zen.KEnumeratorInfo.DisplayName">
      <summary>Formatted display name (e.g. "8bpp Greyscale").</summary>
    </member>
    <member name="P:Lmi3d.Zen.KEnumeratorInfo.Name">
      <summary>Enumerator name (e.g. "kPIXEL_FORMAT_8BPP_GREYSCALE").</summary>
    </member>
    <member name="F:Lmi3d.Zen.KEnumeratorInfo.Value">
      <summary>Enumerator numeric value.</summary>
    </member>
    <member name="T:Lmi3d.Zen.KException">
      <summary>Represents an error generated by an underlying Zen-based library.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KException.#ctor(System.Int32)">
      <summary>Constructs a new KException instance with the specified status code.</summary>
      <param name="status">Status code.</param>
    </member>
    <member name="P:Lmi3d.Zen.KException.Message"></member>
    <member name="P:Lmi3d.Zen.KException.Status">
      <summary>Gets the status code associated with the error.</summary>
    </member>
    <member name="T:Lmi3d.Zen.KFieldInfo">
      <summary> Represents type field information. </summary>
    </member>
    <member name="P:Lmi3d.Zen.KFieldInfo.Count">
      <summary>Count of values in this field (typically 1; can be higher for "array value" fields, e.g. kText32). </summary>
    </member>
    <member name="P:Lmi3d.Zen.KFieldInfo.Name">
      <summary>Field name.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KFieldInfo.Offset">
      <summary>Offset of field within structure (bytes).</summary>
    </member>
    <member name="P:Lmi3d.Zen.KFieldInfo.Type"></member>
    <member name="T:Lmi3d.Zen.KLogHandler">
      <summary>Represents a KApiLib log message handler.</summary>
    </member>
    <member name="T:Lmi3d.Zen.KMethodInfo">
      <summary>Represents type method information.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KMethodInfo.Function">
      <summary>Pointer to function.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KMethodInfo.FunctionName">
      <summary>Full function name (e.g. "kObject_Clone").</summary>
    </member>
    <member name="P:Lmi3d.Zen.KMethodInfo.MethodName">
      <summary>Method name (e.g. "Clone").</summary>
    </member>
    <member name="T:Lmi3d.Zen.KObject">
      <summary>Root of all classes in the Zen.NET type system.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KObject.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KObject class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.KObject.Alloc">
      <summary>Gets the memory allocator associated with this object.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KObject.As``1">
      <summary>Attempts to convert this object to an instance of the specified generic type parameter.</summary>
      <typeparam name="T">Type to which object should be converted.</typeparam>
      <returns>The converted object, or null if the object cannot be converted.</returns>
    </member>
    <member name="M:Lmi3d.Zen.KObject.Clone``1">
      <summary>Constructs a new object by copying this object, including any aggregated child elements.</summary>
      <typeparam name="T">Cloned object will be cast to this type.</typeparam>
      <returns>The cloned object.</returns>
    </member>
    <member name="M:Lmi3d.Zen.KObject.Clone``1(Lmi3d.Zen.KAlloc)">
      <summary>Constructs a new object by copying this object, including any aggregated child elements.</summary>
      <param name="allocator">Optional memory allocator.</param>
      <typeparam name="T">Cloned object will be cast to this type.</typeparam>
      <returns>The cloned object.</returns>
    </member>
    <member name="M:Lmi3d.Zen.KObject.Clone``1(Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Constructs a new object by copying this object, including any aggregated child elements.</summary>
      <param name="refStyle">Ref style of cloned object.</param>
      <param name="allocator">Optional memory allocator.</param>
      <typeparam name="T">Cloned object will be cast to this type.</typeparam>
      <returns>The cloned object.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KObject.DefaultRefStyle">
      <summary>Reports the default ref style for the object.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KObject.Destroy">
      <summary>Destroys this object.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KObject.Dispose">
      <summary>Destroys this object and any aggregated child elements.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KObject.DisposeAll">
      <summary>Destroys this object and any aggregated child elements.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KObject.Equals(System.Object)">
      <summary>Implements equality comparison for the underlying Zen objects.</summary>
      <param name="other">The object to compare with the current object.</param>
      <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:Lmi3d.Zen.KObject.GetHashCode">
      <summary>Gets a hash code for the underlying Zen object. </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:Lmi3d.Zen.KObject.GetKType">
      <summary>Gets type metadata for this object from the underlying Zen type system.</summary>
      <returns>Type metadata, describing the underlying native Zen object.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KObject.IsShared">
      <summary>Reports whether the object is currently shared (reference count greater than one).</summary>
    </member>
    <member name="P:Lmi3d.Zen.KObject.KTypeId"></member>
    <member name="M:Lmi3d.Zen.KObject.op_Explicit(Lmi3d.Zen.KObject)~System.Void*">
      <summary>Gets the handle (native pointer) corresponding to a KObject instance.</summary>
      <param name="object">Zen.NET object.</param>
      <returns>Underlying Zen object handle.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KObject.RefStyle">
      <summary>Reference style of the object.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KObject.SetPool(Lmi3d.Zen.Utils.KObjectPool)">
      <summary>Sets the object pool associated with this object.</summary>
      <param name="pool">Pool object (or null to clear the pool assignment).</param>
    </member>
    <member name="M:Lmi3d.Zen.KObject.Share">
      <summary>Increments the reference count associated with this object.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KObject.Size">
      <summary>Estimates the memory consumed by this object, including any aggregated child elements.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KObject.ToHandle">
      <summary>Gets an IntPtr representing the underlying handle associated with this object.</summary>
    </member>
    <member name="T:Lmi3d.Zen.KPointer">
      <summary>Represents a pointer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KPointer.#ctor(System.Void*)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KPointer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.KPointer.Equals(Lmi3d.Zen.KPointer)"></member>
    <member name="M:Lmi3d.Zen.KPointer.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.KPointer.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.KPointer.KTypeId"></member>
    <member name="M:Lmi3d.Zen.KPointer.op_Equality(Lmi3d.Zen.KPointer,Lmi3d.Zen.KPointer)"></member>
    <member name="M:Lmi3d.Zen.KPointer.op_Inequality(Lmi3d.Zen.KPointer,Lmi3d.Zen.KPointer)"></member>
    <member name="F:Lmi3d.Zen.KPointer.Value">
      <summary>Pointer value.</summary>
    </member>
    <member name="T:Lmi3d.Zen.KRefStyle">
      <summary>Represents how multiple references of an object are managed.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KRefStyle.Manual">
      <summary>The user must manually manage multiple references and object disposal.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KRefStyle.Auto">
      <summary>Multiple references and disposal are automatically handled.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KRefStyle.None">
      <summary>The object should not be shared or disposed. It is managed by a 'parent' object.</summary>
    </member>
    <member name="T:Lmi3d.Zen.KSize">
      <summary>Represents an unsigned integer that can hold a pointer address.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KSize.#ctor(System.UInt64)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KSize</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.KSize.Equals(Lmi3d.Zen.KSize)"></member>
    <member name="M:Lmi3d.Zen.KSize.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.KSize.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.KSize.KTypeId"></member>
    <member name="F:Lmi3d.Zen.KSize.Max">
      <summary>KSize maximum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KSize.Min">
      <summary>KSize minimum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KSize.Null">
      <summary>KSize invalid value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KSize.op_Equality(Lmi3d.Zen.KSize,Lmi3d.Zen.KSize)"></member>
    <member name="M:Lmi3d.Zen.KSize.op_Implicit(Lmi3d.Zen.KSize)~System.UInt64"></member>
    <member name="M:Lmi3d.Zen.KSize.op_Implicit(System.UInt64)~Lmi3d.Zen.KSize"></member>
    <member name="M:Lmi3d.Zen.KSize.op_Inequality(Lmi3d.Zen.KSize,Lmi3d.Zen.KSize)"></member>
    <member name="M:Lmi3d.Zen.KSize.ToString"></member>
    <member name="F:Lmi3d.Zen.KSize.Value"></member>
    <member name="T:Lmi3d.Zen.KSSize">
      <summary>Represents a signed integer that can hold a pointer address.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KSSize.#ctor(System.Int64)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KSSize</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.KSSize.Equals(Lmi3d.Zen.KSSize)"></member>
    <member name="M:Lmi3d.Zen.KSSize.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.KSSize.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.KSSize.KTypeId"></member>
    <member name="F:Lmi3d.Zen.KSSize.Max">
      <summary>KSSize maximum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KSSize.Min">
      <summary>KSSize minimum value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KSSize.Null">
      <summary>KSSize invalid value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KSSize.op_Equality(Lmi3d.Zen.KSSize,Lmi3d.Zen.KSSize)"></member>
    <member name="M:Lmi3d.Zen.KSSize.op_Implicit(Lmi3d.Zen.KSSize)~System.Int64"></member>
    <member name="M:Lmi3d.Zen.KSSize.op_Implicit(System.Int64)~Lmi3d.Zen.KSSize"></member>
    <member name="M:Lmi3d.Zen.KSSize.op_Inequality(Lmi3d.Zen.KSSize,Lmi3d.Zen.KSSize)"></member>
    <member name="M:Lmi3d.Zen.KSSize.ToString"></member>
    <member name="F:Lmi3d.Zen.KSSize.Value"></member>
    <member name="T:Lmi3d.Zen.KStatus">
      <summary>Represents a status code.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KStatus.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.KStatus.Equals(Lmi3d.Zen.KStatus)"></member>
    <member name="M:Lmi3d.Zen.KStatus.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.KStatus.Equals(System.Object)"></member>
    <member name="F:Lmi3d.Zen.KStatus.Error">
      <summary>General error.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorAbort">
      <summary>Operation aborted.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorAlreadyExists">
      <summary>Conflicts with existing item.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorBusy">
      <summary>Agent is busy (cannot service request).</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorClosed">
      <summary>Resource is no longer available.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorCommand">
      <summary>Command not recognized.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorConflict">
      <summary>State conflicts with another object.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorDevice">
      <summary>Hardware device error.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorFormat">
      <summary>Data parsing/formatting error.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorFull">
      <summary>Resource is already fully utilized.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorHeap">
      <summary>Heap error (leak/double-free).</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorIncomplete">
      <summary>Buffer insufficient for data.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorInProgress">
      <summary>Operation is in progress, but not yet complete.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorMemory">
      <summary>Out of memory.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorNetwork">
      <summary>Network setup/resource error.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorNotFound">
      <summary>Item is not found.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorOs">
      <summary>Generic error reported by underlying OS.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorParamter">
      <summary>Parameter is invalid.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorReadOnly">
      <summary>Object is read-only (cannot be written).</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorState">
      <summary>Invalid state.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorStream">
      <summary>Error in stream.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorTimeout">
      <summary>Action timed out.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorUnimplemented">
      <summary>Feature not implemented.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorVersion">
      <summary>Incompatible version.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KStatus.ErrorWriteOnly">
      <summary>Object is write-only (cannot be read). </summary>
    </member>
    <member name="M:Lmi3d.Zen.KStatus.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.KStatus.KTypeId"></member>
    <member name="P:Lmi3d.Zen.KStatus.Name"></member>
    <member name="F:Lmi3d.Zen.KStatus.Ok">
      <summary>Operation successful.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KStatus.op_Equality(Lmi3d.Zen.KStatus,Lmi3d.Zen.KStatus)"></member>
    <member name="M:Lmi3d.Zen.KStatus.op_Equality(Lmi3d.Zen.KStatus,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.KStatus.op_Implicit(Lmi3d.Zen.KStatus)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.KStatus.op_Implicit(System.Int32)~Lmi3d.Zen.KStatus"></member>
    <member name="M:Lmi3d.Zen.KStatus.op_Inequality(Lmi3d.Zen.KStatus,Lmi3d.Zen.KStatus)"></member>
    <member name="M:Lmi3d.Zen.KStatus.op_Inequality(Lmi3d.Zen.KStatus,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.KStatus.ToString"></member>
    <member name="P:Lmi3d.Zen.KStatus.Value"></member>
    <member name="T:Lmi3d.Zen.KText128">
      <summary>Represents a string encoded as a null-terminated, UTF-8 character sequence of up to 128-bytes.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KText128.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KText128</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.KText128.Equals(Lmi3d.Zen.KText128)"></member>
    <member name="M:Lmi3d.Zen.KText128.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.KText128.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.KText128.KTypeId"></member>
    <member name="M:Lmi3d.Zen.KText128.op_Equality(Lmi3d.Zen.KText128,Lmi3d.Zen.KText128)"></member>
    <member name="M:Lmi3d.Zen.KText128.op_Implicit(Lmi3d.Zen.KText128)~System.String"></member>
    <member name="M:Lmi3d.Zen.KText128.op_Implicit(System.String)~Lmi3d.Zen.KText128"></member>
    <member name="M:Lmi3d.Zen.KText128.op_Inequality(Lmi3d.Zen.KText128,Lmi3d.Zen.KText128)"></member>
    <member name="M:Lmi3d.Zen.KText128.ToString"></member>
    <member name="T:Lmi3d.Zen.KText16">
      <summary>Represents a string encoded as a null-terminated, UTF-8 character sequence of up to 16-bytes.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KText16.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KText16</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.KText16.Equals(Lmi3d.Zen.KText16)"></member>
    <member name="M:Lmi3d.Zen.KText16.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.KText16.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.KText16.KTypeId"></member>
    <member name="M:Lmi3d.Zen.KText16.op_Equality(Lmi3d.Zen.KText16,Lmi3d.Zen.KText16)"></member>
    <member name="M:Lmi3d.Zen.KText16.op_Implicit(Lmi3d.Zen.KText16)~System.String"></member>
    <member name="M:Lmi3d.Zen.KText16.op_Implicit(System.String)~Lmi3d.Zen.KText16"></member>
    <member name="M:Lmi3d.Zen.KText16.op_Inequality(Lmi3d.Zen.KText16,Lmi3d.Zen.KText16)"></member>
    <member name="M:Lmi3d.Zen.KText16.ToString"></member>
    <member name="T:Lmi3d.Zen.KText256">
      <summary>Represents a string encoded as a null-terminated, UTF-8 character sequence of up to 256-bytes.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KText256.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KText256</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.KText256.Equals(Lmi3d.Zen.KText256)"></member>
    <member name="M:Lmi3d.Zen.KText256.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.KText256.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.KText256.KTypeId"></member>
    <member name="M:Lmi3d.Zen.KText256.op_Equality(Lmi3d.Zen.KText256,Lmi3d.Zen.KText256)"></member>
    <member name="M:Lmi3d.Zen.KText256.op_Implicit(Lmi3d.Zen.KText256)~System.String"></member>
    <member name="M:Lmi3d.Zen.KText256.op_Implicit(System.String)~Lmi3d.Zen.KText256"></member>
    <member name="M:Lmi3d.Zen.KText256.op_Inequality(Lmi3d.Zen.KText256,Lmi3d.Zen.KText256)"></member>
    <member name="M:Lmi3d.Zen.KText256.ToString"></member>
    <member name="T:Lmi3d.Zen.KText32">
      <summary>Represents a string encoded as a null-terminated, UTF-8 character sequence of up to 32-bytes.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KText32.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KText32</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.KText32.Equals(Lmi3d.Zen.KText32)"></member>
    <member name="M:Lmi3d.Zen.KText32.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.KText32.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.KText32.KTypeId"></member>
    <member name="M:Lmi3d.Zen.KText32.op_Equality(Lmi3d.Zen.KText32,Lmi3d.Zen.KText32)"></member>
    <member name="M:Lmi3d.Zen.KText32.op_Implicit(Lmi3d.Zen.KText32)~System.String"></member>
    <member name="M:Lmi3d.Zen.KText32.op_Implicit(System.String)~Lmi3d.Zen.KText32"></member>
    <member name="M:Lmi3d.Zen.KText32.op_Inequality(Lmi3d.Zen.KText32,Lmi3d.Zen.KText32)"></member>
    <member name="M:Lmi3d.Zen.KText32.ToString"></member>
    <member name="T:Lmi3d.Zen.KText64">
      <summary>Represents a string encoded as a null-terminated, UTF-8 character sequence of up to 64-bytes.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KText64.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KText64</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.KText64.Equals(Lmi3d.Zen.KText64)"></member>
    <member name="M:Lmi3d.Zen.KText64.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.KText64.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.KText64.KTypeId"></member>
    <member name="M:Lmi3d.Zen.KText64.op_Equality(Lmi3d.Zen.KText64,Lmi3d.Zen.KText64)"></member>
    <member name="M:Lmi3d.Zen.KText64.op_Implicit(Lmi3d.Zen.KText64)~System.String"></member>
    <member name="M:Lmi3d.Zen.KText64.op_Implicit(System.String)~Lmi3d.Zen.KText64"></member>
    <member name="M:Lmi3d.Zen.KText64.op_Inequality(Lmi3d.Zen.KText64,Lmi3d.Zen.KText64)"></member>
    <member name="M:Lmi3d.Zen.KText64.ToString"></member>
    <member name="T:Lmi3d.Zen.KTimeout">
      <summary>Static collection of special constants related to timeouts.</summary>
    </member>
    <member name="F:Lmi3d.Zen.KTimeout.Infinite"></member>
    <member name="T:Lmi3d.Zen.KType">
      <summary>Represents metadata describing a native type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KType.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KType class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.KType.#ctor(System.Void*)">
      <summary>Initializes a new instance of the KType class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.KType.Assembly">
      <summary>Gets the assembly to which the type belongs.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.Base">
      <summary>Gets the base of a class or interface.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.KType.EnumeratorCount">
      <summary>Reports count of registered enumerators for the given enumeration type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KType.EnumeratorInfoAt(System.Int32)">
      <summary>Gets metadata for the enumerator at the specified index.</summary>
      <param name="index">Enumerator index.</param>
      <returns>Enumerator metadata.</returns>
    </member>
    <member name="M:Lmi3d.Zen.KType.Extends(Lmi3d.Zen.KType)">
      <summary>Determines whether a type extends another type.</summary>
      <param name="baseType">Base type.</param>
      <returns>true if type extends base type.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KType.FieldCount">
      <summary>Reports count of registered fields for the given type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KType.FieldInfoAt(System.Int32)">
      <summary>Gets metadata for the field at the specified index.</summary>
      <param name="index">Field index.</param>
      <returns>Field metadata.</returns>
    </member>
    <member name="M:Lmi3d.Zen.KType.FindEnumeratorInfo(System.Int32)">
      <summary>Finds enumerator metadata for the enumerator with the specified value.</summary>
      <param name="value">Enumerator value.</param>
      <returns>Enumerator metadata.</returns>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if not found</exception>
    </member>
    <member name="M:Lmi3d.Zen.KType.FindMethodInfo(System.String)">
      <summary>Finds metadata for the non-virtual method with the specified name.</summary>
      <param name="name">Method name.</param>
      <returns>Method metadata.</returns>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if not found.</exception>
    </member>
    <member name="M:Lmi3d.Zen.KType.FormatEnumerator(System.Int32)">
      <summary>Formats an enumerator value to a text buffer using the enumerator display name.</summary>
      <param name="value">Enumerator value.</param>
      <returns>Formatted enumertor name.</returns>
    </member>
    <member name="M:Lmi3d.Zen.KType.IMethodCount(Lmi3d.Zen.KType)">
      <summary>Reports count of interface methods for the given interface.</summary>
      <param name="interfaceType">Interface type.</param>
      <returns>Count of interface methods.</returns>
    </member>
    <member name="M:Lmi3d.Zen.KType.IMethodInfoAt(Lmi3d.Zen.KType,System.Int32)">
      <summary>Gets metadata for the interface method at the specified index.</summary>
      <param name="interfaceType">Interface type.</param>
      <param name="index">Method index.</param>
      <returns>Method metadata.</returns>
    </member>
    <member name="M:Lmi3d.Zen.KType.Implements(Lmi3d.Zen.KType)">
      <summary>Determines whether a type implements a specific interface.</summary>
      <param name="interfaceType">Interface type.</param>
      <returns>true if type implements interface.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KType.InnerSize">
      <summary>Gets the internal size of a type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KType.InterfaceAt(System.Int32)">
      <summary>Gets the implemented interface at the specified index.</summary>
      <param name="index">Interface index.</param>
      <returns>Interface type.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KType.InterfaceCount">
      <summary>Reports count of implemented interfaces.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KType.Is(Lmi3d.Zen.KType)">
      <summary>Determines whether a type is equivalent to another type.</summary>
      <param name="other">Type to which type is compared.</param>
      <returns>kTRUE if type is equivalent.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KType.IsAbstract">
      <summary>Determines whether a type represents an abstract class.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.IsArrayValue">
      <summary>Reports whether the type is an 'array-value' type (e.g., kText32)</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.IsBitEnum">
      <summary>Reports whether the type is an enumeration bitset.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.IsClass">
      <summary>Determines whether a type represents a class.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.IsEnum">
      <summary>Reports whether the type is an enumeration.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.IsInterface">
      <summary>Determines whether a type represents an interface.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.IsPacked">
      <summary>Reports whether the fields of a value type are tightly packed (free from structure padding).</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.IsPrimitive">
      <summary>Reports whether the type is a primitive value (single-valued; lacks fields).</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.IsReference">
      <summary>Determines whether a type represents a class or interface.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.IsValue">
      <summary>Determines whether a type represents a value (primitive, struct, enum).</summary>
    </member>
    <member name="M:Lmi3d.Zen.KType.IVTable(Lmi3d.Zen.KType)">
      <summary>Gets a pointer to the type's virtual method table corresponding to the specified interface type.</summary>
      <param name="interfaceType">Interface type.</param>
      <returns>Interface virtual table pointer.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KType.KTypeId"></member>
    <member name="P:Lmi3d.Zen.KType.MethodCount">
      <summary>Reports count of non-virtual methods.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KType.MethodInfoAt(System.Int32)">
      <summary>Gets metadata for the non-virtual method at the specified index.</summary>
      <param name="index">Method index.</param>
      <returns>Method metadata.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KType.Name">
      <summary>Gets the name of the type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KType.ParseEnumerator(System.String)">
      <summary>Parses an enumerator value from a text buffer using the enumerator display name.</summary>
      <param name="formattedName">Enumerator display name.</param>
      <returns>Enumerator value.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KType.Size">
      <summary>Gets the external size of a type.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.Static">
      <summary>Gets a pointer to the type's static data structure.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.StaticInitialized">
      <summary>Reports whether the type's static data structure has been successfully initialized.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.StaticSize">
      <summary>Gets the size of a type's static data.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KType.VersionCount">
      <summary>Reports count of registered serilization versions.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KType.VersionInfoAt(System.Int32)">
      <summary>Gets metadata for the serialization version at the specified index.</summary>
      <param name="index">Serialization version index.</param>
      <returns>Serialization version metadata.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KType.VMethodCount">
      <summary>Reports count of virtual methods.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KType.VMethodInfoAt(System.Int32)">
      <summary>Gets metadata for the virtual method at the specified index.</summary>
      <param name="index">Method index.</param>
      <returns>Method metadata.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KType.VTable">
      <summary>Gets a pointer to the type's primary virtual method table.</summary>
    </member>
    <member name="T:Lmi3d.Zen.KTypeVersion">
      <summary>Represents an opaque reference to type version information (used in object serialization).</summary>
    </member>
    <member name="T:Lmi3d.Zen.KTypeVersionInfo">
      <summary> Represents type field information. </summary>
    </member>
    <member name="P:Lmi3d.Zen.KTypeVersionInfo.Deserialize">
      <summary>Deserialization method.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KTypeVersionInfo.Format">
      <summary>Serialization format name (e.g. "kdat6").</summary>
    </member>
    <member name="F:Lmi3d.Zen.KTypeVersionInfo.FormatVersion">
      <summary>Serialization format version (e.g. "6.0.0.0").</summary>
    </member>
    <member name="P:Lmi3d.Zen.KTypeVersionInfo.Guid">
      <summary>Unique id (e.g. "kArrayList-0").</summary>
    </member>
    <member name="P:Lmi3d.Zen.KTypeVersionInfo.Serialize">
      <summary>Serialization method.</summary>
    </member>
    <member name="T:Lmi3d.Zen.KValue">
      <summary>Root of zen value types.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KValue.KTypeId"></member>
    <member name="T:Lmi3d.Zen.KVersion">
      <summary>Represents a version number. </summary>
    </member>
    <member name="M:Lmi3d.Zen.KVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KVersion</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.KVersion.#ctor(System.UInt32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.KVersion</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Lmi3d.Zen.KVersion.Build">
      <summary>Gets the build part of a version number.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KVersion.Equals(Lmi3d.Zen.KVersion)"></member>
    <member name="M:Lmi3d.Zen.KVersion.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.KVersion.Format">
      <summary>Formats a version to a string.</summary>
      <returns>Formatted string (e.g., "1.2.3.4")</returns>
    </member>
    <member name="M:Lmi3d.Zen.KVersion.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.KVersion.KTypeId"></member>
    <member name="P:Lmi3d.Zen.KVersion.Major">
      <summary>Gets the major part of a version number.</summary>
    </member>
    <member name="P:Lmi3d.Zen.KVersion.Minor">
      <summary>Gets the minor part of a version number.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KVersion.op_Equality(Lmi3d.Zen.KVersion,Lmi3d.Zen.KVersion)"></member>
    <member name="M:Lmi3d.Zen.KVersion.op_Implicit(Lmi3d.Zen.KVersion)~System.UInt32"></member>
    <member name="M:Lmi3d.Zen.KVersion.op_Implicit(System.UInt32)~Lmi3d.Zen.KVersion"></member>
    <member name="M:Lmi3d.Zen.KVersion.op_Inequality(Lmi3d.Zen.KVersion,Lmi3d.Zen.KVersion)"></member>
    <member name="M:Lmi3d.Zen.KVersion.Parse(System.String)">
      <summary>Parses a version from a formatted string.</summary>
      <param name="string">Formatted string (e.g., "1.2.3.4")</param>
      <returns>Version number.</returns>
    </member>
    <member name="P:Lmi3d.Zen.KVersion.Release">
      <summary>Gets the release part of a version number.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KVersion.ToString"></member>
    <member name="F:Lmi3d.Zen.KVersion.Value"></member>
    <member name="T:Lmi3d.Zen.KVoid">
      <summary>Represents a value type with zero size.</summary>
    </member>
    <member name="M:Lmi3d.Zen.KVoid.Equals(Lmi3d.Zen.KVoid)"></member>
    <member name="M:Lmi3d.Zen.KVoid.Equals(System.Object)"></member>
    <member name="P:Lmi3d.Zen.KVoid.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Crypto.KBlowfishCipher">
      <summary>Blowfish cipher implementation.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KBlowfishCipher.#ctor(System.Byte[],Lmi3d.Zen.Crypto.KCipherPadding,Lmi3d.Zen.Crypto.KCipherMode)">
      <summary>Constructs a kBlowfishCipher instance.</summary>
      <param name="key">Key.</param>
      <param name="padding">Padding used in encryption.</param>
      <param name="mode">Cipher mode used for encryption and decryption.</param>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KBlowfishCipher.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KBlowfishCipher class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KBlowfishCipher.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KBlowfishCipher class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Crypto.KBlowfishCipher.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Crypto.KBlowfishCipher.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Crypto.KCipher">
      <summary>Abstract base class for symmetric-key encryption classes.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KCipher.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KCipher class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KCipher.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KCipher class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Crypto.KCipher.Blocksize"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipher.Decrypt(System.Byte[])">
      <summary>Decrypts data.</summary>
      <param name="data">Data to decrypt.</param>
      <returns>Decrypted data.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Crypto.KCipher.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipher.Encrypt(System.Byte[])">
      <summary>Encrypts data.</summary>
      <param name="data">Data to encrypt.</param>
      <returns>Encrypted data.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Crypto.KCipher.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Crypto.KCipher.Mode"></member>
    <member name="P:Lmi3d.Zen.Crypto.KCipher.Padding"></member>
    <member name="T:Lmi3d.Zen.Crypto.KCipherMode">
      <summary>Represents cipher mode for encryption and decryption.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherMode.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Crypto.KCipherMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Lmi3d.Zen.Crypto.KCipherMode.ECB">
      <summary>Electronic Cook Book, each block is encrypted independently.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherMode.Equals(Lmi3d.Zen.Crypto.KCipherMode)"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherMode.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherMode.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherMode.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Crypto.KCipherMode.KTypeId"></member>
    <member name="F:Lmi3d.Zen.Crypto.KCipherMode.Null">
      <summary>Unknown.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherMode.op_Equality(Lmi3d.Zen.Crypto.KCipherMode,Lmi3d.Zen.Crypto.KCipherMode)"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherMode.op_Equality(Lmi3d.Zen.Crypto.KCipherMode,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherMode.op_Implicit(Lmi3d.Zen.Crypto.KCipherMode)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherMode.op_Implicit(System.Int32)~Lmi3d.Zen.Crypto.KCipherMode"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherMode.op_Inequality(Lmi3d.Zen.Crypto.KCipherMode,Lmi3d.Zen.Crypto.KCipherMode)"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherMode.op_Inequality(Lmi3d.Zen.Crypto.KCipherMode,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherMode.ToString"></member>
    <member name="P:Lmi3d.Zen.Crypto.KCipherMode.Value"></member>
    <member name="T:Lmi3d.Zen.Crypto.KCipherPadding">
      <summary>Represents padding mode for encryption.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherPadding.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Crypto.KCipherPadding</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Lmi3d.Zen.Crypto.KCipherPadding.Ansix923">
      <summary>ANSIX923, padding string consists of a sequence of bytes filled with zeros before the length.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherPadding.Equals(Lmi3d.Zen.Crypto.KCipherPadding)"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherPadding.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherPadding.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherPadding.GetHashCode"></member>
    <member name="F:Lmi3d.Zen.Crypto.KCipherPadding.Iso10126">
      <summary>ISO10126, padding string consists of random data before the length.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Crypto.KCipherPadding.KTypeId"></member>
    <member name="F:Lmi3d.Zen.Crypto.KCipherPadding.None">
      <summary>No padding, requires that the encrypted string is a multiple of 8 bytes long.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Crypto.KCipherPadding.Null">
      <summary>Unknown.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherPadding.op_Equality(Lmi3d.Zen.Crypto.KCipherPadding,Lmi3d.Zen.Crypto.KCipherPadding)"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherPadding.op_Equality(Lmi3d.Zen.Crypto.KCipherPadding,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherPadding.op_Implicit(Lmi3d.Zen.Crypto.KCipherPadding)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherPadding.op_Implicit(System.Int32)~Lmi3d.Zen.Crypto.KCipherPadding"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherPadding.op_Inequality(Lmi3d.Zen.Crypto.KCipherPadding,Lmi3d.Zen.Crypto.KCipherPadding)"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherPadding.op_Inequality(Lmi3d.Zen.Crypto.KCipherPadding,System.Int32)"></member>
    <member name="F:Lmi3d.Zen.Crypto.KCipherPadding.Pkcs7">
      <summary>PKCS7, padding string consists of a sequence of bytes, each of which is equal to the total number of padding bytes added.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherPadding.ToString"></member>
    <member name="P:Lmi3d.Zen.Crypto.KCipherPadding.Value"></member>
    <member name="F:Lmi3d.Zen.Crypto.KCipherPadding.Zero">
      <summary>Zero, padding string consists of bytes set to zero.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Crypto.KCipherStream">
      <summary>Supports streaming encryption or decryption. </summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherStream.#ctor(Lmi3d.Zen.Io.KStream,Lmi3d.Zen.Crypto.KCipher)">
      <summary>Constructs a kCipherStream object.</summary>
      <param name="stream">Stream used for the underlying read/write functions.</param>
      <param name="cipher">Cipher used for encyption and decryption.</param>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherStream.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KCipherStream class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherStream.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KCipherStream class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Crypto.KCipherStream.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Crypto.KCipherStream.FlushFinal">
      <summary>Flushes any pending data. </summary>
    </member>
    <member name="P:Lmi3d.Zen.Crypto.KCipherStream.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Crypto.KHash">
      <summary>Abstract base class providing hash functionality.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KHash.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KHash class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KHash.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KHash class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KHash.Clear">
      <summary>Clears the internal buffer so instance can be updated with new data.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Crypto.KHash.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Crypto.KHash.Digest">
      <summary>Returns the digest.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KHash.DigestArray(System.Byte[])">
      <summary>Returns the digest.</summary>
      <param name="buffer">Receives the digest for the data.</param>
      <param name="size">Size of the buffer, in bytes.</param>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KHash.DigestArray(System.IntPtr,System.Int64)">
      <summary>Returns the digest.</summary>
      <param name="buffer">Receives the digest for the data.</param>
      <param name="size">Size of the buffer, in bytes.</param>
    </member>
    <member name="P:Lmi3d.Zen.Crypto.KHash.DigestSize">
      <summary>Returns the message digest length in bytes.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Crypto.KHash.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Crypto.KHash.Update(System.Byte[])">
      <summary>Updates the hash with the data.</summary>
      <param name="buffer">Buffer containing the data.</param>
      <param name="size">Size of the buffer, in bytes.</param>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KHash.Update(System.IntPtr,System.Int64)">
      <summary>Updates the hash with the data.</summary>
      <param name="buffer">Buffer containing the data.</param>
      <param name="size">Size of the buffer, in bytes.</param>
    </member>
    <member name="T:Lmi3d.Zen.Crypto.KSha1Hash">
      <summary>Sha1 hash implementation.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KSha1Hash.#ctor">
      <summary>Constructs a KSha1Hash instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KSha1Hash.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KSha1Hash class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Crypto.KSha1Hash.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KSha1Hash class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Crypto.KSha1Hash.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Crypto.KSha1Hash.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Data.KArgb">
      <summary>32-bit color pixel structure (B/G/R/A).</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArgb.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new KArgb instance.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KArgb.A">
      <summary>Alpha component value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KArgb.B">
      <summary>Blue component value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArgb.Equals(Lmi3d.Zen.Data.KArgb)"></member>
    <member name="M:Lmi3d.Zen.Data.KArgb.Equals(System.Object)"></member>
    <member name="F:Lmi3d.Zen.Data.KArgb.G">
      <summary>Green component value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArgb.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Data.KArgb.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KArgb.op_Equality(Lmi3d.Zen.Data.KArgb,Lmi3d.Zen.Data.KArgb)"></member>
    <member name="M:Lmi3d.Zen.Data.KArgb.op_Inequality(Lmi3d.Zen.Data.KArgb,Lmi3d.Zen.Data.KArgb)"></member>
    <member name="F:Lmi3d.Zen.Data.KArgb.R">
      <summary>Red component value.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KArray1">
      <summary>Represents a 1D array.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.#ctor">
      <summary>Initializes a new instance of the KArray1 class without specifying an item type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.#ctor(Lmi3d.Zen.KType,System.Int64)">
      <summary>Initializes a new instance of the KArray1 class with the specified item type and length.</summary>
      <param name="itemType">Type of array element.</param>
      <param name="length">Length of array.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.#ctor(Lmi3d.Zen.KType,System.Int64,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KArray1 class with the specified item type and length.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length">Length of array.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.#ctor(Lmi3d.Zen.KType,System.Int64,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KArray1 class with the specified item type and length.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="allocator">Memory allocator.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length">Length of array.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KArray1 class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KArray1 class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.Allocate(Lmi3d.Zen.KType,System.Int64)">
      <summary>Reallocates the internal array item buffer.</summary>
      <param name="itemType">Type of array element.</param>
      <param name="length">Length of array.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.Allocate(Lmi3d.Zen.KType,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Reallocates the internal array item buffer.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length">Length of array.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.Assign(Lmi3d.Zen.Data.KArray1)">
      <summary>Performs a shallow copy of the source array.</summary>
      <param name="source">Source array to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.Assign(Lmi3d.Zen.Data.KArray1,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Performs a shallow copy of the source array.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="source">Source array to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.Attach(System.IntPtr,Lmi3d.Zen.KType,System.Int64)">
      <summary>Attaches the array to an external item buffer.</summary>
      <param name="items">External item buffer.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length">Length of array.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.Attach(System.IntPtr,Lmi3d.Zen.KType,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Attaches the array to an external item buffer.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="items">External item buffer.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length">Length of array.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray1.Count">
      <summary>Gets the array item count, in elements.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray1.Data">
      <summary>Gets a pointer to the array item buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray1.DataSize">
      <summary>Gets the size, in bytes, of the array item buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray1.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Data.KArray1.Get``1(System.Int64)">
      <summary>Gets the item at the specified index.</summary>
      <param name="index">Item index.</param>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>Array item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.Get``1(System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Gets the item at the specified index.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="index">Item index.</param>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>Array item.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray1.ItemSize">
      <summary>Gets the array item size, in bytes.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray1.ItemType">
      <summary>Gets the array item type.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray1.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Data.KArray1.Length">
      <summary>Gets the array length, in elements.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.Set``1(System.Int64,``0)">
      <summary>Sets the value of an item.</summary>
      <param name="index">Array item index.</param>
      <param name="item">Item to be copied into the array.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.Set``1(System.Int64,``0,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets the value of an item.</summary>
      <param name="index">Array item index.</param>
      <param name="item">Item to be copied into the array.</param>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.Zero">
      <summary>Sets all array element bits to zero.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray1.Zero(System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets all array element bits to zero.</summary>
      <param name="refStyle">RefStyle for this object.</param>
    </member>
    <member name="T:Lmi3d.Zen.Data.KArray2">
      <summary>Represents a 2D array.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.#ctor">
      <summary>Initializes a new instance of the KArray2 class without specifying an item type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.#ctor(Lmi3d.Zen.KType,System.Int64,System.Int64)">
      <summary>Initializes a new instance of the KArray2 class with the specified item type and dimension lengths.</summary>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension (innermost).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.#ctor(Lmi3d.Zen.KType,System.Int64,System.Int64,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KArray2 class with the specified item type and dimension lengths.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension (innermost).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.#ctor(Lmi3d.Zen.KType,System.Int64,System.Int64,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KArray2 class with the specified item type and dimension lengths.</summary>
      <param name="refStyle">Ref style.</param>
      <param name="allocator">Memory allocator.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension (innermost).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KArray2 class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KArray2 class with the specified Zen object handle.</summary>
      <param name="refStyle">Ref style.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.Allocate(Lmi3d.Zen.KType,System.Int64,System.Int64)">
      <summary>Reallocates the internal array item buffer.</summary>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension (innermost).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.Allocate(Lmi3d.Zen.KType,System.Int64,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Reallocates the internal array item buffer.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension (innermost).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.Assign(Lmi3d.Zen.Data.KArray2)">
      <summary>Performs a shallow copy of the source array.</summary>
      <param name="source">Source array to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.Assign(Lmi3d.Zen.Data.KArray2,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Performs a shallow copy of the source array.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="source">Source array to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.Attach(System.IntPtr,Lmi3d.Zen.KType,System.Int64,System.Int64)">
      <summary>Attaches the array to an external item buffer.</summary>
      <param name="items">External item buffer.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension (innermost).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.Attach(System.IntPtr,Lmi3d.Zen.KType,System.Int64,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Attaches the array to an external item buffer.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="items">External item buffer.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension (innermost).</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray2.Count">
      <summary>Gets the array item count, in elements.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray2.Data">
      <summary>Gets a pointer to the array item buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray2.DataSize">
      <summary>Gets the size, in bytes, of the array item buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray2.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Data.KArray2.Get``1(System.Int64,System.Int64)">
      <summary>Gets the item at the specified indices.</summary>
      <param name="index0">First dimension index.</param>
      <param name="index1">Second dimension index.</param>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>Array item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.Get``1(System.Int64,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Gets the item at the specified indices.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="index0">First dimension index.</param>
      <param name="index1">Second dimension index.</param>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>Array item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.GetLength(System.Int64)">
      <summary>Gets the length of the specified array dimension, in elements.</summary>
      <param name="dimension">Array dimension index.</param>
      <returns>Array dimension length (in elements).</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray2.ItemSize">
      <summary>Gets the array item size, in bytes.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray2.ItemType">
      <summary>Gets the array item type.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray2.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Data.KArray2.Length0">
      <summary>Gets the length of the outermost array dimension, in elements.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray2.Length1">
      <summary>Gets the length of the innermost array dimension, in elements.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.Set``1(System.Int64,System.Int64,``0)">
      <summary>Sets the value of an item.</summary>
      <param name="index0">First dimension index.</param>
      <param name="index1">Second dimension index.</param>
      <param name="item">Item to be copied into the array.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.Set``1(System.Int64,System.Int64,``0,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets the value of an item.</summary>
      <param name="index0">First dimension index.</param>
      <param name="index1">Second dimension index.</param>
      <param name="item">Item to be copied into the array.</param>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.Zero">
      <summary>Sets all array element bits to zero.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray2.Zero(System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets all array element bits to zero.</summary>
      <param name="refStyle">RefStyle for this object.</param>
    </member>
    <member name="T:Lmi3d.Zen.Data.KArray3">
      <summary>Represents a 3D array.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.#ctor">
      <summary>Initializes a new instance of the KArray3 class without specifying an item type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.#ctor(Lmi3d.Zen.KType,System.Int64,System.Int64,System.Int64)">
      <summary>Initializes a new instance of the KArray3 class with the specified item type and dimension lengths.</summary>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension.</param>
      <param name="length2">Length of third array dimension (innermost).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.#ctor(Lmi3d.Zen.KType,System.Int64,System.Int64,System.Int64,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KArray3 class with the specified item type and dimension lengths.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension.</param>
      <param name="length2">Length of third array dimension (innermost).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.#ctor(Lmi3d.Zen.KType,System.Int64,System.Int64,System.Int64,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KArray3 class with the specified item type and dimension lengths.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="allocator">Memory allocator.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension.</param>
      <param name="length2">Length of third array dimension (innermost).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KArray3 class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KArray3 class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.Allocate(Lmi3d.Zen.KType,System.Int64,System.Int64,System.Int64)">
      <summary>Reallocates the internal array item buffer.</summary>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension.</param>
      <param name="length2">Length of third array dimension (innermost).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.Allocate(Lmi3d.Zen.KType,System.Int64,System.Int64,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Reallocates the internal array item buffer.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension.</param>
      <param name="length2">Length of third array dimension (innermost).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.Assign(Lmi3d.Zen.Data.KArray3)">
      <summary>Performs a shallow copy of the source array.</summary>
      <param name="source">Source array to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.Assign(Lmi3d.Zen.Data.KArray3,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Performs a shallow copy of the source array.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="source">Source array to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.Attach(System.IntPtr,Lmi3d.Zen.KType,System.Int64,System.Int64,System.Int64)">
      <summary>Attaches the array to an external item buffer.</summary>
      <param name="items">External item buffer.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension.</param>
      <param name="length2">Length of third array dimension (innermost).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.Attach(System.IntPtr,Lmi3d.Zen.KType,System.Int64,System.Int64,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Attaches the array to an external item buffer.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="items">External item buffer.</param>
      <param name="itemType">Type of array element.</param>
      <param name="length0">Length of first array dimension (outermost).</param>
      <param name="length1">Length of second array dimension.</param>
      <param name="length2">Length of third array dimension (innermost).</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray3.Count">
      <summary>Gets the array item count, in elements.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray3.Data">
      <summary>Gets a pointer to the array item buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray3.DataSize">
      <summary>Gets the size, in bytes, of the array item buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray3.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Data.KArray3.Get``1(System.Int64,System.Int64,System.Int64)">
      <summary>Gets the item at the specified indices.</summary>
      <param name="index0">First dimension index.</param>
      <param name="index1">Second dimension index.</param>
      <param name="index2">Third dimension index.</param>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>Array item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.Get``1(System.Int64,System.Int64,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Gets the item at the specified indices.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="index0">First dimension index.</param>
      <param name="index1">Second dimension index.</param>
      <param name="index2">Third dimension index.</param>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>Array item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.GetLength(System.Int64)">
      <summary>Gets the length of the specified array dimension, in elements.</summary>
      <param name="dimension">Array dimension index.</param>
      <returns>Array dimension length (in elements).</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray3.ItemSize">
      <summary>Gets the array item size.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray3.ItemType">
      <summary>Gets the array item type.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray3.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Data.KArray3.Length0">
      <summary>Gets the length of the outermost array dimension, in elements.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray3.Length1">
      <summary>Gets the length of the centermost array dimension, in elements.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArray3.Length2">
      <summary>Gets the length of the innermost array dimension, in elements.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.Set``1(System.Int64,System.Int64,System.Int64,``0)">
      <summary>Sets the value of an item.</summary>
      <param name="index0">First dimension index.</param>
      <param name="index1">Second dimension index.</param>
      <param name="index2">Third dimension index.</param>
      <param name="item">Item to be copied into the array.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.Set``1(System.Int64,System.Int64,System.Int64,``0,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets the value of an item.</summary>
      <param name="index0">First dimension index.</param>
      <param name="index1">Second dimension index.</param>
      <param name="index2">Third dimension index.</param>
      <param name="item">Item to be copied into the array.</param>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.Zero">
      <summary>Sets all array element bits to zero.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArray3.Zero(System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets all array element bits to zero.</summary>
      <param name="refStyle">RefStyle for this object.</param>
    </member>
    <member name="T:Lmi3d.Zen.Data.KArrayList">
      <summary>Represents a list implemented with a dynamic array.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.#ctor">
      <summary>Initializes a new instance of the KArrayList class without specifying an item type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.#ctor(Lmi3d.Zen.KType)">
      <summary>Initializes a new instance of the KArrayList class with the specified item type.</summary>
      <param name="itemType">Type of list element.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.#ctor(Lmi3d.Zen.KType,System.Int64)">
      <summary>Initializes a new instance of the KArrayList class with the specified initial capacity.</summary>
      <param name="itemType">Type of list element.</param>
      <param name="initialCapacity">Capacity initially reserved for list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.#ctor(Lmi3d.Zen.KType,System.Int64,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KArrayList class with the specified initial capacity.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="itemType">Type of list element.</param>
      <param name="initialCapacity">Capacity initially reserved for list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.#ctor(Lmi3d.Zen.KType,System.Int64,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KArrayList class with the specified initial capacity.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="allocator">Memory allocator.</param>
      <param name="itemType">Type of list element.</param>
      <param name="initialCapacity">Capacity initially reserved for list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KArrayList class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KArrayList class with the specified Zen object handle.</summary>
      <param name="refStyle">Ref style.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Add``1(``0)">
      <summary>Adds the specified item to the end of the list.</summary>
      <param name="item">Item to be copied into the list.</param>
      <typeparam name="T">Type of item to be added to the list.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Add``1(``0,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Adds the specified item to the end of the list.</summary>
      <param name="item">Item to be copied into the list.</param>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="T">Type of item to be added to the list.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Allocate(Lmi3d.Zen.KType,System.Int64)">
      <summary>Reallocates the list item buffer.</summary>
      <param name="itemType">Type of list element.</param>
      <param name="initialCapacity">Capacity initially reserved for list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Allocate(Lmi3d.Zen.KType,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Reallocates the list item buffer.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="itemType">Type of list element.</param>
      <param name="initialCapacity">Capacity initially reserved for list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Append(System.IntPtr,System.Int64)">
      <summary>Appends the specified items to the list.</summary>
      <param name="items">Item buffer.</param>
      <param name="count">Count of list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Append(System.IntPtr,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Appends the specified items to the list.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="items">Item buffer.</param>
      <param name="count">Count of list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Assign(Lmi3d.Zen.Data.KArrayList)">
      <summary>Performs a shallow copy of the source list.</summary>
      <param name="source">Source list to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Assign(Lmi3d.Zen.Data.KArrayList,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Performs a shallow copy of the source list.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="source">Source list to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Attach(System.IntPtr,Lmi3d.Zen.KType,System.Int64)">
      <summary>Attaches the list object to an external buffer.</summary>
      <param name="items">Item buffer.</param>
      <param name="itemType">Type of list element.</param>
      <param name="capacity">List capacity.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Attach(System.IntPtr,Lmi3d.Zen.KType,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Attaches the list object to an external buffer.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="items">Item buffer.</param>
      <param name="itemType">Type of list element.</param>
      <param name="capacity">List capacity.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArrayList.Capacity">
      <summary>Gets the number of elements for which space has been allocated.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Clear">
      <summary>Sets the count of list items to zero.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Clear(System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets the count of list items to zero.</summary>
      <param name="refStyle">RefStyle for this object.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArrayList.Count">
      <summary>Gets the current count of items in the list.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArrayList.Data">
      <summary>Gets a pointer to the list item buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArrayList.DataSize">
      <summary>Gets the total size of list data (Count x ItemSize), in bytes.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArrayList.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Get``1(System.Int64)">
      <summary>Gets the item at the specified index.</summary>
      <param name="index">Item index.</param>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>List item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Get``1(System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Gets the item at the specified index.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="index">Item index.</param>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>List item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Import(System.IntPtr,Lmi3d.Zen.KType,System.Int64)">
      <summary>Copies the specified items into the list, replacing existing contents.</summary>
      <param name="items">Item buffer.</param>
      <param name="itemType">Type of list element.</param>
      <param name="count">Count of list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Import(System.IntPtr,Lmi3d.Zen.KType,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Copies the specified items into the list, replacing existing contents.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="items">Item buffer.</param>
      <param name="itemType">Type of list element.</param>
      <param name="count">Count of list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Insert``1(System.Int64,``0)">
      <summary>Inserts an item into the list at the specified position.</summary>
      <param name="before">Item will be inserted before the item at this index.</param>
      <param name="item">Item to be copied into the list.</param>
      <typeparam name="T">Type of item to be inserted into the list.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Insert``1(System.Int64,``0,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Inserts an item into the list at the specified position.</summary>
      <param name="before">Item will be inserted before the item at this index.</param>
      <param name="item">Item to be copied into the list.</param>
      <typeparam name="T">Type of item to be inserted into the list.</typeparam>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArrayList.ItemSize">
      <summary>Gets the list element size, in bytes.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArrayList.ItemType">
      <summary>Gets the list element type.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KArrayList.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Remove``1(System.Int64)">
      <summary>Removes an item from the list at the specified index.</summary>
      <param name="index">Item at this index will be removed from the list.</param>
      <typeparam name="T">Type of item to be removed from the list.</typeparam>
      <returns>Item removed from list.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Remove``1(System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Removes an item from the list at the specified index.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="index">Item at this index will be removed from the list.</param>
      <typeparam name="T">Type of item to be removed from the list.</typeparam>
      <returns>Item removed from list.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Reserve(System.Int64)">
      <summary>Ensures that capacity is reserved for at least the specified number of list items.</summary>
      <param name="capacity">List capacity, in items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Resize(System.Int64)">
      <summary>Sets the current count of list items to the specified value.</summary>
      <param name="count">List size, in items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Resize(System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets the current count of list items to the specified value.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="count">List size, in items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Set``1(System.Int64,``0)">
      <summary>Sets the value of an item.</summary>
      <param name="index">Item index.</param>
      <param name="item">Item to be copied into the list.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Set``1(System.Int64,``0,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets the value of an item.</summary>
      <param name="index">Item index.</param>
      <param name="item">Item to be copied into the list.</param>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Zero">
      <summary>Sets the memory for all list elements to zero.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KArrayList.Zero(System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets the memory for all list elements to zero.</summary>
      <param name="refStyle">RefStyle for this object.</param>
    </member>
    <member name="T:Lmi3d.Zen.Data.KBox">
      <summary>Represents an instance of a Zen value type as a Zen object.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KBox.#ctor">
      <summary>Initializes a new instance of the KBox class without specifying an item type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KBox.#ctor(Lmi3d.Zen.KType)">
      <summary>Initializes a new instance of the KBox class with the specified item type.</summary>
      <param name="itemType">Type of box element (value types only).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KBox.#ctor(Lmi3d.Zen.KType,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KBox class with the specified item type.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="itemType">Type of box element (value types only).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KBox.#ctor(Lmi3d.Zen.KType,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KBox class with the specified item type.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="allocator">Memory allocator.</param>
      <param name="itemType">Type of box element (value types only).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KBox.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KBox class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KBox.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KBox class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KBox.Allocate(Lmi3d.Zen.KType)">
      <summary>Reallocates the internal box item buffer.</summary>
      <param name="itemType">Type of box element.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KBox.Assign(Lmi3d.Zen.Data.KBox)">
      <summary>Copies the value contained within the source box into this box.</summary>
      <param name="source">Source box to be copied.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KBox.Data">
      <summary>Gets a pointer to the box item buffer.</summary>
      <returns>Pointer to box item buffer.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KBox.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Data.KBox.Get``1">
      <summary>Gets the box value.</summary>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>Box item.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KBox.ItemSize">
      <summary>Gets the box item size.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KBox.ItemType">
      <summary>Gets the box item type.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KBox.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KBox.Set``1(``0)">
      <summary>Sets the box value.</summary>
      <param name="item">Item to be copied into the box.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KBox.Zero">
      <summary>Sets all box element bits to zero.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KCfa">
      <summary>Image color filter array type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KCfa.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Data.KCfa</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KCfa.BayerBggr">
      <summary>Bayer filter, BG/GR.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KCfa.BayerGbrg">
      <summary>Bayer filter, GB/RG.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KCfa.BayerGrbg">
      <summary>Bayer filter, GR/BG.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KCfa.BayerRggb">
      <summary>Bayer filter, RG/GB.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KCfa.Equals(Lmi3d.Zen.Data.KCfa)"></member>
    <member name="M:Lmi3d.Zen.Data.KCfa.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Data.KCfa.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KCfa.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Data.KCfa.KTypeId"></member>
    <member name="F:Lmi3d.Zen.Data.KCfa.Null">
      <summary>No color filter array.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KCfa.op_Equality(Lmi3d.Zen.Data.KCfa,Lmi3d.Zen.Data.KCfa)"></member>
    <member name="M:Lmi3d.Zen.Data.KCfa.op_Equality(Lmi3d.Zen.Data.KCfa,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Data.KCfa.op_Implicit(Lmi3d.Zen.Data.KCfa)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.Data.KCfa.op_Implicit(System.Int32)~Lmi3d.Zen.Data.KCfa"></member>
    <member name="M:Lmi3d.Zen.Data.KCfa.op_Inequality(Lmi3d.Zen.Data.KCfa,Lmi3d.Zen.Data.KCfa)"></member>
    <member name="M:Lmi3d.Zen.Data.KCfa.op_Inequality(Lmi3d.Zen.Data.KCfa,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Data.KCfa.ToString"></member>
    <member name="P:Lmi3d.Zen.Data.KCfa.Value"></member>
    <member name="T:Lmi3d.Zen.Data.KCollection">
      <summary>Represents a collection of elements.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KCollection.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KCollection class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KCollection.Count">
      <summary>Gets the collection element count.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KCollection.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Data.KCollection.ItemType">
      <summary>Gets the collection element type.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KCollection.Iterator">
      <summary>Gets an iterator to the first element in the collection.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KCollection.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Data.KComparison">
      <summary>Comparison type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KComparison.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Data.KComparison</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KComparison.Equal">
      <summary>Is equal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KComparison.Equals(Lmi3d.Zen.Data.KComparison)"></member>
    <member name="M:Lmi3d.Zen.Data.KComparison.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Data.KComparison.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KComparison.GetHashCode"></member>
    <member name="F:Lmi3d.Zen.Data.KComparison.GreaterThan">
      <summary>Is greater than.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KComparison.GreaterThanOrEqual">
      <summary>Is greater than or equal.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KComparison.KTypeId"></member>
    <member name="F:Lmi3d.Zen.Data.KComparison.LessThan">
      <summary>Is less than.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KComparison.LessThanOrEqual">
      <summary>Is less than or equal.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KComparison.NotEqual">
      <summary>Is not equal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KComparison.op_Equality(Lmi3d.Zen.Data.KComparison,Lmi3d.Zen.Data.KComparison)"></member>
    <member name="M:Lmi3d.Zen.Data.KComparison.op_Equality(Lmi3d.Zen.Data.KComparison,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Data.KComparison.op_Implicit(Lmi3d.Zen.Data.KComparison)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.Data.KComparison.op_Implicit(System.Int32)~Lmi3d.Zen.Data.KComparison"></member>
    <member name="M:Lmi3d.Zen.Data.KComparison.op_Inequality(Lmi3d.Zen.Data.KComparison,Lmi3d.Zen.Data.KComparison)"></member>
    <member name="M:Lmi3d.Zen.Data.KComparison.op_Inequality(Lmi3d.Zen.Data.KComparison,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Data.KComparison.ToString"></member>
    <member name="P:Lmi3d.Zen.Data.KComparison.Value"></member>
    <member name="T:Lmi3d.Zen.Data.KImage">
      <summary>Represents a 2D collection of pixels.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.#ctor">
      <summary>Initializes a new instance of the KImage class without specifying a pixel type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.#ctor(Lmi3d.Zen.KType,System.Int64,System.Int64)">
      <summary>Initializes a new instance of the KImage class with the specified pixel type and dimensions.</summary>
      <param name="pixelType">Pixel type (must be a value type).</param>
      <param name="width">Image width.</param>
      <param name="height">Image height.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.#ctor(Lmi3d.Zen.KType,System.Int64,System.Int64,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KImage class with the specified pixel type and dimensions.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="pixelType">Pixel type (must be a value type).</param>
      <param name="width">Image width.</param>
      <param name="height">Image height.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.#ctor(Lmi3d.Zen.KType,System.Int64,System.Int64,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KImage class with the specified pixel type and dimensions.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="allocator">Memory allocator.</param>
      <param name="pixelType">Pixel type (must be a value type).</param>
      <param name="width">Image width.</param>
      <param name="height">Image height.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KImage class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KImage class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.Allocate(Lmi3d.Zen.KType,System.Int64,System.Int64)">
      <summary>Reallocates the internal pixel buffer.</summary>
      <param name="pixelType">Type of pixel (values types only).</param>
      <param name="width">Image width, in pixels.</param>
      <param name="height">Image height, in pixels.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KImage.Area">
      <summary>Gets the area of the image, in pixels.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.Assign(Lmi3d.Zen.Data.KImage)">
      <summary>Copies a given source image into this image.</summary>
      <param name="source">Source image to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.Attach(System.IntPtr,Lmi3d.Zen.KType,System.Int64,System.Int64,System.Int64)">
      <summary>Attaches the image to an external pixel buffer.</summary>
      <param name="pixels">Pointer to external pixel buffer.</param>
      <param name="pixelType">Type of pixel (values types only).</param>
      <param name="width">Image width, in pixels.</param>
      <param name="height">Image height, in pixels.</param>
      <param name="stride">Image stride (row size), in bytes.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KImage.Cfa">
      <summary>Gets or sets the color filter array type associated with this image.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KImage.Data">
      <summary>Gets a pointer to the first row in the pixel buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KImage.DataSize">
      <summary>Gets the size, in bytes, of the pixel buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KImage.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Data.KImage.Get``1(System.Int64,System.Int64)">
      <summary>Gets the specified pixel value.</summary>
      <param name="x">Column index.</param>
      <param name="y">Row index.</param>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>Pixel value.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KImage.Height">
      <summary>Gets the height of the image, in pixels.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KImage.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KImage.Load(System.String)">
      <summary>Loads an image from file.</summary>
      <param name="fileName">File path.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.Load(System.String,Lmi3d.Zen.KAlloc)">
      <summary>Loads an image from file.</summary>
      <param name="fileName">File path.</param>
      <param name="allocator">Memory allocator.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KImage.PixelFormat">
      <summary>Gets or sets the optional pixel format descriptor associated with this image.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KImage.PixelSize">
      <summary>Gets the pixel size.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KImage.PixelType">
      <summary>Gets the pixel type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.RowAt(System.Int64)">
      <summary>Gets a pointer to the specified row in the pixel buffer.</summary>
      <param name="y">Row index.</param>
      <returns>Pointer to first pixel in row.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.Save(System.String)">
      <summary>Saves an image to file.</summary>
      <param name="fileName">File path.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.Set``1(System.Int64,System.Int64,``0)">
      <summary>Sets the value of a pixel.</summary>
      <param name="x">Column index.</param>
      <param name="y">Row index.</param>
      <param name="pixel">Pixel value to be copied into the image.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="P:Lmi3d.Zen.Data.KImage.Stride">
      <summary>Gets the size of an image row, including alignment padding bytes, in bytes.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KImage.Width">
      <summary>Gets the width of the image, in pixels.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KImage.Zero">
      <summary>Sets all pixel bits to zero.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KIterator">
      <summary>Represents an iterator used with a KCollection instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KIterator.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KIterator.GetNext``1">
      <summary>Gets the next collection element and then advances the iterator.</summary>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>Next collection element.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KIterator.GetNext``1(System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Gets the next collection element and then advances the iterator.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>Next collection element.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KIterator.HasNext">
      <summary>Determines whether the collection has another item.</summary>
      <param name="iterator">Collection iterator.</param>
      <returns>true if the collection has a next element.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Data.KList">
      <summary>Represents a doubly-linked list.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.#ctor">
      <summary>Initializes a new instance of the KList class without specifying an item type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.#ctor(Lmi3d.Zen.KType,System.Int64)">
      <summary>Initializes a new instance of the KList class with the specified item type and initial capacity.</summary>
      <param name="itemType">Type of list item.</param>
      <param name="initialCapacity">Capacity initially reserved for list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.#ctor(Lmi3d.Zen.KType,System.Int64,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KList class with the specified item type and initial capacity.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="itemType">Type of list item.</param>
      <param name="initialCapacity">Capacity initially reserved for list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.#ctor(Lmi3d.Zen.KType,System.Int64,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KList class with the specified item type and initial capacity.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="allocator">Memory allocator.</param>
      <param name="itemType">Type of list item.</param>
      <param name="initialCapacity">Capacity initially reserved for list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KList class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KList class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.Add``1(``0)">
      <summary>Adds a new item to the end of the list.</summary>
      <param name="content">Item to be added to the list.</param>
      <typeparam name="T">Type of item to be added to the list.</typeparam>
      <returns>Iterator referring to newly-inserted item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.Add``1(``0,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Adds a new item to the end of the list.</summary>
      <param name="content">Item to be added to the list.</param>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="T">Type of item to be added to the list.</typeparam>
      <returns>Iterator referring to newly-inserted item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.Allocate(Lmi3d.Zen.KType,System.Int64)">
      <summary>Reallocates the list.</summary>
      <param name="itemType">Type of list item.</param>
      <param name="initialCapacity">Capacity initially reserved for list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.Allocate(Lmi3d.Zen.KType,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Reallocates the list.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="itemType">Type of list item.</param>
      <param name="initialCapacity">Capacity initially reserved for list items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.Assign(Lmi3d.Zen.Data.KList)">
      <summary>Performs a shallow copy of the source list.</summary>
      <param name="source">List to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.Assign(Lmi3d.Zen.Data.KList,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Performs a shallow copy of the source list.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="source">List to be copied.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KList.Capacity">
      <summary>Gets the number of elements for which space has been allocated.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.Clear">
      <summary>Sets the count of list items to zero.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.Clear(System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets the count of list items to zero.</summary>
      <param name="refStyle">RefStyle for this object.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KList.Count">
      <summary>Gets the count of list elements.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KList.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Data.KList.FindIndex(System.Int64)">
      <summary>Gets a reference to the list item at the specified index.</summary>
      <param name="index">List item index.</param>
      <returns>List item at index.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KList.First">
      <summary>Gets a reference to the first list item.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.Insert``1(Lmi3d.Zen.Data.KListItem,``0)">
      <summary>Inserts an item into the list before the specified list item.</summary>
      <param name="before">Item will be inserted before this list node (if null, inserts at tail).</param>
      <param name="content">Item to be inserted into the list.</param>
      <typeparam name="T">Type of item to be added to the list.</typeparam>
      <returns>Iterator referring to newly-inserted item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.Insert``1(Lmi3d.Zen.Data.KListItem,``0,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Inserts an item into the list before the specified list item.</summary>
      <param name="before">Item will be inserted before this list node (if null, inserts at tail).</param>
      <param name="content">Item to be inserted into the list.</param>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="T">Type of item to be added to the list.</typeparam>
      <returns>Iterator referring to newly-inserted item.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KList.ItemType">
      <summary>Gets the item type.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KList.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Data.KList.Last">
      <summary>Gets a reference to the last list item.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.Remove(Lmi3d.Zen.Data.KListItem)">
      <summary>Removes the specified item from the list.</summary>
      <param name="item">Node to be removed from the list.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.Remove(Lmi3d.Zen.Data.KListItem,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Removes the specified item from the list.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="item">Node to be removed from the list.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KList.Reserve(System.Int64)">
      <summary>Ensures that capacity is reserved for at least the specified number of list items.</summary>
      <param name="capacity">List capacity, in items.</param>
    </member>
    <member name="T:Lmi3d.Zen.Data.KListItem">
      <summary>Represents a node within a KList object.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KListItem.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KListItem.Get``1">
      <summary>Gets the content associated with a list item.</summary>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>List item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KListItem.Get``1(System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Gets the content associated with a list item.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>List item.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KListItem.Next">
      <summary> Gets a reference to the next list item.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KListItem.Previous">
      <summary> Gets a reference to the previous list item.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KListItem.Set``1(``0)">
      <summary>Sets the content associated with a list item.</summary>
      <param name="content">Content to be copied into the list item.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KListItem.Set``1(``0,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets the content associated with a list item.</summary>
      <param name="content">Content to be copied into the list item.</param>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="T:Lmi3d.Zen.Data.KMap">
      <summary>Represents a collection of key-value pairs stored in a hash table.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.#ctor">
      <summary>Initializes a new instance of the KMap class without specifying key/value types.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.#ctor(Lmi3d.Zen.KType,Lmi3d.Zen.KType,System.Int64)">
      <summary>Initializes a new instance of the KMap class with the specified key/value types and initial capacity.</summary>
      <param name="keyType">Type of map key.</param>
      <param name="valueType">Type of map value.</param>
      <param name="initialCapacity">Capacity initially reserved for map items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.#ctor(Lmi3d.Zen.KType,Lmi3d.Zen.KType,System.Int64,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KMap class with the specified key/value types and initial capacity.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="keyType">Type of map key.</param>
      <param name="valueType">Type of map value.</param>
      <param name="initialCapacity">Capacity initially reserved for map items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.#ctor(Lmi3d.Zen.KType,Lmi3d.Zen.KType,System.Int64,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KMap class with the specified key/value types and initial capacity.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="allocator">Memory allocator.</param>
      <param name="keyType">Type of map key.</param>
      <param name="valueType">Type of map value.</param>
      <param name="initialCapacity">Capacity initially reserved for map items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KMap class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KMap class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.Add``2(``0,``1)">
      <summary>Adds a new key-value pair.</summary>
      <param name="key">Map key.</param>
      <param name="value">Map value.</param>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TValue">Value type.</typeparam>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if already present.</exception>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.Add``2(``0,``1,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Adds a new key-value pair.</summary>
      <param name="key">Map key.</param>
      <param name="value">Map value.</param>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TValue">Value type.</typeparam>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if already present.</exception>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.Allocate(Lmi3d.Zen.KType,Lmi3d.Zen.KType,System.Int64)">
      <summary>Reallocates the map.</summary>
      <param name="keyType">Type of map key.</param>
      <param name="valueType">Type of map value.</param>
      <param name="initialCapacity">Capacity initially reserved for map items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.Allocate(Lmi3d.Zen.KType,Lmi3d.Zen.KType,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Reallocates the map.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="keyType">Type of map key.</param>
      <param name="valueType">Type of map value.</param>
      <param name="initialCapacity">Capacity initially reserved for map items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.Assign(Lmi3d.Zen.Data.KMap)">
      <summary>Performs a shallow copy of the source map.</summary>
      <param name="source">Map to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.Assign(Lmi3d.Zen.Data.KMap,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Performs a shallow copy of the source map.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="source">Map to be copied.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KMap.Capacity">
      <summary>Returns the number of elements for which space has been allocated.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.Clear">
      <summary>Sets the count of map items to zero.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.Clear(System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets the count of map items to zero.</summary>
      <param name="refStyle">RefStyle for this object.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KMap.Count">
      <summary>Returns the count of map elements.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KMap.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Data.KMap.Find``2(``0)">
      <summary>Finds the value associated with the given key.</summary>
      <param name="key">Map key.</param>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TValue">Value type.</typeparam>
      <returns>Map value.</returns>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if not found.</exception>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.Find``2(``0,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Finds the value associated with the given key.</summary>
      <param name="key">Map key.</param>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TValue">Value type.</typeparam>
      <returns>Map value.</returns>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if not found.</exception>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.FindItem``2(``0)">
      <summary>Finds the map item associated with the given key.</summary>
      <param name="key">Pointer to key.</param>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TValue">Value type.</typeparam>
      <returns>Map item</returns>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if not found.</exception>
    </member>
    <member name="P:Lmi3d.Zen.Data.KMap.First">
      <summary>Gets a reference to the first map item (key-value pair).</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KMap.KeyType">
      <summary>Returns the key type.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KMap.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KMap.Remove``2(``0)">
      <summary>Removes a key-value pair from the map.</summary>
      <param name="key">Map key.</param>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TValue">Value type.</typeparam>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if not found.</exception>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.Remove``2(``0,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Removes a key-value pair from the map.</summary>
      <param name="key">Map key.</param>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TValue">Value type.</typeparam>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if not found.</exception>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.Remove``2(``0,``0@,``1@)">
      <summary>Removes a key-value pair from the map.</summary>
      <param name="key">Map key.</param>
      <param name="oldKey">Receives old key.</param>
      <param name="oldValue">Receives old value.</param>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TValue">Value type.</typeparam>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if not found.</exception>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.RemoveItem(Lmi3d.Zen.Data.KMapItem)">
      <summary>Removes an item from the map.</summary>
      <param name="item">Map item.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.RemoveItem(Lmi3d.Zen.Data.KMapItem,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Removes an item from the map.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="item">Map item.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.Replace``2(``0,``1)">
      <summary>Adds or replaces a key-value pair.</summary>
      <param name="key">Map key.</param>
      <param name="value">map value.</param>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TValue">Value type.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.Reserve(System.Int64)">
      <summary>Ensures that capacity is reserved for at least the specified number of map items.</summary>
      <param name="capacity">Map capacity, in items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMap.TryFindItem``2(``0)">
      <summary>Attempts to find the map item associated with the given key.</summary>
      <param name="key">Pointer to key.</param>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TValue">Value type.</typeparam>
      <returns>Map item, or null if not found</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KMap.ValueType">
      <summary>Returns the value type.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KMapItem">
      <summary>Represents a node within a KMap object.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMapItem.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KMapItem.GetKey``2">
      <summary>Gets the key associated with a map item.</summary>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TValue">Value type.</typeparam>
      <returns>Map key.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMapItem.GetValue``2">
      <summary>Gets the value associated with a map item.</summary>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TValue">Value type.</typeparam>
      <returns>Map value.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KMapItem.Next">
      <summary> Gets a reference to the next map item.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMapItem.SetValue``2(``1)">
      <summary>Set the value associated with a map item.</summary>
      <param name="value">Map value</param>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TValue">Value type.</typeparam>
    </member>
    <member name="T:Lmi3d.Zen.Data.KMath">
      <summary>Collection of mathematical utility methods.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Abs32s(System.IntPtr,System.IntPtr,System.Int64)">
      <summary>Calculates the absolute value of each element in an input array and stores the result in an output array.</summary>
      <param name="vIn">Input Int32 array.</param>
      <param name="vOut">Output Int32 array.</param>
      <param name="count">Count of values.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Abs64f(System.IntPtr,System.IntPtr,System.Int64)">
      <summary>Calculates the absolute value of each element in an input array and stores the result in an output array.</summary>
      <param name="vIn">Input Double array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Add32s(System.IntPtr,System.IntPtr,System.IntPtr,System.Int64)">
      <summary>Adds the values in two input arrays and stores the result in an output array.</summary>
      <param name="vIn1">First Int32 input array.</param>
      <param name="vIn2">Second Int32 input array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Add64f(System.IntPtr,System.IntPtr,System.IntPtr,System.Int64)">
      <summary>Adds the values in two input arrays and stores the result in an output array.</summary>
      <param name="vIn1">First Double input array.</param>
      <param name="vIn2">Second Double input array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.AddC32s(System.IntPtr,System.IntPtr,System.Int64,System.Int32)">
      <summary>Adds a constant to each element in an input array and stores the result in an output array.</summary>
      <param name="vIn">Input Int32 array.</param>
      <param name="vOut">Output Int32 array.</param>
      <param name="count">Count of values.</param>
      <param name="value">Constant value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.AddC64f(System.IntPtr,System.IntPtr,System.Int64,System.Double)">
      <summary>Adds a constant to each element in an input array and stores the result in an output array.</summary>
      <param name="vIn">Input Double array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
      <param name="value">Constant value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Average32s(System.IntPtr,System.Int64)">
      <param name="v">Array of Int32 values.</param>
      <param name="count">Count of values.</param>
      <returns>Average.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Average64f(System.IntPtr,System.Int64)">
      <param name="v">Array of Double values.</param>
      <param name="count">Count of values.</param>
      <returns>Average.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Centroid32s(System.IntPtr,System.Int64)">
      <summary>Calculates the center of gravity for a numerical array.</summary>
      <param name="v">Array of Int32 values.</param>
      <param name="count">Count of values.</param>
      <returns>The centroid.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Centroid64f(System.IntPtr,System.Int64)">
      <summary>Calculates the center of gravity for a numerical array.</summary>
      <param name="v">Array of Double values.</param>
      <param name="count">Count of values.</param>
      <returns>The centroid.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Clamp(System.Int32,System.Int32,System.Int32)">
      <summary> Returns a value limited to the given range. </summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.ClampC32s(System.IntPtr,System.IntPtr,System.Int64,System.Int32,System.Int32)">
      <summary>Limits each element in an input array using a minimum and maximum value.</summary>
      <param name="vIn">Input Int32 array.</param>
      <param name="vOut">Output Int32 array.</param>
      <param name="count">Count of values.</param>
      <param name="minValue">Minimum value.</param>
      <param name="maxValue">Maximum value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.ClampC64f(System.IntPtr,System.IntPtr,System.Int64,System.Double,System.Double)">
      <summary>Limits each element in an input array using a minimum and maximum value.</summary>
      <param name="vIn">Input Double array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
      <param name="minValue">Minimum value.</param>
      <param name="maxValue">Maximum value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.CommonResidue(System.Int32,System.Int32)">
      <summary> Returns the common residue of a and b. </summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.CompareC32s(System.IntPtr,System.IntPtr,System.Int64,Lmi3d.Zen.Data.KComparison,System.Int32)">
      <summary>Compares each element in an input array with a specified value and stores the results in an output array.</summary>
      <param name="vIn">Input Int32array.</param>
      <param name="vOut">Output Int32 array (0 or 1, depending on comparison result).</param>
      <param name="count">Count of values.</param>
      <param name="comparison">Comparator used to determine a match.</param>
      <param name="value">Value for comparison.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.CompareC64f(System.IntPtr,System.IntPtr,System.Int64,Lmi3d.Zen.Data.KComparison,System.Double)">
      <summary>Compares each element in an input array with a specified value and stores the results in an output array.</summary>
      <param name="vIn">Input Double array.</param>
      <param name="vOut">Output Int32 array (0 or 1, depending on comparison result).</param>
      <param name="count">Count of values.</param>
      <param name="comparison">Comparator used to determine a match.</param>
      <param name="value">Value for comparison.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KMath.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Data.KMath.DegToRad(System.Double)">
      <summary> Converts degrees to radians. </summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Div32s(System.IntPtr,System.IntPtr,System.IntPtr,System.Int64)">
      <summary>Divides the values in two input arrays and stores the result in an output array.</summary>
      <param name="vIn1">First Int32 input array.</param>
      <param name="vIn2">Second Int32 input array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Div64f(System.IntPtr,System.IntPtr,System.IntPtr,System.Int64)">
      <summary>Divides the values in two input arrays and stores the result in an output array.</summary>
      <param name="vIn1">First Double input array.</param>
      <param name="vIn2">Second Double input array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.DivC32s(System.IntPtr,System.IntPtr,System.Int64,System.Int32)">
      <summary>Divides each element in an input array by a constant and stores the result in an output array.</summary>
      <param name="vIn">Input Int32 array.</param>
      <param name="vOut">Output Int32 array.</param>
      <param name="count">Count of values.</param>
      <param name="value">Constant value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.DivC64f(System.IntPtr,System.IntPtr,System.Int64,System.Double)">
      <summary>Divides each element in an input array by a constant and stores the result in an output array.</summary>
      <param name="vIn">Input Double array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
      <param name="value">Constant value.</param>
    </member>
    <member name="F:Lmi3d.Zen.Data.KMath.E">
      <summary>Mathematical constant e.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.FindMax32s(System.IntPtr,System.Int64)">
      <summary>Finds the index of the maximum value within a numerical array.</summary>
      <param name="v">Array of Int32 values.</param>
      <param name="count">Count of values.</param>
      <returns>Index of the maximum value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.FindMax64f(System.IntPtr,System.Int64)">
      <summary>Finds the index of the maximum value within a numerical array.</summary>
      <param name="v">Array of Double values.</param>
      <param name="count">Count of values.</param>
      <returns>Index of the maximum value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.FindMin32s(System.IntPtr,System.Int64)">
      <summary>Finds the index of the minimum value within a numerical array.</summary>
      <param name="v">Array of Int32 values.</param>
      <param name="count">Count of values.</param>
      <returns>Index of the minimum value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.FindMin64f(System.IntPtr,System.Int64)">
      <summary>Finds the index of the minimum value within a numerical array.</summary>
      <param name="v">Array of Double values.</param>
      <param name="count">Count of values.</param>
      <returns>Index of the minimum value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Gcd32s(System.Int32,System.Int32)">
      <summary>Returns the greatest common divisor of two integers.</summary>
      <param name="a">First integer.</param>
      <param name="b">Second integer.</param>
      <returns>Result.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KMath.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KMath.Lcm32s(System.Int32,System.Int32)">
      <summary>Returns the least common multiple of two integers.</summary>
      <param name="a">First integer.</param>
      <param name="b">Second integer.</param>
      <returns>Result.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Log2Ceil32s(System.Int32)">
      <summary>Calculates the base-2 logarithm of the input, rounded up to the nearest integer.</summary>
      <param name="a">Input value (must be positive).</param>
      <returns>Base-2 logarithm of input.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Max32s(System.IntPtr,System.Int64)">
      <summary>Reports the maximum value in a numerical array.</summary>
      <param name="v">Array of Int32 values.</param>
      <param name="count">Count of values.</param>
      <returns>Maximum value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Max64f(System.IntPtr,System.Int64)">
      <summary>Reports the maximum value in a numerical array.</summary>
      <param name="v">Array of Double values.</param>
      <param name="count">Count of values.</param>
      <returns>Maximum value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Min32s(System.IntPtr,System.Int64)">
      <summary>Reports the minimum value in a numerical array.</summary>
      <param name="v">Array of Int32 values.</param>
      <param name="count">Count of values.</param>
      <returns>Minimum value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Min64f(System.IntPtr,System.Int64)">
      <summary>Reports the minimum value in a numerical array.</summary>
      <param name="v">Array of Double values.</param>
      <param name="count">Count of values.</param>
      <returns>Minimum value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.MovingAvg32s(System.Int32[],System.Int32)">
      <summary>Calculates the moving average over an input array and stores the result in an output array.</summary>
      <param name="input">Input Int32 List.</param>
      <param name="window">Moving average window size</param>
      <returns>A List containing the averages.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.MovingAvg32s(System.IntPtr,System.IntPtr,System.Int64,System.Int64)">
      <summary>Calculates the moving average over an input array and stores the result in an output array.</summary>
      <param name="vIn">Input Int32 array.</param>
      <param name="vOut">Second Int32 input array.</param>
      <param name="count">Count of values.</param>
      <param name="window">Moving average window size</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.MovingAvg64f(System.Double[],System.Int32)">
      <summary>Calculates the moving average over an input array and stores the result in an output array.</summary>
      <param name="input">Input Double List.</param>
      <param name="window">Moving average window size</param>
      <returns>A List containing the averages.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.MovingAvg64f(System.IntPtr,System.IntPtr,System.Int64,System.Int64)">
      <summary>Calculates the moving average over an input array and stores the result in an output array.</summary>
      <param name="vIn">Input Double array.</param>
      <param name="vOut">Second Double input array.</param>
      <param name="count">Count of values.</param>
      <param name="window">Moving average window size</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Mul32s(System.IntPtr,System.IntPtr,System.IntPtr,System.Int64)">
      <summary>Multiplies the values in two input arrays and stores the result in an output array.</summary>
      <param name="vIn1">First Int32 input array.</param>
      <param name="vIn2">Second Int32 input array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Mul64f(System.IntPtr,System.IntPtr,System.IntPtr,System.Int64)">
      <summary>Multiplies the values in two input arrays and stores the result in an output array.</summary>
      <param name="vIn1">First Double input array.</param>
      <param name="vIn2">Second Double input array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.MulC32s(System.IntPtr,System.IntPtr,System.Int64,System.Int32)">
      <summary>Multiplies each element in an input array by a constant and stores the result in an output array.</summary>
      <param name="vIn">Input Int32 array.</param>
      <param name="vOut">Output Int32 array.</param>
      <param name="count">Count of values.</param>
      <param name="value">Constant value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.MulC64f(System.IntPtr,System.IntPtr,System.Int64,System.Double)">
      <summary>Multiplies each element in an input array by a constant and stores the result in an output array.</summary>
      <param name="vIn">Input Double array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
      <param name="value">Constant value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.NearlyEquals(System.Double,System.Double)">
      <summary> Reports whether two double-precision values are approximately equal. </summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.NearlyEquals(System.Single,System.Single)">
      <summary> Reports whether two single-precision values are approximately equal. </summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KMath.Pi">
      <summary>Mathematical constant pi.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.RadToDeg(System.Double)">
      <summary> Converts radians to degrees. </summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.ReplaceC32s(System.IntPtr,System.IntPtr,System.Int64,Lmi3d.Zen.Data.KComparison,System.Int32,System.Int32)">
      <summary>Compares each element in an input array with a specified value, and replaces all matching values with another given value.</summary>
      <param name="vIn">Input Int32 array.</param>
      <param name="vOut">Output Int32 array.</param>
      <param name="count">Count of values.</param>
      <param name="comparison">Comparator used to determine a match.</param>
      <param name="value">Value for comparison.</param>
      <param name="replacement"> Value for replacement.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.ReplaceC64f(System.IntPtr,System.IntPtr,System.Int64,Lmi3d.Zen.Data.KComparison,System.Double,System.Double)">
      <summary>Compares each element in an input array with a specified value, and replaces all matching values with another given value.</summary>
      <param name="vIn">Input Double array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
      <param name="comparison">Comparator used to determine a match.</param>
      <param name="value">Value for comparison.</param>
      <param name="replacement">Value for replacement.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Round64f(System.Double)">
      <summary>Rounds the input up to the nearest integer.</summary>
      <param name="a">Input value.</param>
      <returns>Rounded value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Set32s(System.IntPtr,System.Int64,System.Int32)">
      <summary>Sets all values in a numerical array to the given value.</summary>
      <param name="v">Array of Int32 values.</param>
      <param name="count">Count of values.</param>
      <param name="value">Value to set.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Set64f(System.IntPtr,System.Int64,System.Double)">
      <summary>Sets all values in a numerical array to the given value.</summary>
      <param name="v">Array of Double values.</param>
      <param name="count">Count of values.</param>
      <param name="value">Value to set.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Span32s(System.IntPtr,System.Int64,System.Int32,System.Int32)">
      <summary>Sets values in a numerical array to step between the specified start and end values.</summary>
      <param name="v">Array of Int32 values.</param>
      <param name="count">Count of values.</param>
      <param name="startValue">First value.</param>
      <param name="endValue">Last value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Span64f(System.IntPtr,System.Int64,System.Double,System.Double)">
      <summary>Sets values in a numerical array to step between the specified start and end values.</summary>
      <param name="v">Array of Double values.</param>
      <param name="count">Count of values.</param>
      <param name="startValue">First value.</param>
      <param name="endValue">Last value.</param>
    </member>
    <member name="F:Lmi3d.Zen.Data.KMath.Sqrt2">
      <summary>Square root of two.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KMath.Sqrt3">
      <summary>Square root of three.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Stdev32s(System.IntPtr,System.Int64)">
      <param name="v">Array of Int32 values.</param>
      <param name="count">Count of values.</param>
      <returns>Standard deviation.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Stdev64f(System.IntPtr,System.Int64)">
      <param name="v">Array of Double values.</param>
      <param name="count">Count of values.</param>
      <returns>Standard deviation.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Step32s(System.IntPtr,System.Int64,System.Int32,System.Int32)">
      <summary>Sets values in a numerical array to increment from the specified starting value.</summary>
      <param name="v">Array of Int32 values.</param>
      <param name="count">Count of values.</param>
      <param name="startValue">First value.</param>
      <param name="increment">Increment amount.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Step64f(System.IntPtr,System.Int64,System.Double,System.Double)">
      <summary>Sets values in a numerical array to increment from the specified starting value.</summary>
      <param name="v">Array of Double values.</param>
      <param name="count">Count of values.</param>
      <param name="startValue">First value.</param>
      <param name="increment">Increment amount.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Sub32s(System.IntPtr,System.IntPtr,System.IntPtr,System.Int64)">
      <summary>Subtracts the values in two input arrays and stores the result in an output array.</summary>
      <param name="vIn1">First Int32 input array.</param>
      <param name="vIn2">Second Int32 input array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Sub64f(System.IntPtr,System.IntPtr,System.IntPtr,System.Int64)">
      <summary>Subtracts the values in two input arrays and stores the result in an output array.</summary>
      <param name="vIn1">First Double input array.</param>
      <param name="vIn2">Second Double input array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.SubC32s(System.IntPtr,System.IntPtr,System.Int64,System.Int32)">
      <summary>Subtracts a constant from each element in an input array and stores the result in an output array.</summary>
      <param name="vIn">Input Int32 array.</param>
      <param name="vOut">Output Int32 array.</param>
      <param name="count">Count of values.</param>
      <param name="value">Constant value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.SubC64f(System.IntPtr,System.IntPtr,System.Int64,System.Double)">
      <summary>Subtracts a constant from each element in an input array and stores the result in an output array.</summary>
      <param name="vIn">Input Double array.</param>
      <param name="vOut">Output Double array.</param>
      <param name="count">Count of values.</param>
      <param name="value">Constant value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Sum32s(System.IntPtr,System.Int64)">
      <summary>Calculates the sum of a numerical array.</summary>
      <param name="v">Array of Int32 values.</param>
      <param name="count">Count of values.</param>
      <returns>Sum.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.Sum64f(System.IntPtr,System.Int64)">
      <summary>Calculates the sum of a numerical array.</summary>
      <param name="v">Array of Double values.</param>
      <param name="count">Count of values.</param>
      <returns>Sum.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.TryFindFirst32s(System.IntPtr,System.Int64,Lmi3d.Zen.Data.KComparison,System.Int32,System.Int64@)">
      <summary>Compares each value in a numerical array with a specified value and determines the index of the first match.</summary>
      <param name="v">Array of Int32 values.</param>
      <param name="count">Count of values.</param>
      <param name="comparison">Comparator that will be used to determine a match.</param>
      <param name="value">Value for comparison.</param>
      <param name="index">Receives the index of the first match (or count, if no match is found).</param>
      <returns>true if a match was found.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.TryFindFirst64f(System.IntPtr,System.Int64,Lmi3d.Zen.Data.KComparison,System.Double,System.Int64@)">
      <summary>Compares each value in a numerical array with a specified value and determines the index of the first match.</summary>
      <param name="v">Array of Double values.</param>
      <param name="count">Count of values.</param>
      <param name="comparison">Comparator used to determine a match.</param>
      <param name="value">Value for comparison.</param>
      <param name="index">Receives the index of the first match (or count, if no match is found).</param>
      <returns>true if a match was found.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.TryFindLast32s(System.IntPtr,System.Int64,Lmi3d.Zen.Data.KComparison,System.Int32,System.Int64@)">
      <summary>Compares each value in a numerical array with a specified value and determines the index of the last match.</summary>
      <param name="v">Array of Int32 values.</param>
      <param name="count">Count of values.</param>
      <param name="comparison">Comparator used to determine a match.</param>
      <param name="value">Value for comparison.</param>
      <param name="index">Receives the index of the last match (or count, if no match is found).</param>
      <returns>true if a match was found.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KMath.TryFindLast64f(System.IntPtr,System.Int64,Lmi3d.Zen.Data.KComparison,System.Double,System.Int64@)">
      <summary>Compares each value in a numerical array with a specified value and determines the index of the last match.</summary>
      <param name="v">Array of Double values.</param>
      <param name="count">Count of values.</param>
      <param name="comparison">Comparator that will be used to determine a match.</param>
      <param name="value">Value for comparison.</param>
      <param name="index">Receives the index of the last match (or count, if no match is found).</param>
      <returns>true if a match was found.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Data.KPixelFormat">
      <summary>Pixel format descriptor.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPixelFormat.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Data.KPixelFormat</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPixelFormat.Equals(Lmi3d.Zen.Data.KPixelFormat)"></member>
    <member name="M:Lmi3d.Zen.Data.KPixelFormat.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Data.KPixelFormat.Equals(System.Object)"></member>
    <member name="F:Lmi3d.Zen.Data.KPixelFormat.Format8bpcBgrx">
      <summary>8-bits-per-channel color with 4 channels (blue/green/red/unused) (KRgb).</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPixelFormat.Format8bppCfa">
      <summary>8-bit with color filter array (K8u).</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPixelFormat.Format8bppGreyscale">
      <summary>8-bit greyscale (K8u).</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPixelFormat.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Data.KPixelFormat.KTypeId"></member>
    <member name="F:Lmi3d.Zen.Data.KPixelFormat.Null">
      <summary>Unknown pixel format.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPixelFormat.op_Equality(Lmi3d.Zen.Data.KPixelFormat,Lmi3d.Zen.Data.KPixelFormat)"></member>
    <member name="M:Lmi3d.Zen.Data.KPixelFormat.op_Equality(Lmi3d.Zen.Data.KPixelFormat,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Data.KPixelFormat.op_Implicit(Lmi3d.Zen.Data.KPixelFormat)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.Data.KPixelFormat.op_Implicit(System.Int32)~Lmi3d.Zen.Data.KPixelFormat"></member>
    <member name="M:Lmi3d.Zen.Data.KPixelFormat.op_Inequality(Lmi3d.Zen.Data.KPixelFormat,Lmi3d.Zen.Data.KPixelFormat)"></member>
    <member name="M:Lmi3d.Zen.Data.KPixelFormat.op_Inequality(Lmi3d.Zen.Data.KPixelFormat,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Data.KPixelFormat.ToString"></member>
    <member name="P:Lmi3d.Zen.Data.KPixelFormat.Value"></member>
    <member name="T:Lmi3d.Zen.Data.KPoint16s">
      <summary>2D point structure with 16-bit signed integer fields.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint16s.#ctor(System.Int16,System.Int16)">
      <summary>Initializes a new KPoint16s instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint16s.Equals(Lmi3d.Zen.Data.KPoint16s)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint16s.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint16s.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Data.KPoint16s.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint16s.op_Equality(Lmi3d.Zen.Data.KPoint16s,Lmi3d.Zen.Data.KPoint16s)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint16s.op_Inequality(Lmi3d.Zen.Data.KPoint16s,Lmi3d.Zen.Data.KPoint16s)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint16s.ToString"></member>
    <member name="F:Lmi3d.Zen.Data.KPoint16s.X">
      <summary>X-coordinate value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPoint16s.Y">
      <summary>Y-coordinate value.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KPoint32f">
      <summary>2D point structure with 32-bit floating-point fields.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint32f.#ctor(System.Single,System.Single)">
      <summary>Initializes a new KPoint32f instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint32f.Equals(Lmi3d.Zen.Data.KPoint32f)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint32f.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint32f.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Data.KPoint32f.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint32f.op_Equality(Lmi3d.Zen.Data.KPoint32f,Lmi3d.Zen.Data.KPoint32f)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint32f.op_Inequality(Lmi3d.Zen.Data.KPoint32f,Lmi3d.Zen.Data.KPoint32f)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint32f.ToString"></member>
    <member name="F:Lmi3d.Zen.Data.KPoint32f.X">
      <summary>X-coordinate value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPoint32f.Y">
      <summary>Y-coordinate value.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KPoint32s">
      <summary>2D point structure with 32-bit signed integer fields.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint32s.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new KPoint32s instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint32s.Equals(Lmi3d.Zen.Data.KPoint32s)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint32s.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint32s.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Data.KPoint32s.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint32s.op_Equality(Lmi3d.Zen.Data.KPoint32s,Lmi3d.Zen.Data.KPoint32s)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint32s.op_Inequality(Lmi3d.Zen.Data.KPoint32s,Lmi3d.Zen.Data.KPoint32s)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint32s.ToString"></member>
    <member name="F:Lmi3d.Zen.Data.KPoint32s.X">
      <summary>X-coordinate value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPoint32s.Y">
      <summary>Y-coordinate value.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KPoint3d16s">
      <summary>3D point structure with 16-bit signed integer fields.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d16s.#ctor(System.Int16,System.Int16,System.Int16)">
      <summary>Initializes a new KPoint3d16s instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d16s.Equals(Lmi3d.Zen.Data.KPoint3d16s)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d16s.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d16s.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Data.KPoint3d16s.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d16s.op_Equality(Lmi3d.Zen.Data.KPoint3d16s,Lmi3d.Zen.Data.KPoint3d16s)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d16s.op_Inequality(Lmi3d.Zen.Data.KPoint3d16s,Lmi3d.Zen.Data.KPoint3d16s)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d16s.ToString"></member>
    <member name="F:Lmi3d.Zen.Data.KPoint3d16s.X">
      <summary>X-coordinate value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPoint3d16s.Y">
      <summary>Y-coordinate value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPoint3d16s.Z">
      <summary>Z-coordinate value.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KPoint3d32f">
      <summary>3D point structure with 32-bit floating-point fields.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32f.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new KPoint3d32f instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32f.Equals(Lmi3d.Zen.Data.KPoint3d32f)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32f.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32f.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Data.KPoint3d32f.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32f.op_Equality(Lmi3d.Zen.Data.KPoint3d32f,Lmi3d.Zen.Data.KPoint3d32f)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32f.op_Inequality(Lmi3d.Zen.Data.KPoint3d32f,Lmi3d.Zen.Data.KPoint3d32f)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32f.ToString"></member>
    <member name="F:Lmi3d.Zen.Data.KPoint3d32f.X">
      <summary>X-coordinate value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPoint3d32f.Y">
      <summary>Y-coordinate value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPoint3d32f.Z">
      <summary>Z-coordinate value.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KPoint3d32s">
      <summary>3D point structure with 32-bit signed integer fields.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32s.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new KPoint3d32s instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32s.Equals(Lmi3d.Zen.Data.KPoint3d32s)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32s.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32s.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Data.KPoint3d32s.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32s.op_Equality(Lmi3d.Zen.Data.KPoint3d32s,Lmi3d.Zen.Data.KPoint3d32s)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32s.op_Inequality(Lmi3d.Zen.Data.KPoint3d32s,Lmi3d.Zen.Data.KPoint3d32s)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d32s.ToString"></member>
    <member name="F:Lmi3d.Zen.Data.KPoint3d32s.X">
      <summary>X-coordinate value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPoint3d32s.Y">
      <summary>Y-coordinate value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPoint3d32s.Z">
      <summary>Z-coordinate value.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KPoint3d64f">
      <summary>3D point structure with 64-bit floating-point fields.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d64f.#ctor(System.Double,System.Double,System.Double)">
      <summary>Initializes a new KPoint3d64f instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d64f.Equals(Lmi3d.Zen.Data.KPoint3d64f)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d64f.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d64f.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Data.KPoint3d64f.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d64f.op_Equality(Lmi3d.Zen.Data.KPoint3d64f,Lmi3d.Zen.Data.KPoint3d64f)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d64f.op_Inequality(Lmi3d.Zen.Data.KPoint3d64f,Lmi3d.Zen.Data.KPoint3d64f)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint3d64f.ToString"></member>
    <member name="F:Lmi3d.Zen.Data.KPoint3d64f.X">
      <summary>X-coordinate value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPoint3d64f.Y">
      <summary>Y-coordinate value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPoint3d64f.Z">
      <summary>Z-coordinate value.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KPoint64f">
      <summary>2D point structure with 64-bit floating-point fields.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint64f.#ctor(System.Double,System.Double)">
      <summary>Initializes a new KPoint64f instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KPoint64f.Equals(Lmi3d.Zen.Data.KPoint64f)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint64f.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint64f.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Data.KPoint64f.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint64f.op_Equality(Lmi3d.Zen.Data.KPoint64f,Lmi3d.Zen.Data.KPoint64f)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint64f.op_Inequality(Lmi3d.Zen.Data.KPoint64f,Lmi3d.Zen.Data.KPoint64f)"></member>
    <member name="M:Lmi3d.Zen.Data.KPoint64f.ToString"></member>
    <member name="F:Lmi3d.Zen.Data.KPoint64f.X">
      <summary>X-coordinate value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KPoint64f.Y">
      <summary>Y-coordinate value.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KQueue">
      <summary>Represents a FIFO queue implemented with a dynamic array.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.#ctor">
      <summary>Initializes a new instance of the KQueue class without specifying an item type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.#ctor(Lmi3d.Zen.KType)">
      <summary>Initializes a new instance of the KQueue class with the specified item type.</summary>
      <param name="itemType">Type of queue element.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.#ctor(Lmi3d.Zen.KType,System.Int64)">
      <summary>Initializes a new instance of the KQueue class with the specified item type and initial cacpacity.</summary>
      <param name="itemType">Type of queue element.</param>
      <param name="initialCapacity">Capacity initially reserved for queue items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.#ctor(Lmi3d.Zen.KType,System.Int64,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KQueue class with the specified item type and initial cacpacity.</summary>
      <param name="allocator"> Memory allocator.</param>
      <param name="itemType">Type of queue element.</param>
      <param name="initialCapacity">Capacity initially reserved for queue items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.#ctor(Lmi3d.Zen.KType,System.Int64,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KQueue class with the specified item type and initial cacpacity.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="allocator"> Memory allocator.</param>
      <param name="itemType">Type of queue element.</param>
      <param name="initialCapacity">Capacity initially reserved for queue items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KQueue class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KQueue class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Add``1(``0)">
      <summary>Adds the specified item to the end of the queue.</summary>
      <param name="item">Item to be copied into the queue.</param>
      <typeparam name="T">Type of item to be added to the queue.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Add``1(``0,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Adds the specified item to the end of the queue.</summary>
      <param name="item">Item to be copied into the queue.</param>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="T">Type of item to be added to the queue.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Allocate(Lmi3d.Zen.KType,System.Int64)">
      <summary>Reallocates the queue item buffer.</summary>
      <param name="itemType">Type of queue element.</param>
      <param name="initialCapacity">Capacity initially reserved for queue items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Allocate(Lmi3d.Zen.KType,System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Reallocates the queue item buffer.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="itemType">Type of queue element.</param>
      <param name="initialCapacity">Capacity initially reserved for queue items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Assign(Lmi3d.Zen.Data.KQueue)">
      <summary>Performs a shallow copy of the source queue.</summary>
      <param name="source">Source queue to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Assign(Lmi3d.Zen.Data.KQueue,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Performs a shallow copy of the source queue.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="source">Source queue to be copied.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KQueue.Capacity">
      <summary>Gets the number of elements for which space has been allocated.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Clear">
      <summary>Sets the count of queue items to zero.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Clear(System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets the count of queue items to zero.</summary>
      <param name="refStyle">RefStyle for this object.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KQueue.Count">
      <summary>Gets the current count of items in the queue.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KQueue.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Get``1(System.Int64)">
      <summary>Gets the item at the specified index.</summary>
      <param name="index">Item index.</param>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>Queue item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Get``1(System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Gets the item at the specified index.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="index">Item index.</param>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>Queue item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.GetDataAt(System.Int64)">
      <summary>Gets a pointer to the specified item in the queue buffer.</summary>
      <param name="index">Item index.</param>
      <returns>Pointer to queue element.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KQueue.ItemSize">
      <summary>Gets the queue element size.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KQueue.ItemType">
      <summary>Gets the queue element type.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KQueue.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Remove``1">
      <summary>Removes the item at the head of the queue.</summary>
      <typeparam name="T">Type of item to be removed from the queue.</typeparam>
      <returns>The removed item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Remove``1(System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Removes the item at the head of the queue.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="T">Type of item to be removed from the queue.</typeparam>
      <returns>The removed item.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Reserve(System.Int64)">
      <summary>Ensures that capacity is reserved for at least the specified number of queue items.</summary>
      <param name="capacity">Queue capacity, in items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Set``1(System.Int64,``0)">
      <summary>Sets the value of an item.</summary>
      <param name="index">Item index.</param>
      <param name="item">Item to be copied into the queue.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Data.KQueue.Set``1(System.Int64,``0,System.Nullable{Lmi3d.Zen.KRefStyle})">
      <summary>Sets the value of an item.</summary>
      <param name="index">Item index.</param>
      <param name="item">Item to be copied into the queue.</param>
      <param name="refStyle">RefStyle for this object.</param>
      <typeparam name="T">Type of item to be modified.</typeparam>
    </member>
    <member name="T:Lmi3d.Zen.Data.KRect16s">
      <summary>Rectangle structure with 16-bit signed integer fields. </summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRect16s.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
      <summary>Initializes a new KRect16s instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRect16s.Equals(Lmi3d.Zen.Data.KRect16s)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect16s.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect16s.GetHashCode"></member>
    <member name="F:Lmi3d.Zen.Data.KRect16s.Height">
      <summary>Height of the rectangle.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KRect16s.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KRect16s.op_Equality(Lmi3d.Zen.Data.KRect16s,Lmi3d.Zen.Data.KRect16s)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect16s.op_Inequality(Lmi3d.Zen.Data.KRect16s,Lmi3d.Zen.Data.KRect16s)"></member>
    <member name="F:Lmi3d.Zen.Data.KRect16s.Width">
      <summary>Width of the rectangle.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRect16s.X">
      <summary>X-coordinate of the origin.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRect16s.Y">
      <summary>Y-coordinate of the origin.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KRect32f">
      <summary>Rectangle structure with 32-bit floating-point fields. </summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRect32f.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new KRect32f instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRect32f.Equals(Lmi3d.Zen.Data.KRect32f)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect32f.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect32f.GetHashCode"></member>
    <member name="F:Lmi3d.Zen.Data.KRect32f.Height">
      <summary>Height of the rectangle.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KRect32f.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KRect32f.op_Equality(Lmi3d.Zen.Data.KRect32f,Lmi3d.Zen.Data.KRect32f)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect32f.op_Inequality(Lmi3d.Zen.Data.KRect32f,Lmi3d.Zen.Data.KRect32f)"></member>
    <member name="F:Lmi3d.Zen.Data.KRect32f.Width">
      <summary>Width of the rectangle.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRect32f.X">
      <summary>X-coordinate of the origin.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRect32f.Y">
      <summary>Y-coordinate of the origin.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KRect32s">
      <summary>Rectangle structure with 32-bit signed integer fields. </summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRect32s.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new KRect32s instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRect32s.Equals(Lmi3d.Zen.Data.KRect32s)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect32s.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect32s.GetHashCode"></member>
    <member name="F:Lmi3d.Zen.Data.KRect32s.Height">
      <summary>Height of the rectangle.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KRect32s.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KRect32s.op_Equality(Lmi3d.Zen.Data.KRect32s,Lmi3d.Zen.Data.KRect32s)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect32s.op_Inequality(Lmi3d.Zen.Data.KRect32s,Lmi3d.Zen.Data.KRect32s)"></member>
    <member name="F:Lmi3d.Zen.Data.KRect32s.Width">
      <summary>Width of the rectangle.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRect32s.X">
      <summary>X-coordinate of the origin.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRect32s.Y">
      <summary>Y-coordinate of the origin.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KRect3d64f">
      <summary>Rectangular cuboid structure with 64-bit floating-point fields.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRect3d64f.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new KRect3d64f instance.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRect3d64f.Depth">
      <summary>Depth of the rectangle.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRect3d64f.Equals(Lmi3d.Zen.Data.KRect3d64f)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect3d64f.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect3d64f.GetHashCode"></member>
    <member name="F:Lmi3d.Zen.Data.KRect3d64f.Height">
      <summary>Height of the rectangle.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KRect3d64f.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KRect3d64f.op_Equality(Lmi3d.Zen.Data.KRect3d64f,Lmi3d.Zen.Data.KRect3d64f)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect3d64f.op_Inequality(Lmi3d.Zen.Data.KRect3d64f,Lmi3d.Zen.Data.KRect3d64f)"></member>
    <member name="F:Lmi3d.Zen.Data.KRect3d64f.Width">
      <summary>Width of the rectangle.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRect3d64f.X">
      <summary>X-coordinate of the origin.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRect3d64f.Y">
      <summary>Y-coordinate of the origin.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRect3d64f.Z">
      <summary>Z-coordinate of the origin.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KRect64f">
      <summary>Rectangle structure with 64-bit floating-point fields. </summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRect64f.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new KRect64f instance.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRect64f.Equals(Lmi3d.Zen.Data.KRect64f)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect64f.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect64f.GetHashCode"></member>
    <member name="F:Lmi3d.Zen.Data.KRect64f.Height">
      <summary>Height of the rectangle.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KRect64f.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KRect64f.op_Equality(Lmi3d.Zen.Data.KRect64f,Lmi3d.Zen.Data.KRect64f)"></member>
    <member name="M:Lmi3d.Zen.Data.KRect64f.op_Inequality(Lmi3d.Zen.Data.KRect64f,Lmi3d.Zen.Data.KRect64f)"></member>
    <member name="F:Lmi3d.Zen.Data.KRect64f.Width">
      <summary>Width of the rectangle.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRect64f.X">
      <summary>X-coordinate of the origin.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRect64f.Y">
      <summary>Y-coordinate of the origin.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KRgb">
      <summary>32-bit color pixel structure (B/G/R/X).</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRgb.#ctor(System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new KRgb instance.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRgb.B">
      <summary>Blue component value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRgb.Equals(Lmi3d.Zen.Data.KRgb)"></member>
    <member name="M:Lmi3d.Zen.Data.KRgb.Equals(System.Object)"></member>
    <member name="F:Lmi3d.Zen.Data.KRgb.G">
      <summary>Green component value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRgb.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Data.KRgb.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KRgb.op_Equality(Lmi3d.Zen.Data.KRgb,Lmi3d.Zen.Data.KRgb)"></member>
    <member name="M:Lmi3d.Zen.Data.KRgb.op_Inequality(Lmi3d.Zen.Data.KRgb,Lmi3d.Zen.Data.KRgb)"></member>
    <member name="F:Lmi3d.Zen.Data.KRgb.R">
      <summary>Red component value.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRgb.X">
      <summary>Alpha component value.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KRotatedRect32f">
      <summary>Rotated rectangle structure with 32-bit floating-point fields.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRotatedRect32f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new KRotatedRect32f instance.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRotatedRect32f.Angle">
      <summary>Rotation angle of the rectangle.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRotatedRect32f.Equals(Lmi3d.Zen.Data.KRotatedRect32f)"></member>
    <member name="M:Lmi3d.Zen.Data.KRotatedRect32f.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KRotatedRect32f.GetHashCode"></member>
    <member name="F:Lmi3d.Zen.Data.KRotatedRect32f.Height">
      <summary>Height of the rectangle.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KRotatedRect32f.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KRotatedRect32f.op_Equality(Lmi3d.Zen.Data.KRotatedRect32f,Lmi3d.Zen.Data.KRotatedRect32f)"></member>
    <member name="M:Lmi3d.Zen.Data.KRotatedRect32f.op_Inequality(Lmi3d.Zen.Data.KRotatedRect32f,Lmi3d.Zen.Data.KRotatedRect32f)"></member>
    <member name="F:Lmi3d.Zen.Data.KRotatedRect32f.Width">
      <summary>Width of the rectangle.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRotatedRect32f.Xc">
      <summary>X-coordinate of the center.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRotatedRect32f.Yc">
      <summary>Y-coordinate of the center.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KRotatedRect32s">
      <summary>Rotated rectangle structure with 32-bit signed integer fields.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRotatedRect32s.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new KRotatedRect32s instance.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRotatedRect32s.Angle">
      <summary>Rotation angle of the rectangle.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KRotatedRect32s.Equals(Lmi3d.Zen.Data.KRotatedRect32s)"></member>
    <member name="M:Lmi3d.Zen.Data.KRotatedRect32s.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Data.KRotatedRect32s.GetHashCode"></member>
    <member name="F:Lmi3d.Zen.Data.KRotatedRect32s.Height">
      <summary>Height of the rectangle.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KRotatedRect32s.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KRotatedRect32s.op_Equality(Lmi3d.Zen.Data.KRotatedRect32s,Lmi3d.Zen.Data.KRotatedRect32s)"></member>
    <member name="M:Lmi3d.Zen.Data.KRotatedRect32s.op_Inequality(Lmi3d.Zen.Data.KRotatedRect32s,Lmi3d.Zen.Data.KRotatedRect32s)"></member>
    <member name="F:Lmi3d.Zen.Data.KRotatedRect32s.Width">
      <summary>Width of the rectangle.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRotatedRect32s.Xc">
      <summary>X-coordinate of the center.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Data.KRotatedRect32s.Yc">
      <summary>Y-coordinate of the center.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KString">
      <summary>Represents a character string.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.#ctor">
      <summary>Initializes a new, empty instance of the KString class.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KString class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KString class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.#ctor(System.String)">
      <summary>Initializes a new instance of the KString class with the specified string content.</summary>
      <param name="content">Initial string content (or null).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.#ctor(System.String,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KString class with the specified string content.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="content">Initial string content (or null).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.#ctor(System.String,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KString class with the specified string content.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="allocator">Memory allocator.</param>
      <param name="content">Initial string content (or null).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.Add(System.String)">
      <summary>Appends content to the string.</summary>
      <param name="content">String content to append.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.Assign(Lmi3d.Zen.Data.KString)">
      <summary>Copies the source string content.</summary>
      <param name="source">Source string to be copied.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KString.Capacity">
      <summary>Get the number of character units that can be stored without reallocation.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KString.CharPtr">
      <summary>Gets a pointer (char*) to the internal character buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KString.Chars">
      <summary>Gets a pointer (IntPtr) to the internal character buffer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.Clear">
      <summary>Sets the length of the string to zero.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KString.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Data.KString.Equals(System.Object)"></member>
    <member name="P:Lmi3d.Zen.Data.KString.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Data.KString.Length">
      <summary>Gets the number of character units in the string buffer (excluding null-terminator).</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.op_Explicit(Lmi3d.Zen.Data.KString)~System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*"></member>
    <member name="M:Lmi3d.Zen.Data.KString.Reserve(System.Int64)">
      <summary>Ensures that capacity is reserved for at least the specified number of character units (excluding null terminator).</summary>
      <param name="minimumCapacity">Minimum string capacity, in character units.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.Set(System.String)">
      <summary>Sets the content of the string.</summary>
      <param name="content">String content to copy.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.SetLength(System.Int64)">
      <summary>Explicitly sets the length of the string.</summary>
      <param name="length">New string length, in character units (excluding null-terminator).</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.Split(System.String,Lmi3d.Zen.KAlloc)">
      <summary>Splits this string into substrings using the supplied delimiters.</summary>
      <param name="delimiters">Null-terminated string containing delimiter characters.</param>
      <param name="allocator">Memory allocator (or null for default).</param>
      <returns>List of substrings.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KString.ToString"></member>
    <member name="M:Lmi3d.Zen.Data.KString.Trim">
      <summary>Removes leading and trailing whitespace.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Data.KXml">
      <summary>Represents an XML document.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.#ctor">
      <summary>Initializes a new instance of the KXml class.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.#ctor(Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KXml class.</summary>
      <param name="allocator">Memory allocator.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.#ctor(Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KXml class.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="allocator">Memory allocator.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KXml class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KXml class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.AddElement(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Adds a new child element to the specified parent element.</summary>
      <param name="parent">Parent element (null to add root element).</param>
      <param name="name">Name of the new element.</param>
      <returns>New element</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.Assign(Lmi3d.Zen.Data.KXml)">
      <summary>Copies the source document.</summary>
      <param name="source">Source document to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.ChildExists(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Reports whether a child element exists at the specified relative path.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>true if child exists; otherwise false.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.Clear">
      <summary>Removes all elements from the XML document.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.ClearElement(Lmi3d.Zen.Data.KXmlElement)">
      <summary>Removes all children, attributes, and value from the XML element.</summary>
      <param name="element">Element to be cleared.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.Compact">
      <summary>Compacts the XML object for minimum memory usage.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.CopyElement(Lmi3d.Zen.Data.KXmlElement,Lmi3d.Zen.Data.KXmlElement,Lmi3d.Zen.Data.KXml,Lmi3d.Zen.Data.KXmlElement)">
      <summary>Copies an element from another XML document to this XML document, inserting a new element at the specified location.</summary>
      <param name="parent">Destination parent element.</param>
      <param name="before">Destination sibling element (if null, appends to end of child list).</param>
      <param name="srcXml">Source XML document.</param>
      <param name="srcElement">Source XML element.</param>
      <returns>New element.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KXml.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Data.KXml.DeleteChildren(Lmi3d.Zen.Data.KXmlElement)">
      <summary>Deletes all children of the specified parent element.</summary>
      <param name="parent">Parent element.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.DeleteElement(Lmi3d.Zen.Data.KXmlElement)">
      <summary>Deletes an XML element.</summary>
      <param name="element">Element to be deleted.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.EnsureChildExists(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Ensures that a child element exists at the specified path.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Child element.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.FindChild(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Finds the child element at the given relative path.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Child element.</returns>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if not found.</exception>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.FindRoot">
      <summary>Gets the root element, if it exists.</summary>
      <returns>Root element, if it exists.</returns>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if not found.</exception>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.GetChild16s(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Gets child element content as an Int16 value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.GetChild16u(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Gets child element content as a UInt16 value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.GetChild32f(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Gets child element content as a Single value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.GetChild32s(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Gets child element content as an Int32 value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.GetChild32u(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Gets child element content as a UInt32 value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.GetChild64f(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Gets child element content as a Double value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.GetChild64s(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Gets child element content as an Int64 value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.GetChild64u(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Gets child element content as a UInt64 value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.GetChildBool(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Gets child element content as a Bool value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.GetChildString(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Gets child element content as a string.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Child content.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.InsertElement(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Inserts a new element before the specified sibling element.</summary>
      <param name="before">Sibling element.</param>
      <param name="name">Name of the new element.</param>
      <returns>New element.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KXml.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Data.KXml.Load(Lmi3d.Zen.Io.KStream,Lmi3d.Zen.KAlloc)">
      <summary>Loads an XML document from a KStream object.</summary>
      <param name="stream">Stream for reading.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.Load(System.String)">
      <summary>Loads an XML document from file.</summary>
      <param name="fileName">Path to file.</param>
      <returns>Loaded document object.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.Load(System.String,Lmi3d.Zen.KAlloc)">
      <summary>Loads an XML document from file.</summary>
      <param name="fileName">Path to file.</param>
      <param name="allocator">Memory allocator.</param>
      <returns>Loaded document object.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.OverwriteElement(Lmi3d.Zen.Data.KXmlElement,Lmi3d.Zen.Data.KXml,Lmi3d.Zen.Data.KXmlElement)">
      <summary>Copies an element from another XML document to this XML document, overwriting an existing element.</summary>
      <param name="destElement">XML destination element.</param>
      <param name="srcXml">Source XML document.</param>
      <param name="srcElement">Source XML element.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.Parse(System.String)">
      <summary>Creates an XML document from a string.</summary>
      <param name="content">XML-formatted string.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.Parse(System.String,Lmi3d.Zen.KAlloc)">
      <summary>Creates an XML document from a string.</summary>
      <param name="content">XML-formatted string.</param>
      <param name="allocator">Memory allocator.</param>
    </member>
    <member name="P:Lmi3d.Zen.Data.KXml.Root">
      <summary>Gets the root element of the XML document.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.Save(Lmi3d.Zen.Io.KStream)">
      <summary>Saves the XML document to a KStream.</summary>
      <param name="stream">Stream for writing.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.Save(System.String)">
      <summary>Saves the XML document to file.</summary>
      <param name="fileName">File path.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.SetChild16s(Lmi3d.Zen.Data.KXmlElement,System.String,System.Int16)">
      <summary>Sets child element content to an Int16 value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.SetChild16u(Lmi3d.Zen.Data.KXmlElement,System.String,System.UInt16)">
      <summary>Sets child element content to a UInt16 value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.SetChild32f(Lmi3d.Zen.Data.KXmlElement,System.String,System.Single)">
      <summary>Sets child element content to a Single value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.SetChild32s(Lmi3d.Zen.Data.KXmlElement,System.String,System.Int32)">
      <summary>Sets child element content to an Int32 value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.SetChild32u(Lmi3d.Zen.Data.KXmlElement,System.String,System.UInt32)">
      <summary>Sets child element content to a UInt32 value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.SetChild64f(Lmi3d.Zen.Data.KXmlElement,System.String,System.Double)">
      <summary>Sets child element content to a Double value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.SetChild64s(Lmi3d.Zen.Data.KXmlElement,System.String,System.Int64)">
      <summary>Sets child element content to an Int64 value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.SetChild64u(Lmi3d.Zen.Data.KXmlElement,System.String,System.UInt64)">
      <summary>Sets child element content to a UInt64 value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.SetChildBool(Lmi3d.Zen.Data.KXmlElement,System.String,System.Boolean)">
      <summary>Sets child element content to a Bool value.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.SetChildString(Lmi3d.Zen.Data.KXmlElement,System.String,System.String)">
      <summary>Sets child element content to a string.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Child content.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.ToString">
      <summary>Writes XML content to a string.</summary>
      <returns>XML-formatted string.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXml.TryFindChild(Lmi3d.Zen.Data.KXmlElement,System.String)">
      <summary>Attempts to find the child element at the given relative path.</summary>
      <param name="parent">Parent element.</param>
      <param name="path">Path relative to the parent element.</param>
      <returns>Child element, or null if not found.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Data.KXmlElement">
      <summary>Represents an XML element within an XML document.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KXmlElement.AttrCount">
      <summary>Gets the number of attributes.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.AttrExists(System.String)">
      <summary>Reports whether an attribute exists.</summary>
      <param name="name">Attribute name.</param>
      <returns>true if attribute exists; otherwise false.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KXmlElement.ChildCount">
      <summary>Gets the number of child elements.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.DeleteAttr(System.String)">
      <summary>Deletes an attribute.</summary>
      <param name="name">Attribute name.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.DeleteAttrs">
      <summary>Deletes all attributes.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Equals(System.Object)"></member>
    <member name="P:Lmi3d.Zen.Data.KXmlElement.FirstChild">
      <summary>Gets the first child element.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Get16s">
      <summary>Gets element content as an Int16 value.</summary>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Get16u">
      <summary>Gets element content as a UInt16 value.</summary>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Get32f">
      <summary>Gets element content as a Single value.</summary>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Get32s">
      <summary>Gets element content as an Int32 value.</summary>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Get32u">
      <summary>Gets element content as a UInt32 value.</summary>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Get64f">
      <summary>Gets element content as a Double value.</summary>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Get64s">
      <summary>Gets element content as an Int64 value.</summary>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Get64u">
      <summary>Gets element content as a UInt64 value.</summary>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetAttr16s(System.String)">
      <summary>Gets attribute content as an Int16 value.</summary>
      <param name="name">Attribute name.</param>
      <returns>Attribute value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetAttr16u(System.String)">
      <summary>Gets attribute content as a UInt16 value.</summary>
      <param name="name">Attribute name.</param>
      <returns>Attribute value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetAttr32f(System.String)">
      <summary>Gets attribute content as a Single value.</summary>
      <param name="name">Attribute name.</param>
      <returns>Attribute value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetAttr32s(System.String)">
      <summary>Gets attribute content as an Int32 value.</summary>
      <param name="name">Attribute name.</param>
      <returns>Attribute value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetAttr32u(System.String)">
      <summary>Gets attribute content as a UInt32 value.</summary>
      <param name="name">Attribute name.</param>
      <returns>Attribute value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetAttr64f(System.String)">
      <summary>Gets attribute content as a Double value.</summary>
      <param name="name">Attribute name.</param>
      <returns>Attribute value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetAttr64s(System.String)">
      <summary>Gets attribute content as an Int64 value.</summary>
      <param name="name">Attribute name.</param>
      <returns>Attribute value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetAttr64u(System.String)">
      <summary>Gets attribute content as a UInt64 value.</summary>
      <param name="name">Attribute name.</param>
      <returns>Attribute value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetAttrBool(System.String)">
      <summary>Gets attribute content as a Bool value.</summary>
      <param name="name">Attribute name.</param>
      <returns>Attribute value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetAttrNameAt(System.Int64)">
      <summary>Gets the attribute name at the specified index within the attribute list.</summary>
      <param name="index">Attribute index.</param>
      <returns>Attribute name.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetAttrString(System.String)">
      <summary>Gets attribute content as a string.</summary>
      <param name="name">Attribute name.</param>
      <returns>Attibute value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetBool">
      <summary>Gets element content as a Bool value.</summary>
      <returns>Element value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetChildAt(System.Int64)">
      <summary>Gets the child element at the specified index within the list of child elements. </summary>
      <param name="index">Child element index.</param>
      <returns>Child element.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.GetString">
      <summary>Gets element content as a text string.</summary>
      <returns>Element value.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Data.KXmlElement.LastChild">
      <summary>Gets the last child element.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KXmlElement.Name">
      <summary>Gets or sets the element name.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KXmlElement.NextSibling">
      <summary>Gets the next sibling element.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KXmlElement.Parent">
      <summary>Gets the parent element.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Data.KXmlElement.PreviousSibling">
      <summary>Gets the previous sibling element.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Set16s(System.Int16)">
      <summary>Sets element content to an Int32 value.</summary>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Set16u(System.UInt16)">
      <summary>Sets element content to a UInt16 value.</summary>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Set32f(System.Single)">
      <summary>Sets element content to a Single value.</summary>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Set32s(System.Int32)">
      <summary>Sets element content to an Int32 value.</summary>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Set32u(System.UInt32)">
      <summary>Sets element content to a UInt32 value.</summary>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Set64f(System.Double)">
      <summary>Sets element content to a Double value.</summary>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Set64s(System.Int64)">
      <summary>Sets element content to an Int32 value.</summary>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.Set64u(System.UInt64)">
      <summary>Sets element content to a UInt64 value.</summary>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.SetAttr16s(System.String,System.Int16)">
      <summary>Sets attribute content to an Int16 value.</summary>
      <param name="name">Attribute name.</param>
      <param name="value">Attribute value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.SetAttr16u(System.String,System.UInt16)">
      <summary>Sets attribute content to a UInt16 value.</summary>
      <param name="name">Attribute name.</param>
      <param name="value">Attribute value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.SetAttr32f(System.String,System.Single)">
      <summary>Sets attribute content to a Single value.</summary>
      <param name="name">Attribute name.</param>
      <param name="value">Attribute value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.SetAttr32s(System.String,System.Int32)">
      <summary>Sets attribute content to an Int32 value.</summary>
      <param name="name">Attribute name.</param>
      <param name="value">Attribute value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.SetAttr32u(System.String,System.UInt32)">
      <summary>Sets attribute content to a UInt32 value.</summary>
      <param name="name">Attribute name.</param>
      <param name="value">Attribute value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.SetAttr64f(System.String,System.Double)">
      <summary>Sets attribute content to a Double value.</summary>
      <param name="name">Attribute name.</param>
      <param name="value">Attribute value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.SetAttr64s(System.String,System.Int64)">
      <summary>Sets attribute content to an Int64 value.</summary>
      <param name="name">Attribute name.</param>
      <param name="value">Attribute value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.SetAttr64u(System.String,System.UInt64)">
      <summary>Sets attribute content to a UInt64 value.</summary>
      <param name="name">Attribute name.</param>
      <param name="value">Attribute value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.SetAttrBool(System.String,System.Boolean)">
      <summary>Sets attribute content to a Bool value.</summary>
      <param name="name">Attribute name.</param>
      <param name="value">Attribute value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.SetAttrString(System.String,System.String)">
      <summary>Sets attribute content to a string value.</summary>
      <param name="name">Attribute name.</param>
      <param name="value">Attribute value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.SetBool(System.Boolean)">
      <summary>Sets element content to a Bool value.</summary>
      <param name="value">Element value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Data.KXmlElement.SetString(System.String)">
      <summary>Sets element content to a string value.</summary>
      <param name="value">Element value.</param>
    </member>
    <member name="T:Lmi3d.Zen.Io.KDat5Serializer">
      <summary>Serializes/deserializes objects using kDat5 format.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat5Serializer.#ctor(Lmi3d.Zen.Io.KStream)">
      <summary>Initializes a new instance of the KDat5Serializer class.</summary>
      <param name="stream">Stream for reading or writing.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat5Serializer.#ctor(Lmi3d.Zen.Io.KStream,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KDat5Serializer class.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="stream">Stream for reading or writing.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat5Serializer.#ctor(Lmi3d.Zen.Io.KStream,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KDat5Serializer class.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="allocator">Memory allocator.</param>
      <param name="stream">Stream for reading or writing.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat5Serializer.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KDat5Serializer class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat5Serializer.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KDat5Serializer class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KDat5Serializer.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Io.KDat5Serializer.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KDat5Serializer.LoadObject``1(System.String)">
      <summary>Loads an object from file using kDat5 format.</summary>
      <param name="filePath">Path of the file to load.</param>
      <typeparam name="T">Deserialized object will be cast to this type.</typeparam>
      <returns>Loaded object.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat5Serializer.LoadObject``1(System.String,Lmi3d.Zen.KAlloc)">
      <summary>Loads an object from file using kDat5 format.</summary>
      <param name="allocator">Memory allocator for loaded object.</param>
      <param name="filePath">Path of the file to load.</param>
      <typeparam name="T">Deserialized object will be cast to this type.</typeparam>
      <returns>Loaded object.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat5Serializer.SaveObject(Lmi3d.Zen.KObject,System.String)">
      <summary>Saves an object to file using kDat5 format.</summary>
      <param name="object">Object to be serialized.</param>
      <param name="filePath">Path of the file to save.</param>
      <returns>Operation status.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Io.KDat6Serializer">
      <summary>Serializes/deserializes objects using kDat6 format.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat6Serializer.#ctor(Lmi3d.Zen.Io.KStream)">
      <summary>Initializes a new instance of the KDat6Serializer class.</summary>
      <param name="stream">Stream for reading or writing.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat6Serializer.#ctor(Lmi3d.Zen.Io.KStream,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KDat6Serializer class.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="stream">Stream for reading or writing.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat6Serializer.#ctor(Lmi3d.Zen.Io.KStream,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KDat6Serializer class.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="allocator">Memory allocator.</param>
      <param name="stream">Stream for reading or writing.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat6Serializer.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KDat6Serializer class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat6Serializer.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KDat6Serializer class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KDat6Serializer.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Io.KDat6Serializer.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KDat6Serializer.LoadObject``1(System.String)">
      <summary>Loads an object from file using kDat6 format.</summary>
      <param name="filePath">Path of the file to load.</param>
      <typeparam name="T">Deserialized object will be cast to this type.</typeparam>
      <returns>Loaded object.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat6Serializer.LoadObject``1(System.String,Lmi3d.Zen.KAlloc)">
      <summary>Loads an object from file using kDat6 format.</summary>
      <param name="allocator">Memory allocator for loaded object.</param>
      <param name="filePath">Path of the file to load.</param>
      <typeparam name="T">Deserialized object will be cast to this type.</typeparam>
      <returns>Loaded object.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDat6Serializer.SaveObject(Lmi3d.Zen.KObject,System.String)">
      <summary>Saves an object to file using kDat6 format.</summary>
      <param name="object">Object to be serialized.</param>
      <param name="filePath">Path of the file to save.</param>
      <returns>Operation status.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Io.KDirectory">
      <summary>Collection of directory-related utility methods.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KDirectory.AppConfig">
      <summary>Gets the shared directory from which applications should load configuration/resource files.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KDirectory.AppData">
      <summary>Gets the shared directory from which applications should load/save data files.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KDirectory.Application">
      <summary>Gets the directory in which the application executable file resides.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDirectory.Copy(System.String,System.String)">
      <summary>Copies the specified directory, including all of its contents.</summary>
      <param name="source">Full path of the source directory.</param>
      <param name="destination">Full path of the destination directory.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDirectory.Create(System.String)">
      <summary>Creates a directory at the specified location.</summary>
      <param name="directory">Full path of the directory.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KDirectory.Current">
      <summary>Gets the current working directory.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KDirectory.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Io.KDirectory.Delete(System.String)">
      <summary>Deletes the specified directory, including all of its contents.</summary>
      <param name="directory">Full path of the directory.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDirectory.Exists(System.String)">
      <summary>Reports whether the specified directory exists.</summary>
      <param name="directory">Full path of the directory.</param>
      <returns>true if the directory exists, kFALSE otherwise.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDirectory.GetAppConfig(System.String)">
      <summary>Gets the directory from which an application should load its configuration/resource files.</summary>
      <param name="appName">The name of the application.</param>
      <returns>Application configuration directory.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDirectory.GetAppData(System.String)">
      <summary>Gets the directory from which an application should load/save data files.</summary>
      <param name="appName">The name of the application.</param>
      <returns>Application data directory.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KDirectory.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KDirectory.ListDirectories(System.String)">
      <summary>Creates a list of the sub-directories in the specified directory.</summary>
      <param name="directory">Full path of the directory.</param>
      <returns>List of directory names.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDirectory.ListEntries(System.String)">
      <summary>Creates a list of the file system entries in the specified directory.</summary>
      <param name="directory">Full path of the directory.</param>
      <returns>List of file system entries (directories and files).</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDirectory.ListFiles(System.String)">
      <summary>List the files in the specified directory.</summary>
      <param name="directory">Full path of the directory.</param>
      <returns>List of file names.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDirectory.Move(System.String,System.String)">
      <summary>Moves the specified directory, including all of its contents.</summary>
      <param name="source">Full path of the source directory.</param>
      <param name="destination">Full path of the destination directory.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KDirectory.Plugin">
      <summary>Gets the directory where plug-ins are located.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KDirectory.SetCurrent(System.String)">
      <summary>Sets the current working directory.</summary>
      <param name="directory">Full path of the desired working directory.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KDirectory.Temp">
      <summary>Gets the path of a directory suitable for temporary files.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Io.KFile">
      <summary>Represents a file stream. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KFile class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.#ctor(System.String,Lmi3d.Zen.Io.KFileMode)">
      <summary>Initializes a new instance of the KFile class with the specified file path and mode.</summary>
      <param name="path">Path to the file.</param>
      <param name="mode">Specifies how to open the file.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.#ctor(System.String,Lmi3d.Zen.Io.KFileMode,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KFile class with the specified file path and mode.</summary>
      <param name="path">Path to the file.</param>
      <param name="mode">Specifies how to open the file.</param>
      <param name="allocator">Memory allocator.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.Close">
      <summary>Performs any outstanding I/O operations and closes the underlying file.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.Copy(System.String,System.String)">
      <summary>Copies a file to the specified destination.</summary>
      <param name="source">Source file path.</param>
      <param name="destination">Destination file path.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.Copy(System.String,System.String,System.Action`2)"></member>
    <member name="P:Lmi3d.Zen.Io.KFile.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Io.KFile.Delete(System.String)">
      <summary>Deletes the specified file.</summary>
      <param name="path">Path to file.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.Exists(System.String)">
      <summary>Reports whether the specified file exists.</summary>
      <param name="path">Path to file.</param>
      <returns>true if the file exists; false otherwise.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.GetSize(System.String)">
      <summary>Reports the size the specified file, in bytes.</summary>
      <param name="path">Path to file.</param>
      <returns>File size.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.GetTempName">
      <summary>Suggests a suitable name for a temporary file.</summary>
      <returns>Suggested file name.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KFile.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Io.KFile.Length">
      <summary> Gets the current length of the file.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.Load(System.String)">
      <summary>Reads the specified file and provides the file contents in an array.</summary>
      <param name="path">Path to the file.</param>
      <returns>File contents.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.Move(System.String,System.String)">
      <summary>Moves a file to the specified destination.</summary>
      <param name="source">Source file path.</param>
      <param name="destination">Destination file path.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.Move(System.String,System.String,System.Action`2)"></member>
    <member name="P:Lmi3d.Zen.Io.KFile.Position">
      <summary> Gets the current position of the read/write pointer, relative to the beginning of the file. </summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KFile.ReadBufferSize">
      <summary>Sets the size of the buffer used for reading.</summary>
      <param name="size">Size of the buffer.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.Save(System.String,System.Byte[])">
      <summary>Saves the specified data to file.</summary>
      <param name="path">Path to file.</param>
      <param name="data">File data.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFile.Save(System.String,System.IntPtr,System.Int64)">
      <summary>Saves the specified data to file.</summary>
      <param name="path">Path to file.</param>
      <param name="data">Pointer to the file contents.</param>
      <param name="size">Size of the file contents.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KFile.WriteBufferSize">
      <summary>Sets the size of the buffer used for writing.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Io.KFileMode">
      <summary>Flags that control how a file is opened.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFileMode.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Io.KFileMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFileMode.Equals(Lmi3d.Zen.Io.KFileMode)"></member>
    <member name="M:Lmi3d.Zen.Io.KFileMode.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KFileMode.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Io.KFileMode.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Io.KFileMode.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KFileMode.op_Equality(Lmi3d.Zen.Io.KFileMode,Lmi3d.Zen.Io.KFileMode)"></member>
    <member name="M:Lmi3d.Zen.Io.KFileMode.op_Equality(Lmi3d.Zen.Io.KFileMode,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KFileMode.op_Implicit(Lmi3d.Zen.Io.KFileMode)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.Io.KFileMode.op_Implicit(System.Int32)~Lmi3d.Zen.Io.KFileMode"></member>
    <member name="M:Lmi3d.Zen.Io.KFileMode.op_Inequality(Lmi3d.Zen.Io.KFileMode,Lmi3d.Zen.Io.KFileMode)"></member>
    <member name="M:Lmi3d.Zen.Io.KFileMode.op_Inequality(Lmi3d.Zen.Io.KFileMode,System.Int32)"></member>
    <member name="F:Lmi3d.Zen.Io.KFileMode.Read">
      <summary>Open the file with permission to read.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KFileMode.ToString"></member>
    <member name="F:Lmi3d.Zen.Io.KFileMode.Update">
      <summary>Preserve contents when opened for writing.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KFileMode.Value"></member>
    <member name="F:Lmi3d.Zen.Io.KFileMode.Write">
      <summary>Open the file with permission to write.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Io.KHttpServer">
      <summary>Implements a simple HTTP server. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServer.#ctor">
      <summary>Initializes a new instance of the KHttpServer class.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServer.#ctor(Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KHttpServer class.</summary>
      <param name="allocator">Memory allocator</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServer.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KHttpServer class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServer.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Io.KHttpServer.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Io.KHttpServer.LocalEndPoint">
      <summary>Gets the local end-point for a running server.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServer.Start(Lmi3d.Zen.Io.KIpAddress,System.Int32,System.Int32,System.Action`2)"></member>
    <member name="M:Lmi3d.Zen.Io.KHttpServer.Stop">
      <summary>Stops the server.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Io.KHttpServerChannel">
      <summary>Represents the server side of an HTTP connection.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerChannel.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KHttpServerChannel class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerChannel.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerChannel.DetachClient">
      <summary>Transfers ownership of the underlying TCP client object associated with this channel.</summary>
      <returns>TCP client object.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerChannel.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerChannel.ProcessWebSocketRequest(System.Int32)">
      <summary>Processes a websocket request.</summary>
      <returns>Websocket client object.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerChannel.Request">
      <summary>Gets a KHttpServerRequest object that can be used to parse an incoming request.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerChannel.Response">
      <summary>Gets a KHttpServerResponse object that can be used to format an outgoing response.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Io.KHttpServerRequest">
      <summary>Supports HTTP server request parsing.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerRequest.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KHttpServerRequest class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerRequest.BeginRead(System.Int64@)">
      <summary>Begins reading the message body.</summary>
      <param name="length">Receives the amount of data, in bytes, that should be read from the stream.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequest.ContentLength">
      <summary>Reports the total message length for a simple (non-chunk-encoded) message.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequest.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerRequest.FindHeaderValue(System.String)">
      <summary>Finds the header field value associated with the given header field name, if present.</summary>
      <param name="name">Header field name.</param>
      <returns>Header field value.</returns>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if not found.</exception>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequest.FirstHeader">
      <summary>Gets the first header.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequest.HasBody">
      <summary>Reports whether the request has an associated message body.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequest.HeaderCount">
      <summary>Gets the total count of headers parsed from this request.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequest.IsChunkCoded">
      <summary>Reports whether the message body is chunk-encoded.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequest.IsWebSocketUpgrade">
      <summary>Reports whether an upgrade to websocket protocol is requested.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequest.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequest.Method"></member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerRequest.TryFindHeaderValue(System.String)">
      <summary>Attempts to find the header field value associated with the given header field name. </summary>
      <param name="name">Header field name.</param>
      <returns>Header field value, or null if not found.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequest.Uri">
      <summary>Gets the HTTP request URI (e.g., /resources/page.html).</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequest.UriPath">
      <summary>Gets the HTTP request URI in absolute path form (e.g., /resources/page.html).</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequest.Version">
      <summary>Gets the HTTP version associated with this request.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Io.KHttpServerRequestHeader">
      <summary>Represents a node within a kHttpServerRequest header list.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequestHeader.Name">
      <summary>Gets the header field name.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequestHeader.Next">
      <summary> Gets a reference to the next list item.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerRequestHeader.Value">
      <summary>Gets the header field value.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Io.KHttpServerResponse">
      <summary>Supports HTTP server response formatting.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerResponse.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KHttpServerResponse class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerResponse.AddHeader(System.String,System.String)">
      <summary>Adds a header value to the response.</summary>
      <param name="name">Header field name.</param>
      <param name="value">Header field value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerResponse.BeginWriteChunk(System.Int64)">
      <summary>Begins writing a chunk-encoded message body segment.</summary>
      <param name="length">Length of the message chunk, in bytes.</param>
      <returns>Stream object that should be used to write the message chunk.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerResponse.BeginWriteContent(System.Int64)">
      <summary>Begins writing a simple message body.</summary>
      <param name="length">Total length of the message body, in bytes.</param>
      <returns>Stream object that should be used to write the message body.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerResponse.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Io.KHttpServerResponse.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerResponse.SetClosed(System.Boolean)">
      <summary>Instructs the HTTP server to close this connection when message processing is complete.</summary>
      <param name="closed">true to close the connection; false otherwise.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerResponse.SetHeader(System.String,System.String)">
      <summary>Sets the value of a header in the response.</summary>
      <param name="name">Header field name.</param>
      <param name="value">Header field value.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerResponse.SetReason(System.String)">
      <summary>Sets the HTTP status description associated with this response.</summary>
      <param name="reason">HTTP status description.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerResponse.SetStatus(Lmi3d.Zen.Io.KHttpStatus)">
      <summary>Sets the HTTP status code associated with this response.</summary>
      <param name="status">HTTP status code.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpServerResponse.SetVersion(Lmi3d.Zen.KVersion)">
      <summary>Sets the version associated with this HTTP response.</summary>
      <param name="version">Message version.</param>
    </member>
    <member name="T:Lmi3d.Zen.Io.KHttpStatus">
      <summary>HTTP status code.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpStatus.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Io.KHttpStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.Accepted">
      <summary>Accepted.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.BadGateway">
      <summary>Bad gateway.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.BadRequest">
      <summary>Bad request.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.Conflict">
      <summary>Conflict.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.Continue">
      <summary>Continue.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.Created">
      <summary>Created.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpStatus.Equals(Lmi3d.Zen.Io.KHttpStatus)"></member>
    <member name="M:Lmi3d.Zen.Io.KHttpStatus.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KHttpStatus.Equals(System.Object)"></member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.ExpectationFailed">
      <summary>Expectation failed.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.Forbidden">
      <summary>Forbidden.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.Found">
      <summary>Found.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.GatewayTimeout">
      <summary>Gateway timeout.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpStatus.GetHashCode"></member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.Gone">
      <summary>Gone.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.InternalServerError">
      <summary>Internal server error.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.InvalidRange">
      <summary>Requested range not satisfiable.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpStatus.KTypeId"></member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.LengthRequired">
      <summary>Length required.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.MethodNotAllowed">
      <summary>Method not allowed.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.MovedPermanently">
      <summary>Moved permanently.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.MultipleChoices">
      <summary>Multiple choices.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.NoContent">
      <summary>No content.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.NonAuthoritative">
      <summary>Non-authoritative information.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.NotAcceptable">
      <summary>Not acceptable.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.NotFound">
      <summary>Not found.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.NotImplemented">
      <summary>Not implemented.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.NotModified">
      <summary>Not modified.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.Ok">
      <summary>OK.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpStatus.op_Equality(Lmi3d.Zen.Io.KHttpStatus,Lmi3d.Zen.Io.KHttpStatus)"></member>
    <member name="M:Lmi3d.Zen.Io.KHttpStatus.op_Equality(Lmi3d.Zen.Io.KHttpStatus,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KHttpStatus.op_Implicit(Lmi3d.Zen.Io.KHttpStatus)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.Io.KHttpStatus.op_Implicit(System.Int32)~Lmi3d.Zen.Io.KHttpStatus"></member>
    <member name="M:Lmi3d.Zen.Io.KHttpStatus.op_Inequality(Lmi3d.Zen.Io.KHttpStatus,Lmi3d.Zen.Io.KHttpStatus)"></member>
    <member name="M:Lmi3d.Zen.Io.KHttpStatus.op_Inequality(Lmi3d.Zen.Io.KHttpStatus,System.Int32)"></member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.PartialContent">
      <summary>Partial content.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.PaymentRequired">
      <summary>Payment required.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.PreconditionFailed">
      <summary>Precondition failed.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.ProxyAuthRequired">
      <summary>Proxy authentication required.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.RequestEntitySize">
      <summary>Request entity too large.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.RequestTimeout">
      <summary>Request timeout.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.RequestUriSize">
      <summary>Request URI size too large.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.ResetContent">
      <summary>Reset content.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.SeeOther">
      <summary>See other.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.ServiceUnavailable">
      <summary>Service unavailable.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.SwitchingProtocols">
      <summary>Switching protocols.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.TemporaryRedirect">
      <summary>Temporary redirect.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KHttpStatus.ToString"></member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.Unauthorized">
      <summary>Unauthorized.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.UnsupportedMediaType">
      <summary>Unsupported media type.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.UnsupportedVersion">
      <summary>HTTP version not supported.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KHttpStatus.UseProxy">
      <summary>Use proxy.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KHttpStatus.Value"></member>
    <member name="T:Lmi3d.Zen.Io.KIpAddress">
      <summary>Represents an IP address.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KIpAddress.AnyV4">
      <summary>Gets an address representing an automatically-assigned IPv4 address.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KIpAddress.BroadcastV4">
      <summary>Gets an address suitable for broadcasting IPv4 datagrams.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpAddress.Equals(Lmi3d.Zen.Io.KIpAddress)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpAddress.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpAddress.FromHost32u(System.UInt32)">
      <summary>Converts a host-endian 32-bit integer to an IPv4 address.</summary>
      <param name="address">Host-endian integer.</param>
      <returns>IP address.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpAddress.FromNet32u(System.UInt32)">
      <summary>Converts a network-endian 32-bit integer to an IPv4 address.</summary>
      <param name="address">Network-endian integer.</param>
      <returns>IP address.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpAddress.GetAny(Lmi3d.Zen.Io.KIpVersion)">
      <summary>Gets an address representing an automatically-assigned address.</summary>
      <param name="version">IP version.</param>
      <returns>Address value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpAddress.GetHashCode"></member>
    <member name="M:Lmi3d.Zen.Io.KIpAddress.GetLoopback(Lmi3d.Zen.Io.KIpVersion)">
      <summary>Gets a loopback address.</summary>
      <param name="version">IP version.</param>
      <returns>Address value.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KIpAddress.IsLoopback">
      <summary>Reports whether the address is a loopback address.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KIpAddress.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Io.KIpAddress.LoopbackV4">
      <summary>Gets the IpV4 loopback address.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpAddress.op_Equality(Lmi3d.Zen.Io.KIpAddress,Lmi3d.Zen.Io.KIpAddress)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpAddress.op_Inequality(Lmi3d.Zen.Io.KIpAddress,Lmi3d.Zen.Io.KIpAddress)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpAddress.Parse(System.String)">
      <summary>Parses a text-formatted IP address.</summary>
      <param name="text">Text-formatted IP address.</param>
      <returns>Parsed address.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpAddress.ToHost32u">
      <summary>Converts an IPv4 address to a host-endian 32-bit integer.</summary>
      <returns>Host-endian integer.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpAddress.ToNet32u">
      <summary>Converts an IPv4 address to a network-endian 32-bit integer.</summary>
      <returns>Host-endian integer.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpAddress.ToString">
      <summary>Formats an IP address as a string.</summary>
      <returns>Formatted address.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Io.KIpEndPoint">
      <summary>Represents an IP end point (address, port).</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpEndPoint.#ctor(Lmi3d.Zen.Io.KIpAddress,System.Int32)">
      <summary>Initializes a new KIpEndPoint instance.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KIpEndPoint.Address">
      <summary>IP address.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KIpEndPoint.AnyPort">
      <summary>Used to request an automatically assigned port.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpEndPoint.Equals(Lmi3d.Zen.Io.KIpEndPoint)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpEndPoint.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpEndPoint.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Io.KIpEndPoint.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KIpEndPoint.op_Equality(Lmi3d.Zen.Io.KIpEndPoint,Lmi3d.Zen.Io.KIpEndPoint)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpEndPoint.op_Inequality(Lmi3d.Zen.Io.KIpEndPoint,Lmi3d.Zen.Io.KIpEndPoint)"></member>
    <member name="F:Lmi3d.Zen.Io.KIpEndPoint.Port">
      <summary>Port number.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Io.KIpEntry">
      <summary>Represents information about a local IP address.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KIpEntry.Address">
      <summary>IP address.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpEntry.Equals(Lmi3d.Zen.Io.KIpEntry)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpEntry.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpEntry.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Io.KIpEntry.KTypeId"></member>
    <member name="F:Lmi3d.Zen.Io.KIpEntry.Name">
      <summary>Port number.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpEntry.op_Equality(Lmi3d.Zen.Io.KIpEntry,Lmi3d.Zen.Io.KIpEntry)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpEntry.op_Inequality(Lmi3d.Zen.Io.KIpEntry,Lmi3d.Zen.Io.KIpEntry)"></member>
    <member name="T:Lmi3d.Zen.Io.KIpVersion">
      <summary>Represents an Internet Protocol version.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpVersion.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Io.KIpVersion</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KIpVersion.Equals(Lmi3d.Zen.Io.KIpVersion)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpVersion.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpVersion.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpVersion.GetHashCode"></member>
    <member name="F:Lmi3d.Zen.Io.KIpVersion.IPv4">
      <summary>Internet Protocol version 4.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KIpVersion.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KIpVersion.op_Equality(Lmi3d.Zen.Io.KIpVersion,Lmi3d.Zen.Io.KIpVersion)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpVersion.op_Equality(Lmi3d.Zen.Io.KIpVersion,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpVersion.op_Implicit(Lmi3d.Zen.Io.KIpVersion)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.Io.KIpVersion.op_Implicit(System.Int32)~Lmi3d.Zen.Io.KIpVersion"></member>
    <member name="M:Lmi3d.Zen.Io.KIpVersion.op_Inequality(Lmi3d.Zen.Io.KIpVersion,Lmi3d.Zen.Io.KIpVersion)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpVersion.op_Inequality(Lmi3d.Zen.Io.KIpVersion,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KIpVersion.ToString"></member>
    <member name="P:Lmi3d.Zen.Io.KIpVersion.Value"></member>
    <member name="T:Lmi3d.Zen.Io.KMemory">
      <summary>Represents an in-memory stream. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KMemory.#ctor">
      <summary>Constructs a kMemory object.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KMemory.#ctor(Lmi3d.Zen.KAlloc)">
      <summary>Constructs a kMemory object.</summary>
      <param name="allocator">Memory allocator</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KMemory.#ctor(Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Constructs a kMemory object.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="allocator">Memory allocator</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KMemory.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KMemory class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KMemory.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KMemory class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KMemory.Allocate(System.Int64)">
      <summary>Allocates an auto-sizing, internally-managed buffer for the memory stream.</summary>
      <param name="initialCapacity">Initial capacity of the buffer, in bytes.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KMemory.Attach(System.Byte[],System.Int64,System.Int64)">
      <summary>Attaches the memory stream to an external, fixed-capacity buffer.</summary>
      <param name="buffer">Data buffer.</param>
      <param name="position">Current read/write position, relative to start of buffer.</param>
      <param name="length">Length of valid data contained in the buffer, in bytes.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KMemory.Attach(System.IntPtr,System.Int64,System.Int64,System.Int64)">
      <summary>Attaches the memory stream to an external, fixed-capacity buffer.</summary>
      <param name="buffer">Data buffer.</param>
      <param name="position">Current read/write position, relative to start of buffer.</param>
      <param name="length">Length of valid data contained in the buffer, in bytes.</param>
      <param name="capacity">Total size of the buffer, in bytes.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KMemory.Capacity">
      <summary>Returns the current capacity of the memory buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KMemory.Data">
      <summary>Returns a pointer to the internal memory buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KMemory.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Io.KMemory.GetDataAt(System.Int64)">
      <summary>Returns a pointer to the specified position within the memory buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KMemory.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Io.KMemory.Length">
      <summary>Returns the current length of the memory buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KMemory.Position">
      <summary>Returns the current position of the read/write pointer, relative to the beginning of the buffer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KMemory.SetLength(System.Int64)">
      <summary>Sets the reported length of the memory buffer.</summary>
      <param name="length">Buffer length.</param>
    </member>
    <member name="T:Lmi3d.Zen.Io.KNetwork">
      <summary>Collection of network utility methods.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KNetwork.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Io.KNetwork.FindLocalIpInterfaces">
      <summary>Finds information about local IP configuration.</summary>
      <returns>List of KIpEntry structures.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KNetwork.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Io.KPath">
      <summary>Collection of path manipulation methods.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KPath.Combine(System.String,System.String)">
      <summary>Combines two path segments using the normalized path separator character.</summary>
      <param name="segment1">First path segment.</param>
      <param name="segment2">Second path segment.</param>
      <returns>The combined path segments.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KPath.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Io.KPath.GetDirectory(System.String)">
      <summary>Returns the parent directory for a given file or directory path.</summary>
      <param name="path">File or directory path.</param>
      <returns>Parent directory portion of the path.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KPath.GetExtension(System.String)">
      <summary>Given a file path, returns the portion of the path containing the file extension.</summary>
      <param name="path">File path.</param>
      <returns>File extension portion of the path.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KPath.GetFileName(System.String)">
      <summary>Given a file path, returns the portion of the path containing the file name.</summary>
      <param name="path">File path.</param>
      <returns>File name portion of the path.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KPath.IsSeparator(System.String)">
      <summary>Determines if the given character is equal to the normalized path separator.</summary>
      <param name="separator">Character to examine.</param>
      <returns>true if the character is the normalized path separator.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KPath.KTypeId"></member>
    <member name="F:Lmi3d.Zen.Io.KPath.MaxPath"></member>
    <member name="P:Lmi3d.Zen.Io.KPath.Separator">
      <summary>Gets the normalized path separator character.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KPath.ToAbsolute(System.String,System.String)">
      <summary>Finds the absolute path expressed by the combination of an absolute path and a relative path.</summary>
      <param name="pathA">Absolute reference path.</param>
      <param name="bRelativeToA">Path b, expressed as relative to path A.</param>
      <returns>Path b, expressed as an absolute path.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KPath.ToCanonical(System.String)">
      <summary>Transforms all path separators to normal form, canonicalizes the path by collapsing redundant separators and removes trailing slashes.</summary>
      <param name="path">Input path, in normal or mixed form.</param>
      <returns>Path in native form.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KPath.ToNative(System.String)">
      <summary>Transforms all path separators to native form.</summary>
      <param name="path">Input path, in normal or mixed form.</param>
      <returns>Path in native form.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KPath.ToNormal(System.String)">
      <summary>Transforms all path separators to normal form and removes trailing slashes.</summary>
      <param name="path">Input path, in native or mixed form.</param>
      <returns>Path in normal form.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KPath.ToRelative(System.String,System.String)">
      <summary>Expresses an absolute path in relative form, in relation to a reference path.</summary>
      <param name="pathA">Absolute reference path.</param>
      <param name="pathB">Absolute path to be re-expressed as relative to path A.</param>
      <returns>Path b, expressed as relative to path A.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Io.KSeekOrigin">
      <summary>Represents the point of reference for a stream seek operation.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSeekOrigin.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Io.KSeekOrigin</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KSeekOrigin.Begin">
      <summary>Seek relative to the start of stream.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KSeekOrigin.Current">
      <summary>Seek relative to the current position.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KSeekOrigin.End">
      <summary>Seek relative to the end of stream.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSeekOrigin.Equals(Lmi3d.Zen.Io.KSeekOrigin)"></member>
    <member name="M:Lmi3d.Zen.Io.KSeekOrigin.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KSeekOrigin.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Io.KSeekOrigin.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Io.KSeekOrigin.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KSeekOrigin.op_Equality(Lmi3d.Zen.Io.KSeekOrigin,Lmi3d.Zen.Io.KSeekOrigin)"></member>
    <member name="M:Lmi3d.Zen.Io.KSeekOrigin.op_Equality(Lmi3d.Zen.Io.KSeekOrigin,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KSeekOrigin.op_Implicit(Lmi3d.Zen.Io.KSeekOrigin)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.Io.KSeekOrigin.op_Implicit(System.Int32)~Lmi3d.Zen.Io.KSeekOrigin"></member>
    <member name="M:Lmi3d.Zen.Io.KSeekOrigin.op_Inequality(Lmi3d.Zen.Io.KSeekOrigin,Lmi3d.Zen.Io.KSeekOrigin)"></member>
    <member name="M:Lmi3d.Zen.Io.KSeekOrigin.op_Inequality(Lmi3d.Zen.Io.KSeekOrigin,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KSeekOrigin.ToString"></member>
    <member name="P:Lmi3d.Zen.Io.KSeekOrigin.Value"></member>
    <member name="T:Lmi3d.Zen.Io.KSerializer">
      <summary>Base class for binary serialization/deserialization classes.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.#ctor(Lmi3d.Zen.Io.KStream)">
      <summary>Initializes a new instance of the KSerializer class.</summary>
      <param name="stream">Stream for reading/writing.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.#ctor(Lmi3d.Zen.Io.KStream,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KSerializer class.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="stream">Stream for reading/writing.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KSerializer class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KSerializer class.</summary>
      <param name="refStyle">Reference managment style.</param>
      <param name="stream">Stream for reading/writing.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.AdvanceRead(System.Int64)">
      <summary>Reads and discards a specified number of bytes.</summary>
      <param name="offset">Number of bytes to read and discard.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.BeginRead(Lmi3d.Zen.KType,System.Boolean)">
      <summary>Begins reading a measured data section.</summary>
      <param name="sizeType">Type of size field (k8u, k16u, k32u, or k64u).</param>
      <param name="includeSize">Size of the size field was included in the recorded size?</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.BeginWrite(Lmi3d.Zen.KType,System.Boolean)">
      <summary>Begins writing a measured section of data, using an 8, 16, 32, or 64-bit unsigned integer
to record the size.</summary>
      <param name="sizeType">Type of size field (K8u, K16u, K32u, or K64u).</param>
      <param name="includeSize">Include the size of the size field in the written size?</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSerializer.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.EndRead">
      <summary>Ends reading a measured data section.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.EndWrite">
      <summary>Ends writing a measured data section.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Flush">
      <summary>Flushes the serializer write buffer to the underlying stream.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.IsMemoryCompatible(Lmi3d.Zen.KType)">
      <summary> Determines whether a value type is memory-compatible with the serializer.</summary>
      <param name="type">Type instance.</param>
      <returns>True if the type is memory compatible.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.IsReadCompleted">
      <summary>Determines whether the current measured read section has more bytes.</summary>
      <returns>true if no more bytes available; otherwise, false.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSerializer.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read16s">
      <summary>Reads an Int16 value.</summary>
      <returns>Value that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read16sArray(System.Int16[],System.Int32,System.Int32)">
      <summary>Reads an Int16 array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read16sArray(System.Int32)">
      <summary>Reads an Int16 array.</summary>
      <param name="count">Count of array elements to read.</param>
      <returns>Array that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read16sArray(System.IntPtr,System.Int64)">
      <summary>Reads an Int16 array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read16u">
      <summary>Reads a UInt16 value.</summary>
      <returns>Value that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read16uArray(System.Int32)">
      <summary>Reads a UInt16 array.</summary>
      <param name="count">Count of array elements to read.</param>
      <returns>Array that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read16uArray(System.IntPtr,System.Int64)">
      <summary>Reads a UInt16 array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read16uArray(System.UInt16[],System.Int32,System.Int32)">
      <summary>Reads a UInt16 array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read32f">
      <summary>Reads a Single value.</summary>
      <returns>Value that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read32fArray(System.Int32)">
      <summary>Reads a Single array.</summary>
      <param name="count">Count of array elements to read.</param>
      <returns>Array that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read32fArray(System.IntPtr,System.Int64)">
      <summary>Reads a Single array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read32fArray(System.Single[],System.Int32,System.Int32)">
      <summary>Reads a Single array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read32s">
      <summary>Reads an Int32 value.</summary>
      <returns>Value that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read32sArray(System.Int32)">
      <summary>Reads an Int32 array.</summary>
      <param name="count">Count of array elements to read.</param>
      <returns>Array that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read32sArray(System.Int32[],System.Int32,System.Int32)">
      <summary>Reads an Int32 array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read32sArray(System.IntPtr,System.Int64)">
      <summary>Reads an Int32 array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read32u">
      <summary>Reads a UInt32 value.</summary>
      <returns>Value that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read32uArray(System.Int32)">
      <summary>Reads a UInt32 array.</summary>
      <param name="count">Count of array elements to read.</param>
      <returns>Array that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read32uArray(System.IntPtr,System.Int64)">
      <summary>Reads a UInt32 array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read32uArray(System.UInt32[],System.Int32,System.Int32)">
      <summary>Reads a UInt32 array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read64f">
      <summary>Reads a Double value.</summary>
      <returns>Value that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read64fArray(System.Double[],System.Int32,System.Int32)">
      <summary>Reads a Double array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read64fArray(System.Int32)">
      <summary>Reads a Double array.</summary>
      <param name="count">Count of array elements to read.</param>
      <returns>Array that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read64fArray(System.IntPtr,System.Int64)">
      <summary>Reads a Double array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read64s">
      <summary>Reads an Int64 value.</summary>
      <returns>Value that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read64sArray(System.Int32)">
      <summary>Reads an Int64 array.</summary>
      <param name="count">Count of array elements to read.</param>
      <returns>Array that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read64sArray(System.Int64[],System.Int32,System.Int32)">
      <summary>Reads an Int64 array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read64sArray(System.IntPtr,System.Int64)">
      <summary>Reads an Int64 array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read64u">
      <summary>Reads a UInt64 value.</summary>
      <returns>Value that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read64uArray(System.Int32)">
      <summary>Reads a UInt64 array.</summary>
      <param name="count">Count of array elements to read.</param>
      <returns>Array that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read64uArray(System.IntPtr,System.Int64)">
      <summary>Reads a UInt64 array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read64uArray(System.UInt64[],System.Int32,System.Int32)">
      <summary>Reads a UInt64 array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read8s">
      <summary>Reads an SByte value.</summary>
      <returns>Value that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read8sArray(System.Int32)">
      <summary>Reads an SByte array.</summary>
      <param name="count">Count of array elements to read.</param>
      <returns>Array that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read8sArray(System.IntPtr,System.Int64)">
      <summary>Reads an SByte array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read8sArray(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte[],System.Int32,System.Int32)">
      <summary>Reads an SByte array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read8u">
      <summary>Reads a Byte value.</summary>
      <returns>Value that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read8uArray(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a Byte array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read8uArray(System.Int32)">
      <summary>Reads a Byte array.</summary>
      <param name="count">Count of array elements to read.</param>
      <returns>Array that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Read8uArray(System.IntPtr,System.Int64)">
      <summary>Reads a Byte array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadObject``1">
      <summary>Reads an object from the underlying stream.</summary>
      <typeparam name="T">Type of object to be deserialized.</typeparam>
      <returns>Deserialized object.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadObject``1(Lmi3d.Zen.KAlloc)">
      <summary>Reads an object from the underlying stream.</summary>
      <param name="allocator">Memory allocator.</param>
      <typeparam name="T">Type of object to be deserialized.</typeparam>
      <returns>Deserialized object.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadSize">
      <summary>Reads a KSize value.</summary>
      <returns>Value that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadSizeArray(Lmi3d.Zen.KSize[],System.Int32,System.Int32)">
      <summary>Reads a KSize array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadSizeArray(System.Int32)">
      <summary>Reads a KSize array.</summary>
      <param name="count">Count of array elements to read.</param>
      <returns>Array that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadSizeArray(System.IntPtr,System.Int64)">
      <summary>Reads a KSize array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadSSize">
      <summary>Reads a KSSize value.</summary>
      <returns>Value that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadSSizeArray(Lmi3d.Zen.KSSize[],System.Int32,System.Int32)">
      <summary>Reads a KSSize array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadSSizeArray(System.Int32)">
      <summary>Reads a KSSize array.</summary>
      <param name="count">Count of array elements to read.</param>
      <returns>Array that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadSSizeArray(System.IntPtr,System.Int64)">
      <summary>Reads a KSSize array.</summary>
      <param name="data">Receives the array elements.</param>
      <param name="count">Count of array elements to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadString">
      <summary>Reads the string length as a KSize value and the string content as a KChar array.</summary>
      <returns>String that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadTextArray(System.Int64)">
      <summary>Reads a string as a null-terminated utf8 character array.</summary>
      <param name="capacity">Maximum number of characters to read, including the null terminator (must be greater than zero).</param>
      <returns>String that was read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadType">
      <summary>Reads a type code.</summary>
      <returns>Type instance.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadType(Lmi3d.Zen.KTypeVersion@)">
      <summary>Reads a type code.</summary>
      <param name="version">Receives type version.</param>
      <returns>Type instance.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadValues``1(Lmi3d.Zen.KType,Lmi3d.Zen.KTypeVersion,System.Int32)">
      <summary>Reads an array of values.</summary>
      <param name="type">Type of items.</param>
      <param name="version">Type version.</param>
      <param name="items">Receives deserialized items.</param>
      <param name="count">Count of items.</param>
      <returns>Array of deserialized values.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadValues(Lmi3d.Zen.KType,Lmi3d.Zen.KTypeVersion,System.IntPtr,System.Int64)">
      <summary>Reads an array of values.</summary>
      <param name="type">Type of items.</param>
      <param name="version">Type version.</param>
      <param name="items">Receives deserialized items.</param>
      <param name="count">Count of items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.ReadValues``1(Lmi3d.Zen.KType,Lmi3d.Zen.KTypeVersion,``0[],System.Int32,System.Int32)">
      <summary>Reads an array of values.</summary>
      <param name="items">Items to serialize.</param>
      <param name="start">Index of first array item.</param>
      <param name="type">Type of items.</param>
      <param name="version">Type version.</param>
      <param name="count">Count of items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Reset">
      <summary>Discards any streaming context accumulated by the serializer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.SetVersion(Lmi3d.Zen.KAssembly,Lmi3d.Zen.KVersion)">
      <summary>Sets the version to use when serializing types.</summary>
      <param name="assembly">Assembly object (or kNULL).</param>
      <param name="version">Desired version.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSerializer.SizeEncoding">
      <summary>Gets or sets the number of bytes (4 or 8) used to encode/decode kSize and kSSize values.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSerializer.Stream">
      <summary>Gets the underlying stream.</summary>
      <returns>Stream object.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write16s(System.Int16)">
      <summary>Writes an Int16 value.</summary>
      <param name="data">Value to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write16sArray(System.Int16[],System.Int32,System.Int32)">
      <summary>Writes an Int16 array.</summary>
      <param name="data">Array to write.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write16sArray(System.IntPtr,System.Int64)">
      <summary>Writes an Int16 array.</summary>
      <param name="data">Array to write.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write16u(System.UInt16)">
      <summary>Writes a UInt16 value.</summary>
      <param name="data">Value to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write16uArray(System.IntPtr,System.Int64)">
      <summary>Writes a UInt16 array.</summary>
      <param name="data">Array to write.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write16uArray(System.UInt16[],System.Int32,System.Int32)">
      <summary>Writes a UInt16 array.</summary>
      <param name="data">Array to write.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write32f(System.Single)">
      <summary>Writes a Single value.</summary>
      <param name="data">Value to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write32fArray(System.IntPtr,System.Int64)">
      <summary>Writes a Single array.</summary>
      <param name="data">Array to write.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write32fArray(System.Single[],System.Int32,System.Int32)">
      <summary>Writes a Single array.</summary>
      <param name="data">Array to write.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write32s(System.Int32)">
      <summary>Writes an Int32 value.</summary>
      <param name="data">Value to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write32sArray(System.Int32[],System.Int32,System.Int32)">
      <summary>Writes an Int32 array.</summary>
      <param name="data">Array to write.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write32sArray(System.IntPtr,System.Int64)">
      <summary>Writes an Int32 array.</summary>
      <param name="data">Array to write.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write32u(System.UInt32)">
      <summary>Writes a UInt32 value.</summary>
      <param name="data">Value to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write32uArray(System.IntPtr,System.Int64)">
      <summary>Writes a UInt32 array.</summary>
      <param name="data">Array to write.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write32uArray(System.UInt32[],System.Int32,System.Int32)">
      <summary>Writes a UInt32 array.</summary>
      <param name="data">Array to write.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write64f(System.Double)">
      <summary>Writes a Double value.</summary>
      <param name="data">Value to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write64fArray(System.Double[],System.Int32,System.Int32)">
      <summary>Writes a Double array.</summary>
      <param name="data">Array to write.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write64fArray(System.IntPtr,System.Int64)">
      <summary>Writes a Double array.</summary>
      <param name="data">Array to write.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write64s(System.Int64)">
      <summary>Writes an Int64 value.</summary>
      <param name="data">Value to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write64sArray(System.Int64[],System.Int32,System.Int32)">
      <summary>Writes an Int64 array.</summary>
      <param name="data">Array to write.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write64sArray(System.IntPtr,System.Int64)">
      <summary>Writes an Int64 array.</summary>
      <param name="data">Array to write.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write64u(System.UInt64)">
      <summary>Writes a UInt64 value.</summary>
      <param name="data">Value to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write64uArray(System.IntPtr,System.Int64)">
      <summary>Writes a UInt64 array.</summary>
      <param name="data">Array to write.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write64uArray(System.UInt64[],System.Int32,System.Int32)">
      <summary>Writes a UInt64 array.</summary>
      <param name="data">Array to write.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write8s(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
      <summary>Writes an SByte value.</summary>
      <param name="data">Value to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write8sArray(System.IntPtr,System.Int64)">
      <summary>Writes an SByte array.</summary>
      <param name="data">Array to write.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write8sArray(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte[],System.Int32,System.Int32)">
      <summary>Writes an SByte array.</summary>
      <param name="data">Array to write.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write8u(System.Byte)">
      <summary>Writes a Byte value.</summary>
      <param name="data">Value to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write8uArray(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a Byte array.</summary>
      <param name="data">Array to write.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.Write8uArray(System.IntPtr,System.Int64)">
      <summary>Writes a Byte array.</summary>
      <param name="data">Array to write.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.WriteObject(Lmi3d.Zen.KObject)">
      <summary>Writes an object to the underlying stream.</summary>
      <param name="object">Object to be serialized.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.WriteSize(Lmi3d.Zen.KSize)">
      <summary>Writes a KSize value.</summary>
      <param name="data">Value to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.WriteSizeArray(Lmi3d.Zen.KSize[],System.Int32,System.Int32)">
      <summary>Writes a KSize array.</summary>
      <param name="data">Array to write.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.WriteSizeArray(System.IntPtr,System.Int64)">
      <summary>Writes a KSize array.</summary>
      <param name="data">Array to write.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.WriteSSize(Lmi3d.Zen.KSSize)">
      <summary>Writes a KSSize value.</summary>
      <param name="data">Value to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.WriteSSizeArray(Lmi3d.Zen.KSSize[],System.Int32,System.Int32)">
      <summary>Writes a KSSize array.</summary>
      <param name="data">Array to write.</param>
      <param name="start">Offset into array.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.WriteSSizeArray(System.IntPtr,System.Int64)">
      <summary>Writes a KSSize array.</summary>
      <param name="data">Array to write.</param>
      <param name="count">Count of array elements.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.WriteString(System.String)">
      <summary>Writes the string length as a KSize value and the string content as a KChar array.</summary>
      <param name="string">String to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.WriteTextArray(System.String)">
      <summary>Writes a string as a null-terminated utf8 character array.</summary>
      <param name="string">String to write.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.WriteType(Lmi3d.Zen.KType)">
      <summary>Writes a type code.</summary>
      <param name="type">Type instance.</param>
      <returns>Type version that was written.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.WriteValues(Lmi3d.Zen.KType,Lmi3d.Zen.KTypeVersion,System.IntPtr,System.Int64)">
      <summary>Writes an array of values.</summary>
      <param name="type">Type of items.</param>
      <param name="version">Type version.</param>
      <param name="items">Items to serialize.</param>
      <param name="count">Count of items.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSerializer.WriteValues``1(Lmi3d.Zen.KType,Lmi3d.Zen.KTypeVersion,``0[],System.Int32,System.Int32)">
      <summary>Writes an array of values.</summary>
      <param name="items">Items to serialize.</param>
      <param name="start">Index of first array item.</param>
      <param name="count">Count of items.</param>
      <param name="type">Type of items.</param>
      <param name="version">Type version.</param>
    </member>
    <member name="T:Lmi3d.Zen.Io.KSocket">
      <summary>Represents a network socket. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.#ctor(Lmi3d.Zen.Io.KIpVersion,Lmi3d.Zen.Io.KSocketType)">
      <summary>Constructs a kSocket object.</summary>
      <param name="ipVersion">Internet Protocol version.</param>
      <param name="socketType">The type of socket to create (i.e. TCP or UDP).</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.#ctor(Lmi3d.Zen.Io.KIpVersion,Lmi3d.Zen.Io.KSocketType,Lmi3d.Zen.KAlloc)">
      <summary>Constructs a kSocket object.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="ipVersion">Internet Protocol version.</param>
      <param name="socketType">The type of socket to create (i.e. TCP or UDP).</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KSocket class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.Accept">
      <summary>Blocks until an incoming connection request is accepted.</summary>
      <returns>A socket object representing the newly-established connection, or null.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.Accept(Lmi3d.Zen.KAlloc)">
      <summary>Blocks until an incoming connection request is accepted.</summary>
      <param name="allocator">Memory allocator for new socket.</param>
      <returns>A socket object representing the newly-established connection, or null.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSocket.AddressReuseEnabled">
      <summary>Sets a value that determines whether a local end point can be reused within a short period of time.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.Bind(Lmi3d.Zen.Io.KIpAddress,System.Int32)">
      <summary>Binds the socket to a local IP address and/or port.</summary>
      <param name="address">A local IP address, or address generated using KIpAddress.Any().</param>
      <param name="port">A local port number, or KIpEndPoint.AnyPort.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSocket.BroadcastEnabled">
      <summary>Sets a value that determines whether datagram broadcasting is enabled.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.Connect(Lmi3d.Zen.Io.KIpAddress,System.Int32,System.Int64)">
      <summary>Connects the socket to a remote end point.</summary>
      <param name="address">The remote IP address.</param>
      <param name="port">The remote port number.</param>
      <param name="timeout">The timeout interval, in microseconds.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSocket.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Io.KSocket.Events">
      <summary>Gets the events detected during the most recent wait operation.</summary>
      <returns>Detected events.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSocket.HasErrors"></member>
    <member name="P:Lmi3d.Zen.Io.KSocket.IsBlocking">
      <summary>Sets whether the socket will block on read/write requests.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSocket.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Io.KSocket.LingerTime">
      <summary>Sets the duration (microseconds) that a TCP connection can remain open when the socket is closed
in order to ensure that all outbound bytes are transmitted to the receiver.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.Listen(System.Int32)">
      <summary>Places the socket into a listening state, to monitor for incoming connection requests.</summary>
      <param name="backlog">The maximum number of pending connection requests to enqueue.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSocket.LocalEndPoint"></member>
    <member name="P:Lmi3d.Zen.Io.KSocket.NoDelayEnabled">
      <summary>Sets a value that determines whether the Nagle algorithm is enabled.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads one or more bytes.</summary>
      <param name="start">Offset into the buffer.</param>
      <param name="maxCount">The maximum number of bytes to read.</param>
      <param name="buffer">Buffer to receive bytes.</param>
      <param name="size">The maximum number of bytes to read.</param>
      <returns>The number of bytes that were read; 0 if the connection was closed.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.Read(System.IntPtr,System.Int64)">
      <summary>Reads one or more bytes.</summary>
      <param name="buffer">Buffer to receive bytes.</param>
      <param name="size">The maximum number of bytes to read.</param>
      <returns>The number of bytes that were read; 0 if the connection was closed.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSocket.ReadBufferSize">
      <summary>Sets the size of the read buffer used by the underlying operating system.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.ReadFrom(Lmi3d.Zen.Io.KIpEndPoint@,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a datagram.</summary>
      <param name="start">Offset into the buffer.</param>
      <param name="maxCount">The maximum number of bytes to read.</param>
      <param name="endPoint">Receives the address of the sender.</param>
      <param name="buffer">Buffer to receive bytes.</param>
      <param name="size">The maximum number of bytes to read.</param>
      <returns>The number of bytes that were read; 0 if the connection was closed.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.ReadFrom(Lmi3d.Zen.Io.KIpEndPoint@,System.IntPtr,System.Int64)">
      <summary>Reads a datagram.</summary>
      <param name="endPoint">Receives the address of the sender.</param>
      <param name="buffer">Buffer to receive bytes.</param>
      <param name="size">The maximum number of bytes to read.</param>
      <returns>The number of bytes that were read; 0 if the connection was closed.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSocket.ReadTimeout">
      <summary>Sets the timeout duration (microseconds) for blocking read operations.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSocket.RemoteEndPoint"></member>
    <member name="M:Lmi3d.Zen.Io.KSocket.SetEvents(Lmi3d.Zen.Io.KSocketEvent)">
      <summary>Sets the event types that a socket will wait on.</summary>
      <param name="events">One or more event types to wait on.</param>
      <returns>Operation status.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.Wait(System.Int64)">
      <summary>Waits for a socket event.</summary>
      <param name="timeout">Timeout, in microseconds.</param>
      <returns>true if one or more events occurred before the end of the timeout period; false otherwise.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.WaitAny(Lmi3d.Zen.Io.KSocket[],System.UInt64)">
      <summary>Waits until an event occurs on one or more sockets.</summary>
      <param name="sockets">An array of sockets to wait on.</param>
      <param name="timeout">Timeout, in microseconds.</param>
      <returns>true if one or more sockets are ready; otherwise false.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes one or more bytes.</summary>
      <param name="start">Offset into buffer.</param>
      <param name="maxCount">The number of bytes to write.</param>
      <param name="buffer">Buffer of bytes to write.</param>
      <param name="size">The number of bytes to write.</param>
      <returns>The number of bytes that were written.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.Write(System.IntPtr,System.Int64)">
      <summary>Writes one or more bytes.</summary>
      <param name="buffer">Buffer of bytes to write.</param>
      <param name="size">The number of bytes to write.</param>
      <returns>The number of bytes that were written.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSocket.WriteBufferSize">
      <summary>Sets the size of the write buffer used by the underlying operating system.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSocket.WriteTimeout">
      <summary>Sets the timeout duration (microseconds) for blocking write operations.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.WriteTo(Lmi3d.Zen.Io.KIpAddress,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Sends a datagram.</summary>
      <param name="start">Offset into buffer.</param>
      <param name="address">IP address of the recipient.</param>
      <param name="port">Port number of the recipient.</param>
      <param name="buffer">Buffer containing the datagram to send.</param>
      <param name="size">The number of bytes in the supplied buffer.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocket.WriteTo(Lmi3d.Zen.Io.KIpAddress,System.Int32,System.IntPtr,System.Int64)">
      <summary>Sends a datagram.</summary>
      <param name="address">IP address of the recipient.</param>
      <param name="port">Port number of the recipient.</param>
      <param name="buffer">Buffer containing the datagram to send.</param>
      <param name="size">The number of bytes in the supplied buffer.</param>
    </member>
    <member name="T:Lmi3d.Zen.Io.KSocketEvent">
      <summary>Represents a set of socket event types.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocketEvent.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Io.KSocketEvent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocketEvent.Equals(Lmi3d.Zen.Io.KSocketEvent)"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketEvent.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketEvent.Equals(System.Object)"></member>
    <member name="F:Lmi3d.Zen.Io.KSocketEvent.Except">
      <summary>Socket has an unexpected condition.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocketEvent.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Io.KSocketEvent.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketEvent.op_Equality(Lmi3d.Zen.Io.KSocketEvent,Lmi3d.Zen.Io.KSocketEvent)"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketEvent.op_Equality(Lmi3d.Zen.Io.KSocketEvent,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketEvent.op_Implicit(Lmi3d.Zen.Io.KSocketEvent)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketEvent.op_Implicit(System.Int32)~Lmi3d.Zen.Io.KSocketEvent"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketEvent.op_Inequality(Lmi3d.Zen.Io.KSocketEvent,Lmi3d.Zen.Io.KSocketEvent)"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketEvent.op_Inequality(Lmi3d.Zen.Io.KSocketEvent,System.Int32)"></member>
    <member name="F:Lmi3d.Zen.Io.KSocketEvent.Read">
      <summary>Socket ready for reading/accepting.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocketEvent.ToString"></member>
    <member name="P:Lmi3d.Zen.Io.KSocketEvent.Value"></member>
    <member name="F:Lmi3d.Zen.Io.KSocketEvent.Write">
      <summary>Socket potentially ready for writing.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Io.KSocketType">
      <summary>Represents the underlying type of a socket.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocketType.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Io.KSocketType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocketType.Equals(Lmi3d.Zen.Io.KSocketType)"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketType.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketType.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketType.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Io.KSocketType.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketType.op_Equality(Lmi3d.Zen.Io.KSocketType,Lmi3d.Zen.Io.KSocketType)"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketType.op_Equality(Lmi3d.Zen.Io.KSocketType,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketType.op_Implicit(Lmi3d.Zen.Io.KSocketType)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketType.op_Implicit(System.Int32)~Lmi3d.Zen.Io.KSocketType"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketType.op_Inequality(Lmi3d.Zen.Io.KSocketType,Lmi3d.Zen.Io.KSocketType)"></member>
    <member name="M:Lmi3d.Zen.Io.KSocketType.op_Inequality(Lmi3d.Zen.Io.KSocketType,System.Int32)"></member>
    <member name="F:Lmi3d.Zen.Io.KSocketType.Tcp">
      <summary>TCP Socket.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KSocketType.ToString"></member>
    <member name="F:Lmi3d.Zen.Io.KSocketType.Udp">
      <summary>UDP Socket.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KSocketType.Value"></member>
    <member name="T:Lmi3d.Zen.Io.KStream">
      <summary>Base class for I/O streams. <para /> Requires manual disposal.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KStream.BytesRead">
      <summary>Gets the number of bytes read from this stream.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KStream.BytesWritten">
      <summary>Gets the number of bytes written to this stream.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KStream.ClearStats">
      <summary>Clears stream statistics (e.g., BytesRead, BytesWritten).</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KStream.Copy(Lmi3d.Zen.Io.KStream,System.Int64)">
      <summary>Copies the specified number of bytes from one stream to another.</summary>
      <param name="source">Source stream.</param>
      <param name="count">Count of bytes to be copied.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KStream.Copy(Lmi3d.Zen.Io.KStream,System.Int64,System.Action`2)"></member>
    <member name="P:Lmi3d.Zen.Io.KStream.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Io.KStream.Flush">
      <summary>Flushes buffered writes to the underlying medium.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KStream.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KStream.Read(System.Byte[],System.Int32,System.Int32)">
      <param name="start">Offset into buffer.</param>
      <param name="buffer">Destination for bytes that are read.</param>
      <param name="count">Count of bytes to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KStream.Read(System.IntPtr,System.Int64)">
      <param name="buffer">Destination for bytes that are read.</param>
      <param name="count">Count of bytes to read.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KStream.ReadSome(System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>Reads up to the specified number of bytes from the stream.</summary>
      <param name="start">Offset into buffer.</param>
      <param name="buffer">Destination for bytes that are read.</param>
      <param name="minCount">Minimum count of bytes to read.</param>
      <param name="maxCount">Maximum count of bytes to read.</param>
      <returns>count of bytes read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KStream.ReadSome(System.IntPtr,System.Int64,System.Int64)">
      <summary>Reads up to the specified number of bytes from the stream.</summary>
      <param name="buffer">Destination for bytes that are read.</param>
      <param name="minCount">Minimum count of bytes to read.</param>
      <param name="maxCount">Maximum count of bytes to read.</param>
      <returns>count of bytes read.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KStream.Seek(System.Int64,Lmi3d.Zen.Io.KSeekOrigin)">
      <summary>Moves the read/write pointer to the specified location, if supported by the underlying stream.</summary>
      <param name="offset">Offset by which to adjust the read/write pointer.</param>
      <param name="origin">Origin to which movement is relative (i.e. begin, current, end).</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes the specified number of bytes to the stream.</summary>
      <param name="start">Offset into buffer.</param>
      <param name="buffer">Bytes to be written to the stream.</param>
      <param name="count">Count of bytes to be written.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KStream.Write(System.IntPtr,System.Int64)">
      <summary>Writes the specified number of bytes to the stream.</summary>
      <param name="buffer">Bytes to be written to the stream.</param>
      <param name="count">Count of bytes to be written.</param>
    </member>
    <member name="T:Lmi3d.Zen.Io.KTcpClient">
      <summary>Represents a TCP client. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KTcpClient.#ctor(Lmi3d.Zen.Io.KIpVersion)">
      <summary>Initializes a new instance of the KTcpClient class.</summary>
      <param name="ipVersion">Internet Protocol version.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KTcpClient.#ctor(Lmi3d.Zen.Io.KIpVersion,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KTcpClient class.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="ipVersion">Internet Protocol version.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KTcpClient.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KTcpClient class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.Available">
      <summary>Gets the number of bytes currently enqueued and available for reading.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KTcpClient.Cancel">
      <summary>Cancels any pending I/O operations.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.ClientReadBufferSize">
      <summary>Sets the size of the client read buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.ClientWriteBufferSize">
      <summary>Sets the size of the client write buffer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KTcpClient.Connect(Lmi3d.Zen.Io.KIpAddress,System.Int32,System.Int64)">
      <summary>Connects to a remote end point.</summary>
      <param name="address">The remote IP address.</param>
      <param name="port">The remote port number.</param>
      <param name="timeout">Timeout interval, in microseconds.</param>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if connection not established.</exception>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.EnableSeek">
      <summary>Enables limited support for forward/reverse seek operations. </summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.HasError">
      <summary>Reports whether the client has internal errors that will prevent success of future communication attempts.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.LocalEndPoint">
      <summary>Gets the local end point for a connected client.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.ReadTimeout">
      <summary>Sets the timeout duration (microseconds) for read operations.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.RemoteEndPoint">
      <summary>Gets the remote end point for a connected client.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.Socket">
      <summary>Gets the underlying KSocket object.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.SocketReadBufferSize">
      <summary>Sets the size of the underlying socket read buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.SocketWriteBufferSize">
      <summary>Sets the size of the underlying socket write buffer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KTcpClient.TryConnect(Lmi3d.Zen.Io.KIpAddress,System.Int32,System.Int64)">
      <summary>Attempts to connect to a remote end point.</summary>
      <param name="address">The remote IP address.</param>
      <param name="port">The remote port number.</param>
      <param name="timeout">Timeout interval, in microseconds.</param>
      <returns>true if connection established; otherwise false.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KTcpClient.Wait(System.Int64)">
      <summary>Waits until the client has bytes to read or until the specified timeout period elapses.</summary>
      <param name="timeout">Timeout interval, in microseconds.</param>
      <returns>true if client is ready to read; otherwise false.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpClient.WriteTimeout">
      <summary>Sets the timeout duration (microseconds) for write operations.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Io.KTcpServer">
      <summary>Represents a TCP server. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KTcpServer.#ctor(Lmi3d.Zen.Io.KIpVersion)">
      <summary>Initializes a new instance of the KTcpServer class.</summary>
      <param name="ipVersion">Internet Protocol version.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KTcpServer.#ctor(Lmi3d.Zen.Io.KIpVersion,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KTcpServer class.</summary>
      <param name="allocator">Memory allocator</param>
      <param name="ipVersion">Internet Protocol version.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KTcpServer.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KTcpServer class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KTcpServer.Accept(System.Int64)">
      <summary>Blocks until an incoming connection is established, or the specified timeout interval elapses.</summary>
      <param name="timeout">The timeout interval.</param>
      <returns>KTcpClient object representing the newly-established connection, or null.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KTcpServer.Accept(System.Int64,Lmi3d.Zen.KAlloc)">
      <summary>Blocks until an incoming connection is established, or the specified timeout interval elapses.</summary>
      <param name="allocator">Memory allocator for the accepted socket.</param>
      <param name="timeout">The timeout interval.</param>
      <returns>KTcpClient object representing the newly-established connection, or null.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpServer.AddressReuseEnabled">
      <summary>Sets a value that determines whether a local end point can be reused within a short period of time.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpServer.ClientReadBufferSize">
      <summary>Sets the size of the client read buffer for accepted clients.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpServer.ClientWriteBufferSize">
      <summary>Sets the size of the client write buffer for accepted clients.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpServer.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Io.KTcpServer.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KTcpServer.Listen(Lmi3d.Zen.Io.KIpAddress,System.Int32,System.Int64)">
      <summary>Places the server into the listening state, to monitor for incoming connection requests.</summary>
      <param name="address">A local IP address to which the server should bind, or KIpAddress.Any().</param>
      <param name="port">A local port number to which the server should bind, or KIpEndPoint.AnyPort.</param>
      <param name="backlog">The maximum number of pending connection requests to enqueue.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpServer.LocalEndPoint">
      <summary>Gets the local end point for a listening server.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpServer.Socket">
      <summary>Gets the underlying KSocket object.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpServer.SocketReadBufferSize">
      <summary>Sets the size of the underlying socket read buffer for accepted clients.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KTcpServer.SocketWriteBufferSize">
      <summary>Sets the size of the underlying socket write buffer for accepted clients.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Io.KUdpClient">
      <summary>Represents a UDP client. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KUdpClient.#ctor(Lmi3d.Zen.Io.KIpVersion)">
      <summary>Initializes a new instance of the KUdpClient class.</summary>
      <param name="ipVersion">Internet Protocol version.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KUdpClient.#ctor(Lmi3d.Zen.Io.KIpVersion,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KUdpClient class.</summary>
      <param name="allocator">Memory allocator (or kNULL for default).</param>
      <param name="ipVersion">Internet Protocol version.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KUdpClient.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KUdpClient class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KUdpClient.AddressReuseEnabled">
      <summary>Enables or disables reuse of a local end point within a short period of time.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KUdpClient.Bind(Lmi3d.Zen.Io.KIpAddress,System.Int32)">
      <summary>Binds the client to a local IP address and/or port.</summary>
      <param name="address">A local IP address, or KIpAddress.Any().</param>
      <param name="port">A local port number, or KIpEndPoint.AnyPort.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KUdpClient.BroadcastEnabled">
      <summary>Enables or disables broadcasting.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KUdpClient.Clear">
      <summary>Clears the internal write buffer state.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KUdpClient.ClientReadBufferSize">
      <summary>Sets the size of the client read buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KUdpClient.ClientWriteBufferSize">
      <summary>Sets the size of the client write buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KUdpClient.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Io.KUdpClient.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Io.KUdpClient.LocalEndPoint">
      <summary>Gets the local end point for a bound client.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KUdpClient.ReadFrom(Lmi3d.Zen.Io.KIpEndPoint@,System.Byte[],System.Int64)">
      <summary>Blocks until a datagram is received into the provided buffer (or until a timeout occurs).</summary>
      <param name="endPoint">Receives the end point of the sender.</param>
      <param name="buffer">Destination for received bytes.</param>
      <param name="capacity">Maximum count of bytes to read.</param>
      <param name="timeout">Timeout, in microseconds.</param>
      <returns>Size of the received datagram.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KUdpClient.ReadFrom(Lmi3d.Zen.Io.KIpEndPoint@,System.IntPtr,System.Int32,System.Int64)">
      <summary>Blocks until a datagram is received into the provided buffer (or until a timeout occurs).</summary>
      <param name="endPoint">Receives the end point of the sender.</param>
      <param name="buffer">Destination for received bytes.</param>
      <param name="capacity">Maximum count of bytes to read.</param>
      <param name="timeout">Timeout, in microseconds.</param>
      <returns>Size of the received datagram.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KUdpClient.Receive(Lmi3d.Zen.Io.KIpEndPoint@,System.Int64)">
      <summary>Blocks until a datagram is received into the client read buffer (or until a timeout occurs).</summary>
      <param name="endPoint">Receives the end point of the sender.</param>
      <param name="timeout">Timeout, in microseconds.</param>
      <returns>Size of the received datagram.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KUdpClient.Send(Lmi3d.Zen.Io.KIpAddress,System.Int32,System.Int64,System.Boolean)">
      <summary>Blocks until the datagram in client's internal write buffer is written to the underlying socket
(or until a timeout occurs).</summary>
      <param name="address">IP address of the recipient.</param>
      <param name="port">Port number of the recipient.</param>
      <param name="timeout">Timeout, in microseconds.</param>
      <param name="clear">Specifies whether the internal write buffer pointer is updated.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KUdpClient.Socket">
      <summary>Gets the underlying KSocket object.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KUdpClient.SocketReadBufferSize">
      <summary>Sets the size of the underlying socket read buffer.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Io.KUdpClient.SocketWriteBufferSize">
      <summary>Sets the size of the underlying socket write buffer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KUdpClient.WriteTo(Lmi3d.Zen.Io.KIpAddress,System.Int32,System.Byte[],System.Int32,System.Int64)">
      <summary>Blocks until the provided datagram is written to the underlying socket (or until a timeout occurs).</summary>
      <param name="buffer">Bytes to be written.</param>
      <param name="size">Count of bytes to be written.</param>
      <param name="address">IP address of the recipient.</param>
      <param name="port">Port number of the recipient.</param>
      <param name="timeout">Timeout, in microseconds.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KUdpClient.WriteTo(Lmi3d.Zen.Io.KIpAddress,System.Int32,System.IntPtr,System.Int32,System.Int64)">
      <summary>Blocks until the provided datagram is written to the underlying socket (or until a timeout occurs).</summary>
      <param name="buffer">Bytes to be written.</param>
      <param name="size">Count of bytes to be written.</param>
      <param name="address">IP address of the recipient.</param>
      <param name="port">Port number of the recipient.</param>
      <param name="timeout">Timeout, in microseconds.</param>
    </member>
    <member name="T:Lmi3d.Zen.Io.KWebSocket">
      <summary>Represents a websocket client. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.#ctor">
      <summary>Initializes a new instance of the KWebSocket class.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.#ctor(Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KWebSocket class.</summary>
      <param name="allocator">Memory allocator</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KWebSocket class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.Cancel">
      <summary>Cancels any pending I/O operations. </summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.Close(System.Void*)">
      <summary>Closes the WebSocket connection.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.Connect(Lmi3d.Zen.Io.KIpAddress,System.UInt32,System.String,System.String,System.Int64)">
      <summary>Connects a WebSocket to an HTTP server.</summary>
      <param name="address">HTTP server address.</param>
      <param name="port">HTTP server port number.</param>
      <param name="host">HTTP request host (distinguishes between multiple hosts at same address).</param>
      <param name="uri">HTTP request URI.</param>
      <param name="timeout">Timeout, in microseconds.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KWebSocket.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Io.KWebSocket.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Io.KWebSocket.LastPong">
      <summary>Reports the time at which the most recent pong message arrived.</summary>
      <returns>Time at which last pong arrived, in microseconds (or 0, if never).</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.ReadMessage(Lmi3d.Zen.Io.KMemory,System.UInt64)">
      <summary>Blocks until a whole message has been read (or until a timeout occurs).</summary>
      <param name="memory">Memory stream object that will receive message data.</param>
      <param name="timeout">Timeout, in microseconds.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.Receive(System.Int64)">
      <summary>Blocks until a new message is available for reading.</summary>
      <param name="timeout">Timeout, in microseconds.</param>
    </member>
    <member name="P:Lmi3d.Zen.Io.KWebSocket.ReceiveType">
      <summary>Reports the data type of the most recently received data message. </summary>
      <returns>Frame type of the last received message.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.Send">
      <summary>Sends any buffered data and ends the current message.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.SendPing">
      <summary>Sends a ping message.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.SendType">
      <summary>Reports the message data type currently used for sending.</summary>
      <returns>Frame type used for sending.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.SetReadBuffers(System.Int64,System.Int64)">
      <summary>Sets the size of read buffers.</summary>
      <param name="socketSize">Size of the read buffer maintained by the underlying socket (-1 to leave unchanged).</param>
      <param name="clientSize">Size of the read buffer maintained by the client object (-1 to leave unchanged).</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.SetSendType(Lmi3d.Zen.Io.KWebSocketDataType)">
      <summary>Sets the data transfer type used for send operations. </summary>
      <param name="type">Frame type.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.SetWriteBuffers(System.Int64,System.Int64)">
      <summary>Sets the size of write buffers.</summary>
      <param name="socketSize">Size of the write buffer maintained by the underlying socket (-1 to leave unchanged).</param>
      <param name="clientSize">Size of the write buffer maintained by the client object (-1 to leave unchanged).</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.WriteMessage(System.Byte[],System.Int32)">
      <summary>Writes a complete WebSocket message.</summary>
      <param name="buffer">Bytes to be written.</param>
      <param name="size">Count of bytes to be written.</param>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocket.WriteMessage(System.IntPtr,System.Int64)">
      <summary>Writes a complete WebSocket message.</summary>
      <param name="buffer">Bytes to be written.</param>
      <param name="size">Count of bytes to be written.</param>
    </member>
    <member name="T:Lmi3d.Zen.Io.KWebSocketDataType">
      <summary>Represents frame type for WebSockets.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocketDataType.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Io.KWebSocketDataType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KWebSocketDataType.DATA_TYPE_BINARY">
      <summary>Binary frame type.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KWebSocketDataType.DATA_TYPE_NULL">
      <summary>Unknown frame type.</summary>
    </member>
    <member name="F:Lmi3d.Zen.Io.KWebSocketDataType.DATA_TYPE_UTF8">
      <summary>UTF-8 frame type.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Io.KWebSocketDataType.Equals(Lmi3d.Zen.Io.KWebSocketDataType)"></member>
    <member name="M:Lmi3d.Zen.Io.KWebSocketDataType.Equals(System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KWebSocketDataType.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Io.KWebSocketDataType.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Io.KWebSocketDataType.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Io.KWebSocketDataType.op_Equality(Lmi3d.Zen.Io.KWebSocketDataType,Lmi3d.Zen.Io.KWebSocketDataType)"></member>
    <member name="M:Lmi3d.Zen.Io.KWebSocketDataType.op_Equality(Lmi3d.Zen.Io.KWebSocketDataType,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KWebSocketDataType.op_Implicit(Lmi3d.Zen.Io.KWebSocketDataType)~System.Int32"></member>
    <member name="M:Lmi3d.Zen.Io.KWebSocketDataType.op_Implicit(System.Int32)~Lmi3d.Zen.Io.KWebSocketDataType"></member>
    <member name="M:Lmi3d.Zen.Io.KWebSocketDataType.op_Inequality(Lmi3d.Zen.Io.KWebSocketDataType,Lmi3d.Zen.Io.KWebSocketDataType)"></member>
    <member name="M:Lmi3d.Zen.Io.KWebSocketDataType.op_Inequality(Lmi3d.Zen.Io.KWebSocketDataType,System.Int32)"></member>
    <member name="M:Lmi3d.Zen.Io.KWebSocketDataType.ToString"></member>
    <member name="P:Lmi3d.Zen.Io.KWebSocketDataType.Value"></member>
    <member name="T:Lmi3d.Zen.Threads.KAtomic32s">
      <summary>Represents a 32-bit, atomically-accessed, signed integer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KAtomic32s.#ctor(System.Int32)">
      <summary>Initializes a new KAtomic32s instance with the specified value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KAtomic32s.CompareExchange(System.Int32,System.Int32)">
      <summary>Conditionally exchanges the value of the atomic variable.</summary>
      <param name="oldValue">Previous atomic value.</param>
      <param name="value">New atomic value.</param>
      <returns>true if the exchange succeeded.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KAtomic32s.Decrement">
      <summary>Decrements the atomic variable.</summary>
      <returns>New atomic value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KAtomic32s.Exchange(System.Int32)">
      <summary>Exchanges the value of the atomic variable.</summary>
      <param name="value">New atomic value.</param>
      <returns>Previous atomic value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KAtomic32s.Get">
      <summary>Gets the current value of the atomic variable.</summary>
      <returns>Atomic value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KAtomic32s.Increment">
      <summary>Increments the atomic variable.</summary>
      <returns>New atomic value.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Threads.KAtomicPointer">
      <summary>Represents an atomically-accessed pointer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KAtomicPointer.#ctor(System.IntPtr)">
      <summary>Initializes a new KAtomicPointer instance with the specified value.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KAtomicPointer.CompareExchange(System.IntPtr,System.IntPtr)">
      <summary>Conditionally exchanges the value of the atomic pointer.</summary>
      <param name="oldValue">Previous atomic value.</param>
      <param name="value">New atomic value.</param>
      <returns>Previous atomic value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KAtomicPointer.Exchange(System.IntPtr)">
      <summary>Exchanges the value of the atomic pointer.</summary>
      <param name="value">New atomic value.</param>
      <returns>Previous atomic value.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KAtomicPointer.Get">
      <summary>Gets the current value of the atomic pointer.</summary>
      <returns>Atomic value.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Threads.KLock">
      <summary> Represents a recursive, mutual exclusion lock. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KLock.#ctor">
      <summary>Initializes a new instance of the KLock class.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KLock.#ctor(Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KLock class.</summary>
      <param name="allocator">Memory allocator.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KLock.#ctor(Lmi3d.Zen.KBool)">
      <summary>Initializes a new instance of the KLock class.</summary>
      <param name="isWaitable">Should lock support waiting?</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KLock.#ctor(Lmi3d.Zen.KBool,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KLock class.</summary>
      <param name="allocator">Memory allocator.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KLock.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KLock class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KLock.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Threads.KLock.Enter">
      <summary>Blocks until exclusive ownership of the lock is acquired.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KLock.Enter(Lmi3d.Zen.K64u)">
      <summary>Blocks until exclusive ownership of the lock is acquired or the timeout interval has elapsed.</summary>
      <param name="timeout">Timeout in microseconds.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KLock.Exit">
      <summary>Relinquishes ownership of the lock.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KLock.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Threads.KMsgQueue">
      <summary>Represents a synchronized FIFO queue with an optional maximum size or count capacity.  
<para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.#ctor(Lmi3d.Zen.KType)">
      <summary>Constructs a kMsgQueue object.</summary>
      <param name="itemType">Type of list element (must be a reference type).</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.#ctor(Lmi3d.Zen.KType,Lmi3d.Zen.KAlloc)">
      <summary>Constructs a kMsgQueue object.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="itemType">Type of list element (must be a reference type).</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.#ctor(Lmi3d.Zen.KType,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Threads.KMsgQueue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KMsgQueue class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Threads.KMsgQueue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.Add``1(``0)">
      <summary>Adds an item to the queue.</summary>
      <param name="item">Item to be added.</param>
      <typeparam name="T">Type of item to be added to the queue.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.Add``1(``0,System.Nullable{Lmi3d.Zen.KRefStyle})"></member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.Clear">
      <summary>Removes all items from the queue.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.Clear(System.Nullable{Lmi3d.Zen.KRefStyle})"></member>
    <member name="P:Lmi3d.Zen.Threads.KMsgQueue.Count">
      <summary>Gets the current count of queue items.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KMsgQueue.DataSize">
      <summary>Gets the current amount of data stored in the queue (in bytes).</summary>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KMsgQueue.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Threads.KMsgQueue.DropCount">
      <summary>Gets the count of dropped items.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KMsgQueue.ItemType">
      <summary>Gets the type of element stored in the queue.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KMsgQueue.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Threads.KMsgQueue.MaxCount">
      <summary>Gets or sets the maximum count of items retained by the queue..</summary>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KMsgQueue.MaxSize">
      <summary>Gets or sets the maximum amount of data (byte) retained by the queue.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.Remove``1(System.Int64)">
      <summary>Removes an item from the queue.</summary>
      <param name="timeout">Timeout (microseconds).</param>
      <typeparam name="T">Type of item to be removed from the queue.</typeparam>
      <returns>The removed item.</returns>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if a timeout occurs.</exception>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.Remove``1(System.Int64,System.Nullable{Lmi3d.Zen.KRefStyle})"></member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.Reserve(System.Int64)">
      <summary>Reserves capacity for the specified number of items.</summary>
      <param name="count">Count of items for which to reserve capacity.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.SetDropHandler(System.EventHandler{Lmi3d.Zen.Threads.KMsgQueueDropArgs})">
      <summary>Sets a handler for dropped items.</summary>
      <param name="dropHandler">Item drop handler (or null to clear the drop handler).</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueue.TryRemove``1(``0@,System.Int64)">
      <summary>Attempst to remove an item from the queue.</summary>
      <param name="timeout">Timeout (microseconds).</param>
      <param name="removedItem">The removed item, if successful.</param>
      <typeparam name="T">Type of item to be removed from the queue.</typeparam>
      <returns>true if an item was successfully removed; otherwise false.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Threads.KMsgQueueDropArgs">
      <summary>Represents arguments passed to a KMsgQueue drop handler.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KMsgQueueDropArgs.GetItem``1">
      <summary>Gets the dropped item.</summary>
      <typeparam name="T">Type of item to be accessed.</typeparam>
      <returns>Dropped item.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Threads.KParallel">
      <summary>KParallel class allows to operate on some data using a fixed numbers of threads.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KParallel.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KParallel class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KParallel.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KParallel class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KParallel.BeginExecute(System.Action`3,System.Char,Lmi3d.Zen.KSize)"></member>
    <member name="M:Lmi3d.Zen.Threads.KParallel.BeginIndex(Lmi3d.Zen.KSize,Lmi3d.Zen.KSize,Lmi3d.Zen.KSize,Lmi3d.Zen.KSize)">
      <summary> Helper method that can be used to calculate the data start index within the callback.</summary>
      <param name="threadCount">The total thread count.</param>
      <param name="index">Index of current processing callback (0..threadCount-1).</param>
      <param name="start">First index of the overall range to be collectively processed.</param>
      <param name="elementCount">Total count of elements to be collectively processed</param>
      <returns>Index of first element to be processed in this callback.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KParallel.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Threads.KParallel.EndExecute(Lmi3d.Zen.KPointer)">
      <summary>Blocks until execution of the specified kParallel transaction is complete. </summary>
      <param name="transaction">Transaction handle emitted by BeginExecute.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KParallel.EndIndex(Lmi3d.Zen.KSize,Lmi3d.Zen.KSize,Lmi3d.Zen.KSize,Lmi3d.Zen.KSize)">
      <summary> Helper method that can be used to calculate the data end index within the callback. </summary>
      <param name="threadCount">The total thread count.</param>
      <param name="index">Index of current processing callback (0..threadCount-1).</param>
      <param name="start">First index of the overall range to be collectively processed.</param>
      <param name="elementCount">Total count of elements to be collectively processed</param>
      <returns>One greater than the index of the last element to be processed in this callback.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KParallel.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Threads.KPeriodic">
      <summary>Provides a periodic method call. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KPeriodic.#ctor">
      <summary>Initializes a new instance of the KPeriodic class.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KPeriodic.#ctor(Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KPeriodic class.</summary>
      <param name="allocator">Memory allocator.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KPeriodic.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KPeriodic class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KPeriodic.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Threads.KPeriodic.Enabled">
      <summary>Reports whether periodic timer callbacks are currently enabled.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KPeriodic.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Threads.KPeriodic.Start(System.Int64,System.Action)">
      <summary>Starts callbacks at the specified period.</summary>
      <param name="period">Callback period, in microseconds.</param>
      <param name="handler">Callback handler.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KPeriodic.Stop">
      <summary>Stops timer callbacks.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Threads.KSemaphore">
      <summary>Represents a semaphore. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KSemaphore.#ctor">
      <summary>Initializes a new instance of the KSemaphore class.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KSemaphore.#ctor(System.Int64)">
      <summary>Initializes a new instance of the KSemaphore class.</summary>
      <param name="initialCount">Initial value of the semaphore.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KSemaphore.#ctor(System.Int64,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KSemaphore class.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="initialCount">Initial value of the semaphore.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KSemaphore.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KSemaphore class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KSemaphore.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Threads.KSemaphore.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Threads.KSemaphore.Post">
      <summary>Increments the semaphore.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KSemaphore.Wait(System.Int64)">
      <summary>Waits until the semaphore can be decremented or the timeout interval has elapsed.</summary>
      <param name="timeout">Timeout in microseconds.</param>
      <returns>true if the semaphore was decremented; otherwise false.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Threads.KThread">
      <summary>Represents a thread. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KThread.#ctor">
      <summary>Initializes a new instance of the KThread class.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KThread.#ctor(Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KThread class.</summary>
      <param name="allocator">Memory allocator.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KThread.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KThread class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KThread.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Threads.KThread.Join(System.Int64)">
      <summary>Blocks until the thread exits, or until a timeout occurs.</summary>
      <param name="timeout">Timeout in microseconds.</param>
      <returns>Status code representing the result from thread execution.</returns>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if a timeout occurrs.</exception>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KThread.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Threads.KThread.Sleep(System.Int64)">
      <summary>Causes the current thread to yield control for approximately the specified duration.</summary>
      <param name="duration">Approximate time to sleep, in microseconds.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KThread.SleepAtLeast(System.Int64)">
      <summary>Causes the current thread to yield control for at least the specified duration.</summary>
      <param name="duration">Minimum time to sleep, in microseconds.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KThread.Start(System.Action)">
      <summary>Begins executing a thread using the specified callback method.</summary>
      <param name="handler">The thread entry handler.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KThread.TryJoin(System.Int64)">
      <summary>Blocks until the thread exits, or until a timeout occurs.</summary>
      <param name="timeout">Timeout in microseconds.</param>
      <returns>true if the thread was joined; otherwise false.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KThread.TryJoin(System.Int64,Lmi3d.Zen.KStatus@)">
      <summary>Blocks until the thread exits, or until a timeout occurs.</summary>
      <param name="timeout">Timeout in microseconds.</param>
      <param name="exitCode">Status code representing the result from thread execution.</param>
      <returns>true if the thread was joined; otherwise false.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Threads.KThreadPool">
      <summary>kThreadPool class allows to operate with a fixed numbers of threads.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KThreadPool.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KThreadPool class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KThreadPool.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KThreadPool class with the specified Zen object handle.</summary>
      <param name="refStyle">RefStyle for this object.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KThreadPool.#ctor(System.UInt64)">
      <summary>Constructs a kThreadPool object.</summary>
      <param name="threadCount">Number of threads in the pool.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KThreadPool.BeginExecute(System.Action)"></member>
    <member name="M:Lmi3d.Zen.Threads.KThreadPool.BeginExecute(System.Action,Lmi3d.Zen.KPointer@)"></member>
    <member name="P:Lmi3d.Zen.Threads.KThreadPool.Count"></member>
    <member name="P:Lmi3d.Zen.Threads.KThreadPool.Default"></member>
    <member name="P:Lmi3d.Zen.Threads.KThreadPool.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Threads.KThreadPool.EndExecute(Lmi3d.Zen.KPointer,System.Int64)"></member>
    <member name="P:Lmi3d.Zen.Threads.KThreadPool.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Threads.KTimer">
      <summary>Represents an interval timer. Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KTimer.#ctor">
      <summary>Initializes a new instance of the KTimer class.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KTimer.#ctor(Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KTimer class.</summary>
      <param name="allocator">Memory allocator.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KTimer.#ctor(Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KTimer class.</summary>
      <param name="refStyle">Ref style.</param>
      <param name="allocator">Memory allocator.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KTimer.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KTimer class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KTimer.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KTimer class.</summary>
      <param name="refStyle">Ref style.</param>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KTimer.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Threads.KTimer.Elapsed">
      <summary>Gets the duration, in microseconds, for which the timer has been running.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KTimer.IsExpired">
      <summary>Reports whether a count-down timer has expired.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KTimer.IsStarted">
      <summary>Reports whether a timer has been started.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KTimer.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Threads.KTimer.Now">
      <summary>Provides the current time in microseconds.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Threads.KTimer.Remaining">
      <summary>Gets the remaining time, in microseconds, for a countdown timer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KTimer.Start">
      <summary>Starts the timer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KTimer.Start(System.Int64)">
      <summary>Starts the timer with a countdown amount.</summary>
      <param name="totalTime">Total time to count down, in microseconds.</param>
    </member>
    <member name="M:Lmi3d.Zen.Threads.KTimer.Stop">
      <summary>Stops the timer.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Utils.KBackTrace">
      <summary>Represents a snapshot of the active functions on a call stack.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KBackTrace.#ctor(Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KBackTrace class.</summary>
      <param name="allocator">Memory allocator (or null for default).</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KBackTrace.#ctor(Lmi3d.Zen.KAlloc,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KBackTrace class.</summary>
      <param name="refStyle">Ref style.</param>
      <param name="allocator">Memory allocator (or null for default).</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KBackTrace.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KBackTrace class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KBackTrace.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KBackTrace class with the specified Zen object handle.</summary>
      <param name="refStyle">Ref style.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KBackTrace.Capture(System.Int64)">
      <summary>Captures back trace information.</summary>
      <param name="skip">Count of recent functions to omit from trace.</param>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KBackTrace.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Utils.KBackTrace.Depth">
      <summary>Count of function calls in the captured trace.</summary>
      <returns>Count of function calls in trace.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KBackTrace.Describe(Lmi3d.Zen.KAlloc)">
      <summary>Creates a list of descriptive strings, one for each line in the trace.</summary>
      <param name="allocator">Memory allocator for trace list (or null for default).</param>
      <returns>List of descriptive strings.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KBackTrace.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Utils.KDebugAlloc">
      <summary>Debug memory allocator that can track allocations and report leaks. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KDebugAlloc.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KDebugAlloc class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KDebugAlloc.#ctor(System.String)">
      <summary>Initializes a new instance of the KDebugAlloc class.</summary>
      <param name="name">Descriptive name for this memory allocator.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KDebugAlloc.#ctor(System.String,Lmi3d.Zen.KAlloc,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KDebugAlloc class.</summary>
      <param name="allocator">Memory allocator to use for internal allocations.</param>
      <param name="name">Descriptive name for this memory allocator.</param>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KDebugAlloc.Allocated">
      <summary>Gets the total amount of memory that has been allocated and not yet freed.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KDebugAlloc.Checkpoint">
      <summary>Gets a memory checkpoint value, used in conjunction with allocation logging methods.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KDebugAlloc.Clear">
      <summary>Clears all outstanding allocations (resets allocator). </summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KDebugAlloc.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Utils.KDebugAlloc.DetectLeakedAssemblyObjects(System.Int64,Lmi3d.Zen.KAssembly)">
      <summary>Makes note of outstanding allocations that appear to be objects associated with the specified Zen assembly.</summary>
      <param name="since">Memory checkpoint (or zero for beginning).</param>
      <param name="assembly">Zen (native) assembly associated with objects.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KDebugAlloc.DetectLeakedObjects(System.Int64)">
      <summary>Makes note of outstanding allocations that appear to be objects from any currently-loaded assembly.</summary>
      <param name="since">Memory checkpoint (or zero for beginning).</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KDebugAlloc.GetAllocations(System.Int64,Lmi3d.Zen.KAlloc)">
      <summary>Gets a list of all outstanding memory allocations performed after the given checkpoint.</summary>
      <param name="since">Memory checkpoint (or zero for beginning).</param>
      <param name="allocator">Allocator for history list (or null for default).</param>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KDebugAlloc.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Utils.KDebugAlloc.LogAllocations(System.Int64)">
      <summary>Logs all outstanding memory allocations performed after the given checkpoint (using KUtils.Log).</summary>
      <param name="since">Memory checkpoint (or zero for beginning).</param>
    </member>
    <member name="T:Lmi3d.Zen.Utils.KDebugAllocation">
      <summary>Allocation record used by KDebugAlloc.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KDebugAllocation.Data">
      <summary>Gets user data pointer.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KDebugAllocation.Equals(Lmi3d.Zen.Utils.KDebugAllocation)"></member>
    <member name="M:Lmi3d.Zen.Utils.KDebugAllocation.Equals(System.Object)"></member>
    <member name="M:Lmi3d.Zen.Utils.KDebugAllocation.GetHashCode"></member>
    <member name="P:Lmi3d.Zen.Utils.KDebugAllocation.Index">
      <summary>Gets allocation index.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KDebugAllocation.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Utils.KDebugAllocation.op_Equality(Lmi3d.Zen.Utils.KDebugAllocation,Lmi3d.Zen.Utils.KDebugAllocation)"></member>
    <member name="M:Lmi3d.Zen.Utils.KDebugAllocation.op_Inequality(Lmi3d.Zen.Utils.KDebugAllocation,Lmi3d.Zen.Utils.KDebugAllocation)"></member>
    <member name="P:Lmi3d.Zen.Utils.KDebugAllocation.Size">
      <summary>Gets size of memory allocation.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KDebugAllocation.Trace">
      <summary>Gets backtrace output at point of allocation.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Utils.KDynamicLib">
      <summary>Represents a dynamically loaded library. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KDynamicLib.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KDynamicLib class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KDynamicLib.#ctor(System.String)">
      <summary>Initializes a new instance of the KDynamicLib class.</summary>
      <param name="path">Path to the dynamic library.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KDynamicLib.#ctor(System.String,Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KDynamicLib class.</summary>
      <param name="allocator">Memory allocator.</param>
      <param name="path">Path to the dynamic library.</param>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KDynamicLib.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Utils.KDynamicLib.FindFunction(System.String)">
      <summary>Resolves a function pointer by name from the dynamic library.</summary>
      <param name="name">Function name.</param>
      <returns>Function pointer, or null pointer if not found.</returns>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if not found.</exception>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KDynamicLib.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Utils.KDynamicLib.TryFindFunction(System.String)">
      <summary>Resolves a function pointer by name from the dynamic library.</summary>
      <param name="name">Function name.</param>
      <returns>Function pointer, or null pointer if not found.</returns>
    </member>
    <member name="T:Lmi3d.Zen.Utils.KEvent">
      <summary>Represents a list of native callbacks. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KEvent.#ctor">
      <summary>Initializes a new instance of the KEvent class.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KEvent.#ctor(Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KEvent class.</summary>
      <param name="allocator">Memory allocator.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KEvent.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KEvent class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KEvent.Add(Lmi3d.Zen.Utils.KEventFx)">
      <summary>Adds a listener to the event.</summary>
      <param name="handler">Handler.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KEvent.Clear">
      <summary>Removes all listeners from the event.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KEvent.Count">
      <summary>Gets count of event listeners.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KEvent.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Utils.KEvent.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Utils.KEvent.Notify(System.IntPtr,System.IntPtr)">
      <summary>Notifies all event listeners.</summary>
      <param name="sender">Sender of event notification.</param>
      <param name="args">Arguments for event notification.</param>
      <exception cref="T:Lmi3d.Zen.KException">Thrown if one or more event handlers generates an exception.</exception>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KEvent.Remove(Lmi3d.Zen.Utils.KEventFx)">
      <summary>Removes a listener from the event.</summary>
      <param name="handler">Handler.</param>
    </member>
    <member name="T:Lmi3d.Zen.Utils.KEventFx">
      <summary>Delegate for a KEvent event handler.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Utils.KObjectPool">
      <summary>Interface for a type that manages a pool of objects. <para /> Requires manual disposal.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KObjectPool.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Utils.KObjectPool.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Utils.KPlugin">
      <summary>Represents a dynamically loaded plugin. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KPlugin.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KPlugin class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KPlugin.#ctor(System.IntPtr,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KPlugin class with the specified Zen object handle.</summary>
      <param name="refStyle">Ref style.</param>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KPlugin.#ctor(System.String)">
      <summary>Initializes a new instance of the KPlugin class.</summary>
      <param name="path">Path to the plugin library.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KPlugin.#ctor(System.String,Lmi3d.Zen.KVersion)">
      <summary>Initializes a new instance of the KPlugin class.</summary>
      <param name="path">Path to the plugin library.</param>
      <param name="requiredPlatform">Required platform version.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KPlugin.#ctor(System.String,Lmi3d.Zen.KVersion,Lmi3d.Zen.KRefStyle)">
      <summary>Initializes a new instance of the KPlugin class.</summary>
      <param name="refStyle">Ref style.</param>
      <param name="path">Path to the plugin library.</param>
      <param name="requiredPlatform">Required platform version.</param>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KPlugin.Assembly">
      <summary>Gets the assembly associated with this plugin.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KPlugin.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Utils.KPlugin.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Utils.KPoolAlloc">
      <summary>Allocates small buffers from larger blocks and/or caches deallocated buffers for later reuse.
<para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KPoolAlloc.#ctor">
      <summary>Initializes a new instance of the KPoolAlloc class.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KPoolAlloc.#ctor(Lmi3d.Zen.KAlloc)">
      <summary>Initializes a new instance of the KPoolAlloc class with the specified underlying allocator.</summary>
      <param name="allocator">Memory allocator.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KPoolAlloc.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KPoolAlloc class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KPoolAlloc.BlockCapacity">
      <summary>Gets or sets the maximum total amount of memory (bytes) that can be used for block-based allocations.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KPoolAlloc.BlockReuseEnabled">
      <summary>Determines whether blocks can be reused between ranks.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KPoolAlloc.BlockSize">
      <summary>Sets or gets the approximate size (bytes) of large memory blocks used to satisfy small memory requests.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KPoolAlloc.CacheCapacity">
      <summary>Sets the maximum total amount of memory that can be used to cache buffers upon deallocation.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KPoolAlloc.Clear">
      <summary>Returns surplus memory to the underlying allocator.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KPoolAlloc.ClearAll">
      <summary>Removes any existing memory reservations and returns surplus memory to the underlying allocator.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KPoolAlloc.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Utils.KPoolAlloc.GetBufferCount(System.Int32)">
      <summary>Reports the total number of memory buffers at the given rank.</summary>
      <param name="rank">Memory rank (base-2 logarithm of memory size).</param>
      <returns>Buffer count.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KPoolAlloc.KTypeId"></member>
    <member name="P:Lmi3d.Zen.Utils.KPoolAlloc.MaxBlockBufferSize">
      <summary>Sets or gets the size limit (bytes) for memory requests that can be allocated from larger blocks.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KPoolAlloc.MaxCachedBufferSize">
      <summary>Sets the size limit for memory requests that can be cached upon deallocation.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KPoolAlloc.Reserve(System.Int64)">
      <summary>Specifies the minimum amount of memory (bytes) that should be set aside for blocks.</summary>
      <param name="size">Amount of memory to reserve, in bytes.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KPoolAlloc.ReserveAt(System.Int32,System.Int64)">
      <summary>Specifies the minimum amount of memory (bytes) that should be set aside at a particular rank.</summary>
      <param name="rank">Memory rank (base-2 logarithm of memory size).</param>
      <param name="size">Amount of memory to reserve, in bytes.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KPoolAlloc.Start">
      <summary>Prepares the allocator for first use.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KPoolAlloc.TotalCapacity">
      <summary>Sets the total amount of memory that can be requested from the underlying allocator.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KPoolAlloc.TotalSize">
      <summary>Reports the current amount of memory drawn from the underlying allocator.</summary>
    </member>
    <member name="T:Lmi3d.Zen.Utils.KRoot`1">
      <summary>This type is obsolete and will be removed in an upcoming release.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KRoot`1.#ctor(`0)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Lmi3d.Zen.Utils.KRoot`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KRoot`1.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Lmi3d.Zen.Utils.KRoot`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KRoot`1.Target"></member>
    <member name="T:Lmi3d.Zen.Utils.KSymbolInfo">
      <summary>Collection of static functions related to debug symbol information.</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KSymbolInfo.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Utils.KSymbolInfo.DescribeFunction(System.IntPtr)">
      <summary>Describes the function at the specified address.</summary>
      <param name="function">Function call address.</param>
      <returns>Function call description.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KSymbolInfo.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Utils.KUserAlloc">
      <summary>Allocates memory from a user-defined memory source. <para /> Requires manual disposal.</summary>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUserAlloc.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the KUserAlloc class with the specified Zen object handle.</summary>
      <param name="handle">Zen object handle.</param>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KUserAlloc.DefaultRefStyle"></member>
    <member name="P:Lmi3d.Zen.Utils.KUserAlloc.KTypeId"></member>
    <member name="T:Lmi3d.Zen.Utils.KUtils">
      <summary>Collection of static utility methods</summary>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KUtils.DefaultRefStyle"></member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.Dispose(Lmi3d.Zen.KObject)">
      <summary>Calls Dispose on an object if the object is not null.</summary>
      <param name="object">Object to be disposed.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.DisposeAll(Lmi3d.Zen.KObject)">
      <summary>Calls DisposeAll on an object if the object is not null.</summary>
      <param name="object">Object to be recursively disposed.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.DisposeAllRef``1(``0@)">
      <summary>Calls DisposeAll on an object if the object is not null and sets the object reference to null.</summary>
      <param name="object">Object to be recursively disposed.</param>
      <typeparam name="T">Object type.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.DisposeRef``1(``0@)">
      <summary>Calls Dispose on an object if the object is not null and sets the object reference to null.</summary>
      <param name="object">Object to be disposed.</param>
      <typeparam name="T">Object type.</typeparam>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.GetRandom32s">
      <summary>Generates a random 32-bit number.</summary>
      <returns>Random 32-bit number.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.GetRandom32u">
      <summary>Generates a random 32-bit number.</summary>
      <returns>Random 32-bit number.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.GetRandom64s">
      <summary>Generates a random 64-bit number.</summary>
      <returns>Random 64-bit number.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.GetRandom64u">
      <summary>Generates a random 64-bit number.</summary>
      <returns>Random 64-bit number.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.GetRandomSize">
      <summary>Generates a random number of type KSize.</summary>
      <returns>Random number.</returns>
    </member>
    <member name="P:Lmi3d.Zen.Utils.KUtils.KTypeId"></member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.Log(System.String)">
      <summary>Writes to logging handler (if registered). The behaviour of the logging handler is system-specific.
The logging handler is guaranteed to be thread-safe.</summary>
      <param name="message">Message to log.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.MemAlloc(System.Int64)">
      <summary>Allocates a block of memory from the application heap.</summary>
      <param name="size">Size of memory to allocate, in bytes.</param>
      <returns>Pointer to the memory block.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.MemAllocZero(System.Int64)">
      <summary>Allocates and zero-initializes block of memory from the application heap.</summary>
      <param name="size">Size of memory to allocate, in bytes.</param>
      <returns>Pointer to the memory block.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.MemCopy(System.IntPtr,System.IntPtr,System.Int64)">
      <summary>Copies memory from a source buffer to a non-overlapping destination.</summary>
      <param name="dest">Destination for the memory copy.</param>
      <param name="src">Source for the memory copy.</param>
      <param name="size">Size of memory block to be copied, in bytes.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.MemEquals(System.IntPtr,System.IntPtr,System.Int64)">
      <summary>Compares one memory buffer with another.</summary>
      <param name="a">First buffer.</param>
      <param name="b">Second buffer.</param>
      <param name="size">Size of memory buffers to be compared, in bytes.</param>
      <returns>true if the memory buffers are equal; otherwise, false.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.MemFree(System.IntPtr)">
      <summary>Frees a block of memory that was allocated using MemAlloc or MemAllocZero.</summary>
      <param name="mem">Pointer to memory to free.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.MemFreeRef(System.IntPtr@)">
      <summary>Frees a block of memory that was allocated using KMemAlloc or KMemAllocZero and resets the memory pointer to null.</summary>
      <param name="mem">Pointer to pointer to memory to free.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.MemMove(System.IntPtr,System.IntPtr,System.Int64)">
      <summary>Copies memory from a source buffer to a potentially-overlapping destination.</summary>
      <param name="dest">Destination for the memory copy.</param>
      <param name="src">Source for the memory copy.</param>
      <param name="size">Size of memory block to be copied, in bytes.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.MemSet(System.IntPtr,System.Byte,System.Int64)">
      <summary>Sets a block of memory to the given byte value.</summary>
      <param name="dest">Destination for the memory set operation.</param>
      <param name="fill">Value to be set.</param>
      <param name="size">Size of memory block to be set, in bytes.</param>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.StrCat(System.IntPtr,System.Int64,System.IntPtr)">
      <summary>Appends UTF-8-encoded characters from source to destination.</summary>
      <param name="dest">Destination string to append to (KChar pointer).</param>
      <param name="capacity">Capacity of destination buffer, in characters.</param>
      <param name="src">Source string to append (KChar pointer).</param>
      <exception cref="T:Lmi3d.Zen.KException">Thrown is destination buffer is insufficient.</exception>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.StrCompare(System.IntPtr,System.IntPtr)">
      <summary>Compares one UTF-8-encoded string to another.</summary>
      <param name="a">First string (KChar pointer).</param>
      <param name="b">Second string (KChar pointer).</param>
      <returns>Positive if a is greater than b, negative if b is greater than a; otherwise zero.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.StrCompareLower(System.IntPtr,System.IntPtr)">
      <summary>Performs a case-insenstive comparison of two UTF-8-encoded strings.</summary>
      <param name="a">First string (KChar pointer).</param>
      <param name="b">Second string (KChar pointer).</param>
      <returns>Positive if a is greater than b, negative if b is greater than a; otherwise zero.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.StrCopy(System.IntPtr,System.Int64,System.IntPtr)">
      <summary>Copies UTF-8-encoded characters from source to destination.</summary>
      <param name="dest">Destination for the string copy (KChar pointer).</param>
      <param name="capacity">Capacity of destination buffer, in characters.</param>
      <param name="src">Source for the string copy (KChar pointer).</param>
      <exception cref="T:Lmi3d.Zen.KException">Thrown is destination buffer is insufficient.</exception>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.StrEquals(System.IntPtr,System.IntPtr)">
      <summary>Tests a pair of UTF-8-encoded character sequences for equality.</summary>
      <param name="a">First string (KChar pointer).</param>
      <param name="b">Second string (KChar pointer).</param>
      <returns>true if the character sequences are equal; otherwise, false.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.StrFindFirst(System.IntPtr,System.IntPtr)">
      <summary>Finds the first occurrence of a character sequence in a UTF-8-encoded string.</summary>
      <param name="str">Input string to be searched (KChar pointer).</param>
      <param name="subStr">Substring to find (KChar pointer).</param>
      <returns>Pointer to first occurrence, or IntPtr.Zero.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.StrFindLast(System.IntPtr,System.IntPtr)">
      <summary>Finds the last occurrence of a character sequence in a UTF-8-encoded string.</summary>
      <param name="str">Input string to be searched (KChar pointer).</param>
      <param name="subStr">Substring to find (KChar pointer).</param>
      <returns>Pointer to last occurrence, or IntPtr.Zero.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.StrLength(System.IntPtr)"></member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.StrnCompare(System.IntPtr,System.IntPtr,Lmi3d.Zen.KSize)">
      <summary>Compares one UTF-8-encoded string to another, only up to a maximum number of characters.</summary>
      <param name="a">First string (KChar pointer).</param>
      <param name="b">Second string (KChar pointer).</param>
      <param name="maxCount">Maximum number of characters to compare.</param>
      <returns>Positive if a is greater than b, negative if b is greater than a; otherwise zero.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.StrnEquals(System.IntPtr,System.IntPtr,Lmi3d.Zen.KSize)">
      <summary>Tests a pair of UTF-8-encoded character sequences for equality, up to a maximum number of characters.</summary>
      <param name="a">First string (KChar pointer).</param>
      <param name="b">Second string (KChar pointer).</param>
      <param name="maxCount">Maximum number of characters to compare.</param>
      <returns>true if the character sequences are equal; otherwise, false.</returns>
    </member>
    <member name="M:Lmi3d.Zen.Utils.KUtils.StrToLower(System.IntPtr)">
      <summary>Converts UTF-8-encoded characters in the given sequence to lower case.</summary>
      <param name="str">Character sequence to convert (KChar pointer).</param>
      <returns>Operation status.</returns>
    </member>
  </members>
</doc>