<?xml version="1.0"?><doc><assembly><name>Cognex.VisionPro.Caliper</name></assembly><members><member name="T:Cognex.VisionPro.Exceptions.CogCaliperUnknownScorerException"><summary>The exception that is thrown when a caliper's Execute method enounters an unrecognized scoring object in either the <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.SingleEdgeScorers" /> collection or the <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.TwoEdgeScorers" /> collection.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogCaliperNoScorersException"><summary>The exception that is thrown when a caliper's Execute method finds no scoring objects in either the <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.SingleEdgeScorers" /> collection or the <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.TwoEdgeScorers" /> collection (whichever is relevant).  This exception is also thrown if scoring objects are present but all disabled.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogCaliperBadScorerException"><summary>The exception that is thrown when a caliper's Execute method enounters an improper scoring object in either the <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.SingleEdgeScorers" /> collection or the <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.TwoEdgeScorers" /> collection.  Single-edge scorers should not placed in the two-edge scorers collection and vice-versa.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogCaliperImageTooSmallException"><summary>The exception that is thrown when a caliper's Execute method finds that the supplied input image is too small to process.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogFindEdgeNotFoundException"><summary>The exception that is thrown when you attempt to access certain properties of a <see cref="T:Cognex.VisionPro.Caliper.CogFindLineResult" /> or a <see cref="T:Cognex.VisionPro.Caliper.CogFindCircleResult" /> or a <see cref="T:Cognex.VisionPro.Caliper.CogFindEllipseResult" /> while the Found property is false.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogFindShapeNotFoundException"><summary>The exception that is thrown when you attempt to access certain properties of a <see cref="T:Cognex.VisionPro.Caliper.CogFindLineResults" /> or a <see cref="T:Cognex.VisionPro.Caliper.CogFindCircleResults" /> or a <see cref="T:Cognex.VisionPro.Caliper.CogFindEllipseResults" /> object while the found shape is null.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogFindAllCalipersFailedException"><summary>The exception that is thrown when all of the in a shape finding tool fail.  This can happen when the the calipers are too small, or when all of the specified caliper regions fall completely outside of the input image.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogFindInvalidExpectedShapeException"><summary>The exception that is thrown when the expected shape (<see cref="P:Cognex.VisionPro.Caliper.CogFindLine.ExpectedLineSegment" /> or <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.ExpectedCircularArc" /> or <see cref="P:Cognex.VisionPro.Caliper.CogFindEllipse.ExpectedEllipticalArc" /> of a shape finding tool suffers from any of the following: (1) The selected space of the expected shape is not a valid space of the input image; (2) The selected space is a nonqualified space name and more than one instance of it exists in the space tree of the input image; (3) The selected space is not a legal space name.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerStateFlags"><summary>Class that defines the state flags for the ICogCaliperScorer interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogCaliperScorer.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerStateFlags.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliper"><remarks><PARA>Primary interface of a CogCaliper.</PARA></remarks><summary>Edge-based caliper object.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliper.#ctor(Cognex.VisionPro.Caliper.CogCaliper)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliper.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliper.SfEdgeMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EdgeMode may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliper.SfSingleEdgeScorers"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SingleEdgeScorers may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliper.SfTwoEdgeScorers"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TwoEdgeScorers may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliper.SfEdge0Position"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Edge0Position may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliper.SfEdge1Position"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Edge1Position may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliper.SfEdge0Polarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Edge0Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliper.SfEdge1Polarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Edge1Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliper.SfFilterHalfSizeInPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FilterHalfSizeInPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliper.SfContrastThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ContrastThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliper.SfMaxResults"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MaxResults may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliper.SfSamplingMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SamplingMode may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliper.SamplingMode"><summary>How to perform affine sampling.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliper.MaxResults"><summary>Max number of results to find.</summary><remarks><PARA>The maximum number of results to find. You can specify a value of 0 for this property 
	if you only want to compute the projection and filtered images.</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Caliper.CogCaliper.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliper_MaxResults--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliper.SfMaxResults" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 0.</para></exception><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Working with a CogCaliperTool object
Dim myCaltool As New CogCaliperTool

' Allow the tool to locate and score two results 
myCaltool.RunParams.MaxResults = 2
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

// Working with a CogCaliperTool object
CogCaliperTool myCaltool = new CogCaliperTool();

// Allow the tool to locate and score two results 
myCaltool.RunParams.MaxResults = 2;
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogCaliper.ContrastThreshold"><summary>Minimum contrast required for an edge to be considered during the scoring phase.</summary><event cref="E:Cognex.VisionPro.Caliper.CogCaliper.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliper_ContrastThreshold--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliper.SfContrastThreshold" /></li></ul></event><remarks><PARA>
The minimum contrast required for an edge to be considered during the scoring phase.
The contrast of an edge is the absolute difference in average pixel values across the edge, in
the range 0 through 255. Only edges with contrast greater than the value you specify are
considered by the tool.
</PARA><DEFAULT>5.0</DEFAULT></remarks><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Working with a CogCaliperTool object
Dim myCaltool As New CogCaliperTool

' Specify a higher contrast threshold to filter extraneous low-contrast edges 
myCaltool.RunParams.ContrastThreshold = 30
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

// Working with a CogCaliperTool object
CogCaliperTool myCaltool = new CogCaliperTool();

// Specify a higher contrast threshold to filter extraneous low-contrast edges 
myCaltool.RunParams.ContrastThreshold = 30;
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogCaliper.FilterHalfSizeInPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 1.</para></exception><summary>Filter half size in pixels.</summary><event cref="E:Cognex.VisionPro.Caliper.CogCaliper.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliper_FilterHalfSizeInPixels--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliper.SfFilterHalfSizeInPixels" /></li></ul></event><remarks><PARA><see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="filter_size">Filter half size</see> in pixels.</PARA><PARA>In general, specify a filter half size that is approximately equal to one half of the edge width.</PARA><DEFAULT>2</DEFAULT></remarks><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Working with a CogCaliperTool object
Dim myCaltool As New CogCaliperTool

' Specify a filter half size for finding broad edges 
myCaltool.RunParams.FilterHalfSizeInPixels = 6
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

// Working with a CogCaliperTool object
CogCaliperTool myCaltool = new CogCaliperTool();

// Specify a filter half size for finding broad edges 
myCaltool.RunParams.FilterHalfSizeInPixels = 6;

    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogCaliper.Edge1Polarity"><event cref="E:Cognex.VisionPro.Caliper.CogCaliper.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliper_Edge1Polarity--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliper.SfEdge1Polarity" /></li></ul></event><summary>Desired polarity of second edge. Note that this only applies if EdgeMode = cogCaliperEdgeModePair.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is
	not a member of <see cref="T:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants" />.</para></exception><remarks><PARA>	The desired polarity of second edge. (This property is only
	meaningful if <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.EdgeMode" /> is 
	<see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">Pair</see>.)
	
	Specify 
	<see cref="T:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants">DarkToLight</see> for a
	dark-to-light edge, <see cref="T:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants">LightToDark</see> 
	for a light-to-dark edge, and 
	<see cref="T:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants">DontCare</see> to accept any
	edge.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants">DontCare</see></DEFAULT></remarks><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Working with a CogCaliperTool object
Dim myCaltool As New CogCaliperTool

' Configure edge polarity, position, and mode to find a light-on-dark, 80-pixel wide object 
myCaltool.RunParams.Edge0Polarity = CogCaliperPolarityConstants.DarkToLight
myCaltool.RunParams.Edge1Polarity = CogCaliperPolarityConstants.LightToDark
myCaltool.RunParams.EdgeMode = CogCaliperEdgeModeConstants.Pair
myCaltool.RunParams.Edge0Position = -40
myCaltool.RunParams.Edge1Position = 40
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

// Working with a CogCaliperTool object
CogCaliperTool myCaltool = new CogCaliperTool();

// Configure edge polarity, position, and mode to find a light-on-dark, 80-pixel wide object 
myCaltool.RunParams.Edge0Polarity = CogCaliperPolarityConstants.DarkToLight;
myCaltool.RunParams.Edge1Polarity = CogCaliperPolarityConstants.LightToDark;
myCaltool.RunParams.EdgeMode = CogCaliperEdgeModeConstants.Pair;
myCaltool.RunParams.Edge0Position = -40;
myCaltool.RunParams.Edge1Position = 40;
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogCaliper.Edge0Polarity"><summary>Desired polarity of first edge.</summary><event cref="E:Cognex.VisionPro.Caliper.CogCaliper.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliper_Edge0Polarity--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliper.SfEdge0Polarity" /></li></ul></event><remarks><PARA>The desired polarity of first edge. Specify 
	<see cref="T:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants">DarkToLight</see> for a
	dark-to-light edge, <see cref="T:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants">LightToDark</see> 
	for a light-to-dark edge, and 
	<see cref="T:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants">DontCare</see> to accept any
	edge.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants">DontCare</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is
	not a member of <see cref="T:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants" />.</para></exception><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Working with a CogCaliperTool object
Dim myCaltool As New CogCaliperTool

' Configure edge polarity, position, and mode to find a light-on-dark, 80-pixel wide object 
myCaltool.RunParams.Edge0Polarity = CogCaliperPolarityConstants.DarkToLight
myCaltool.RunParams.Edge1Polarity = CogCaliperPolarityConstants.LightToDark
myCaltool.RunParams.EdgeMode = CogCaliperEdgeModeConstants.Pair
myCaltool.RunParams.Edge0Position = -40
myCaltool.RunParams.Edge1Position = 40
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

// Working with a CogCaliperTool object
CogCaliperTool myCaltool = new CogCaliperTool();

// Configure edge polarity, position, and mode to find a light-on-dark, 80-pixel wide object 
myCaltool.RunParams.Edge0Polarity = CogCaliperPolarityConstants.DarkToLight;
myCaltool.RunParams.Edge1Polarity = CogCaliperPolarityConstants.LightToDark;
myCaltool.RunParams.EdgeMode = CogCaliperEdgeModeConstants.Pair;
myCaltool.RunParams.Edge0Position = -40;
myCaltool.RunParams.Edge1Position = 40;
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogCaliper.Edge1Position"><remarks><PARA>
The expected position of the second edge with respect to the 
<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="edge_model">edge model origin</see>. This property is only
meaningful if <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.EdgeMode" /> is 
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">Pair</see>.)
</PARA><PARA>
If you want to specify an edge model with its origin in the center, 
you should specify a value for <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.Edge0Position" /> 
that is the negative of the <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.Edge1Position" /> value, as shown in the following figure:
</PARA><PICTURE SRC="figure.jpg" apiSRC="Edge1Position_figure.jpg" /><DEFAULT>10.0</DEFAULT></remarks><summary>Position of the second edge with respect to the model origin. Note this only applies if EdgeMode = Pair</summary><event cref="E:Cognex.VisionPro.Caliper.CogCaliper.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliper_Edge1Position--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliper.SfEdge1Position" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Working with a CogCaliperTool object
Dim myCaltool As New CogCaliperTool

' Configure edge polarity, position, and mode to find a light-on-dark, 80-pixel wide object 
myCaltool.RunParams.Edge0Polarity = CogCaliperPolarityConstants.DarkToLight
myCaltool.RunParams.Edge1Polarity = CogCaliperPolarityConstants.LightToDark
myCaltool.RunParams.EdgeMode = CogCaliperEdgeModeConstants.Pair
myCaltool.RunParams.Edge0Position = -40
myCaltool.RunParams.Edge1Position = 40
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

// Working with a CogCaliperTool object
CogCaliperTool myCaltool = new CogCaliperTool();

// Configure edge polarity, position, and mode to find a light-on-dark, 80-pixel wide object 
myCaltool.RunParams.Edge0Polarity = CogCaliperPolarityConstants.DarkToLight;
myCaltool.RunParams.Edge1Polarity = CogCaliperPolarityConstants.LightToDark;
myCaltool.RunParams.EdgeMode = CogCaliperEdgeModeConstants.Pair;
myCaltool.RunParams.Edge0Position = -40;
myCaltool.RunParams.Edge1Position = 40;
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogCaliper.Edge0Position"><remarks><PARA>
The expected position of the edge with respect to the 
<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="edge_model">edge model origin</see>.  
In single edge mode, the reported edge location is offset by the <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.Edge0Position" /> value.
</PARA><PICTURE SRC="1edge.jpg" apiSRC="Edge0Position_1edge.jpg" /><PARA>
If you are using edge-pair mode, you need to specify values for both 
<see cref="P:Cognex.VisionPro.Caliper.CogCaliper.Edge0Position" /> and <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.Edge1Position" />. The values you specify determine 
both the expected width of the edge pair and the location which is reported for the 
edge pair. If you want to specify an edge model with its origin in the center, you 
should specify a value for <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.Edge0Position" /> that is the negative of the 
<see cref="P:Cognex.VisionPro.Caliper.CogCaliper.Edge1Position" />value, as shown in the following figure: 
</PARA><PICTURE SRC="figure.jpg" apiSRC="Edge0Position_figure.jpg" /><DEFAULT>0.0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Caliper.CogCaliper.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliper_Edge0Position--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliper.SfEdge0Position" /></li></ul></event><summary>Position of the first edge with respect to the model origin.</summary><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Working with a CogCaliperTool object
Dim myCaltool As New CogCaliperTool

' Configure edge polarity, position, and mode to find a light-on-dark, 80-pixel wide object 
myCaltool.RunParams.Edge0Polarity = CogCaliperPolarityConstants.DarkToLight
myCaltool.RunParams.Edge1Polarity = CogCaliperPolarityConstants.LightToDark
myCaltool.RunParams.EdgeMode = CogCaliperEdgeModeConstants.Pair
myCaltool.RunParams.Edge0Position = -40
myCaltool.RunParams.Edge1Position = 40
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

// Working with a CogCaliperTool object
CogCaliperTool myCaltool = new CogCaliperTool();

// Configure edge polarity, position, and mode to find a light-on-dark, 80-pixel wide object 
myCaltool.RunParams.Edge0Polarity = CogCaliperPolarityConstants.DarkToLight;
myCaltool.RunParams.Edge1Polarity = CogCaliperPolarityConstants.LightToDark;
myCaltool.RunParams.EdgeMode = CogCaliperEdgeModeConstants.Pair;
myCaltool.RunParams.Edge0Position = -40;
myCaltool.RunParams.Edge1Position = 40;
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogCaliper.TwoEdgeScorers"><remarks><PARA>
An <see cref="T:Cognex.VisionPro.Caliper.CogCaliperScorers" /> collection containing all of the scoring 
functions used when <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.EdgeMode" /> is <see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">Pair</see>.
</PARA><DEFAULT>
A collection containing a single <see cref="T:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm" />.
</DEFAULT></remarks><summary>Scoring functions used when edge mode is cogCaliperEdgeModePair.</summary><event cref="E:Cognex.VisionPro.Caliper.CogCaliper.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliper_TwoEdgeScorers--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliper.SfTwoEdgeScorers" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Working with a CogCaliperTool object
Dim myCaltool As New CogCaliperTool

' Create and initialize a two-edge scorer object
Dim myScorer As New CogCaliperScorerSizeDiffNormAsym
myScorer.SetXYParameters(-40.0#, -30.0#, -20.0#, 1.0#, 0.2, 40.0#, 30.0#, 20.0#, 1.0#, 0.2)

' Set it to be the only scorer for this caliper
myCaltool.RunParams.TwoEdgeScorers.Clear()
myCaltool.RunParams.TwoEdgeScorers.Add(myScorer)

    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

// Working with a CogCaliperTool object
CogCaliperTool myCaltool = new CogCaliperTool();

// Create and initialize a two-edge scorer object
CogCaliperScorerSizeDiffNormAsym myScorer = new CogCaliperScorerSizeDiffNormAsym();
myScorer.SetXYParameters(-40.0, -30.0, -20.0, 1.0, 0.2, 40.0, 30.0, 20.0, 1.0, 0.2);

// Set it to be the only scorer for this caliper
myCaltool.RunParams.TwoEdgeScorers.Clear();
myCaltool.RunParams.TwoEdgeScorers.Add(myScorer);
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogCaliper.SingleEdgeScorers"><summary>Scoring functions used when edge mode is cogCaliperEdgeModeSingle.</summary><event cref="E:Cognex.VisionPro.Caliper.CogCaliper.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliper_SingleEdgeScorers--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliper.SfSingleEdgeScorers" /></li></ul></event><remarks><PARA>
An <see cref="T:Cognex.VisionPro.Caliper.CogCaliperScorers" /> collection containing all of the scoring 
functions used when <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.EdgeMode" /> is <see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">SingleEdge</see>.
</PARA><DEFAULT>
A collection containing a single <see cref="T:Cognex.VisionPro.Caliper.CogCaliperScorerContrast" />.
</DEFAULT></remarks><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Working with a CogCaliperTool object
Dim myCaltool As New CogCaliperTool

' Create and initialize a single-edge scorer object
Dim myScorer As New CogCaliperScorerPosition
myScorer.SetXYParameters(20.0#, 10.0#, 5.0#, 1.0#, 0.2)

' Set it to be the only scorer for this caliper
myCaltool.RunParams.SingleEdgeScorers.Clear()
myCaltool.RunParams.SingleEdgeScorers.Add(myScorer)

    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

// Working with a CogCaliperTool object
CogCaliperTool myCaltool = new CogCaliperTool();

// Create and initialize a single-edge scorer object
CogCaliperScorerPosition myScorer = new CogCaliperScorerPosition();
myScorer.SetXYParameters(20.0, 10.0, 5.0, 1.0, 0.2);

// Set it to be the only scorer for this caliper
myCaltool.RunParams.SingleEdgeScorers.Clear();
myCaltool.RunParams.SingleEdgeScorers.Add(myScorer);
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogCaliper.EdgeMode"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is
	not a member of <see cref="T:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants" />.</para></exception><summary>Whether to locate a single edge or an edge pair for each result.</summary><remarks><PARA>
Whether to locate a single edge or an edge pair for each result.
If this property is <see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">SingleEdge</see>, 
then the tool locates and scores a single edge. If the property is
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">Pair</see>, then the
tool locates and scores edge-pairs. In edge-pair mode, the location of a single result is defined 
to be centered between the two edges, as described in the documentation for 
the <see cref="P:Cognex.VisionPro.Caliper.CogCaliperResult.Position" /> function.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">SingleEdge</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.Caliper.CogCaliper.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliper_EdgeMode--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliper.SfEdgeMode" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Working with a CogCaliperTool object
Dim myCaltool As New CogCaliperTool

' Configure edge polarity, position, and mode to find a light-on-dark, 80-pixel wide object 
myCaltool.RunParams.Edge0Polarity = CogCaliperPolarityConstants.DarkToLight
myCaltool.RunParams.Edge1Polarity = CogCaliperPolarityConstants.LightToDark
myCaltool.RunParams.EdgeMode = CogCaliperEdgeModeConstants.Pair
myCaltool.RunParams.Edge0Position = -40
myCaltool.RunParams.Edge1Position = 40
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

// Working with a CogCaliperTool object
CogCaliperTool myCaltool = new CogCaliperTool();

// Configure edge polarity, position, and mode to find a light-on-dark, 80-pixel wide object 
myCaltool.RunParams.Edge0Polarity = CogCaliperPolarityConstants.DarkToLight;
myCaltool.RunParams.Edge1Polarity = CogCaliperPolarityConstants.LightToDark;
myCaltool.RunParams.EdgeMode = CogCaliperEdgeModeConstants.Pair;
myCaltool.RunParams.Edge0Position = -40;
myCaltool.RunParams.Edge1Position = 40;
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogCaliper.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliper.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliper.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliper.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliper.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliper.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliper.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.CogRectangleAffine)"><param name="inputImage"><PARA>The image to which the Caliper is applied.</PARA></param><param name="region"><PARA>The Caliper input region. The supplied 
	<see cref="T:Cognex.VisionPro.CogRectangleAffine" /> (no other region type is allowed)
	is used to sample the image and <!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Measurement.Caliper.Walkthrough.CaliperInputRegion">create</see> a one-dimensional projection image. The projection
	image is filtered, and the detected edge peaks are evaluated as possible caliper results.</PARA></param><summary>Apply the caliper to the given image with the given region of interest. If Region is not specified, the entire image will be used.</summary><remarks><PARA>Apply the caliper to the given image with the given region of interest. If Region is not specified, the entire image will be used.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="Image" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <paramref name="region" /> is not a valid space in <paramref name="Image" /> or no part of 
<paramref name="region" /> lies within <paramref name="Image" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogCaliperNoScorersException" cgnxHRESULT="E_CogCaliper_NoScorers"><para>The supplied scoring collection is null or empty or all 
	the scorers are disabled and a nonzero number of results has been requested.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogCaliperBadScorerException" cgnxHRESULT="E_CogCaliper_BadScorer"><para>A single-edge scorer is in the two-edge scorers collection or 
	a two-edge scorer is in the single-edge scorers collection.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogCaliperImageTooSmallException" cgnxHRESULT="E_CogCaliper_ImageTooSmall"><para>There are not enough pixels for the projected image.</para></exception><returns><PARA>A <see cref="T:Cognex.VisionPro.Caliper.CogCaliperResults" /> object containing
	the results of this function.</PARA></returns><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Construct the individual objects 
Dim myCalOp As New CogCaliper
Dim myResults As CogCaliperResults
Dim myRegion As New CogRectangleAffine


' Region should be configured to contain region of interest
myCalOp.MaxResults = 1
myCalOp.Edge0Polarity = CogCaliperPolarityConstants.DarkToLight
myCalOp.Edge1Polarity = CogCaliperPolarityConstants.LightToDark
myCalOp.EdgeMode = CogCaliperEdgeModeConstants.Pair
' anImage has been acquired previously
myResults = myCalOp.Execute(CType(anImage, CogImage8Grey), myRegion)
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;


// Construct the individual objects 
CogCaliper myCalOp = new CogCaliper();
CogCaliperResults myResults;
CogRectangleAffine myRegion = new CogRectangleAffine();

      

// Region should be configured to contain region of interest
myCalOp.MaxResults = 1;
myCalOp.Edge0Polarity = CogCaliperPolarityConstants.DarkToLight;
myCalOp.Edge1Polarity = CogCaliperPolarityConstants.LightToDark;
myCalOp.EdgeMode = CogCaliperEdgeModeConstants.Pair;

// anImage has been acquired previously
myResults = myCalOp.Execute(anImage , myRegion);
    </code></example></member><member name="E:Cognex.VisionPro.Caliper.CogCaliper.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperEdge"><remarks><PARA>A single located edge.</PARA></remarks><summary>A single located edge.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperEdge.#ctor(Cognex.VisionPro.Caliper.CogCaliperEdge)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperEdge.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperEdge.PositionY"><remarks><PARA>The Y position of this edge in the input image. This value is equivalent to the 
	value obtained by calling <see cref="M:Cognex.VisionPro.Caliper.CogCaliperEdge.PositionXY(System.Double,System.Double@,System.Double@)" /> and specifying 0.5 for the <paramref name="T" /> parameter and 0 for the <paramref name="X" /> parameter.</PARA></remarks><summary>The Y position of this edge in the input image.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperEdge.PositionX"><summary>The X position of this edge in the input image.</summary><remarks><PARA>The X position of this edge in the input image. This value is equivalent to the 
	value obtained by calling <see cref="M:Cognex.VisionPro.Caliper.CogCaliperEdge.PositionXY(System.Double,System.Double@,System.Double@)" /> and specifying 0.5 for the <paramref name="T" /> parameter and 0 for the <paramref name="Y" /> parameter.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperEdge.Contrast"><summary>Contrast of the edge in the range -255 -&gt; 255. Negative contrasts represent light to dark transitions along the search direction and positive ones represent dark to light transitions.</summary><remarks><PARA>The contrast (the difference in pixel values across the edge) of this edge.
The contrast value can range from -255 to +255. Negative contrasts represent light to dark transitions along the 
<see cref="u:Measurement.Caliper.Walkthrough.CaliperInputRegion">search direction</see> and positive ones represent dark to light transitions.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperEdge.Position"><summary>A signed 1-D measurement along the search direction relative to the center of the input region.</summary><remarks><PARA>A signed 1-D measurement along the search direction relative to the center of the input region. An edge to the left of the center would have a negative position, an edge to the right of the center would have a positive position.</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperEdge.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperEdge.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperEdge.PositionXY(System.Double,System.Double@,System.Double@)"><param name="t"><PARA>Specify 0.0 to place the returned point at the top of the region (where the top is the 
	origin side). Specify 1.0 to place the returned point at the bottom of the region. The default
	value for this parameter is 0.5, which places the point in the center of the region.</PARA></param><param name="x"><PARA>The x-coordinate of the returned location.</PARA></param><param name="y"><PARA>The y-coordinate of the returned location.</PARA></param><remarks><PARA>Provides a 2-dimensional location within the input image that corresponds to this 
edge. Since the part of the input image that lies within the input region is projected to form
a 1-dimensional image, the edge location is actually a line within this region. You control 
where along this line the location is placed using the <paramref name="t" /> parameter (it gives
the offset from the top of the input region, in the range 0.0 through 1.0, as shown below:
</PARA><PICTURE SRC="T.jpg" apiSRC="PositionXY_T.jpg" /><PARA>
Calling this function is equivalent to taking the values returned by 
<see cref="P:Cognex.VisionPro.Caliper.CogCaliperEdge.Position" /> and mapping them through the <see cref="M:Cognex.VisionPro.Caliper.CogCaliperResults.MapToImage(System.Double,Cognex.VisionPro.Caliper.CogCaliperSpaceConstants,System.Double,System.Double@,System.Double@)" /> function.
</PARA></remarks><summary>A 2-D position of this result in the input image. T parameterizes the direction of projection such that a value of 0 corresponds to the P0PX edge of the caliper window and a value of 1 corresponds to the opposite edge.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperEdges"><remarks><PARA>Collection of located edges. The edges are in their positional order, from 
	left to right.</PARA></remarks><summary>Collection of located edges.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperEdges.#ctor(Cognex.VisionPro.Caliper.CogCaliperEdges)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperEdges.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperEdges.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperEdges.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperEdges.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperEdges.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperEdges.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperEdges.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperEdges.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperEdges.IndexOf(Cognex.VisionPro.Caliper.CogCaliperEdge)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperInternal"><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperInternal.#ctor(Cognex.VisionPro.Caliper.CogCaliperInternal)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperInternal.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperInternal.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperInternal.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperResult"><summary>One Caliper Result.</summary><remarks><PARA>A single caliper result.</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResult.#ctor(Cognex.VisionPro.Caliper.CogCaliperResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperResult.Width"><remarks><PARA>The width of this result. Returns 0 if <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.EdgeMode" /> is 
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">SingleEdge</see>.</PARA></remarks><summary>The width of this result. Returns 0 if only 1 edge was requested.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperResult.PositionY"><remarks><PARA>The Y position of this edge in the input image. This value is equivalent to the 
	value obtained by calling <see cref="M:Cognex.VisionPro.Caliper.CogCaliperResult.PositionXY(System.Double,System.Double@,System.Double@)" /> and specifying 0.5 for the <paramref name="T" /> parameter and 0 for the <paramref name="X" /> parameter.</PARA></remarks><summary>The Y position of this result in the input image.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperResult.PositionX"><summary>The X position of this result in the input image.</summary><remarks><PARA>The X position of this edge in the input image. This value is equivalent to the 
	value obtained by calling <see cref="M:Cognex.VisionPro.Caliper.CogCaliperResult.PositionXY(System.Double,System.Double@,System.Double@)" /> and specifying 0.5 for the <paramref name="T" /> parameter and 0 for the <paramref name="Y" /> parameter.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperResult.ID"><summary>ID of this result. This ID is unique within any created collection of results.</summary><remarks><PARA>ID of this result. This ID is unique within any created collection of results.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperResult.Edge1"><summary>Second edge that contributed to this result. This will be nothing if only 1 edge was requested.</summary><remarks><PARA>
The second <see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdge" /> that contributed to this result. If <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.EdgeMode" /> is 
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">SingleEdge</see>, 
this property is set to Nothing.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperResult.Edge0"><summary>First edge that contributed to this result.</summary><remarks><PARA>The first <see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdge" /> that contributed to this result.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperResult.Position"><summary>A signed 1-D measurement along the search direction relative to the center of the input region.</summary><remarks><PARA>A signed 1-D measurement along the search direction relative to the center of the input region, as shown in the following figure:</PARA><PICTURE SRC="figure.jpg" apiSRC="Position_figure.jpg" /></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperResult.Score"><summary>Score of this result in the range 0.0 - 1.0.</summary><remarks><PARA>The overall score of this result in the range 0.0 - 1.0. The score is computed by 
taking the geometric mean of the scores produced by each of the scoring functions defined
for this run of the Caliper tool.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResult.PositionXY(System.Double,System.Double@,System.Double@)"><param name="t"><PARA>Specify 0.0 to place the returned point at the top of the region (where the top is the 
	origin side). Specify 1.0 to place the returned point at the bottom of the region. The default
	value for this parameter is 0.5, which places the point in the center of the region.</PARA></param><param name="x"><PARA>The x-coordinate of the returned location.</PARA></param><param name="y"><PARA>The y-coordinate of the returned location.</PARA></param><remarks><PARA>Provides a 2-dimensional location within the input image that corresponds to 
this <see cref="T:Cognex.VisionPro.Caliper.CogCaliperResult" />. 
Since the part of the input image that lies within the input region is projected to form
a 1-dimensional image, the result location is actually a line within this region. 
You control 
where along this line the location is placed using the <paramref name="t" /> parameter (it gives
the offset from the top of the input region, in the range 0.0 through 1.0, as shown below:
</PARA><PICTURE SRC="T.jpg" apiSRC="PositionXY_T.jpg" /><PARA>
Calling this function is equivalent to taking the values returned by 
<see cref="P:Cognex.VisionPro.Caliper.CogCaliperResult.Position" /> and mapping them through the <see cref="M:Cognex.VisionPro.Caliper.CogCaliperResults.MapToImage(System.Double,Cognex.VisionPro.Caliper.CogCaliperSpaceConstants,System.Double,System.Double@,System.Double@)" /> function.
</PARA></remarks><summary>A 2-D position of this result in the input image. T parameterizes the direction of projection such that a value of 0 corresponds to the P0PX edge of the caliper window and a value of 1 corresponds to the opposite edge.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResult.GetContributingScores"><summary>Scores from each of the scoring functions that contributed to this result. The scores are presented in the same order as the enabled scoring functions in the scoring collection as it existed at the time the caliper was run.</summary><remarks><PARA>
Scores from each of the scoring functions that contributed to this result. 
The scores are presented in the same order as the enabled scoring functions in the 
scoring collection <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.SingleEdgeScorers" /> or
<see cref="P:Cognex.VisionPro.Caliper.CogCaliper.TwoEdgeScorers" />)as it existed at the time the 
caliper was run.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResult.CreateResultGraphics(Cognex.VisionPro.Caliper.CogCaliperResultGraphicConstants)"><param name="graphicOptions"><PARA>The graphics to display.</PARA></param><remarks><PARA>A bitwise combination of <see cref="T:Cognex.VisionPro.Caliper.CogCaliperResultGraphicConstants" /> that specifies what to put in the Children collection of the returned <see cref="T:Cognex.VisionPro.CogCompositeShape" />.  The <paramref name="TipText" /> parameter is used to initialize the children's TipText.</PARA></remarks><summary>The GraphicOptions parameter is a bitwise combination of CogCaliperResultGraphicConstants and specifies what to put in the Children collection of the returned CogCompositeShape.  The TipText parameter is used to initialize the children's TipText.</summary><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogCompositeShape" />.</PARA></returns></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperResults"><remarks><PARA>Collection of caliper results.</PARA></remarks><summary>Collection of Caliper results.</summary><example><code lang="Visual Basic">
        Imports Cognex.VisionPro
	      Imports Cognex.VisionPro.Caliper
	      Imports Cognex.VisionPro.ImageProcessing

	      ' Working with a CogCaliperTool object
	      Dim myCaltool As New CogCaliperTool

	      ' Display a point marker for each found edge
	      Dim myEdge As CogCaliperEdge
         
	      For Each myEdge In myCaltool.Results.Edges
          Dim myCPM As New CogPointMarker
	        myCPM.SetCenterRotationSize(myEdge.PositionX, myEdge.PositionY, 0, 10)
           
	        If myEdge.Contrast &gt; 10 Then
	          myCPM.Color = CogColorConstants.DarkGreen
	        Else
	          myCPM.Color = CogColorConstants.Red
	        End If
           
	        CogDisplay1.StaticGraphics.Add(myCPM, "")
	      Next
      </code><code lang="C#">
	      using Cognex.VisionPro;
	      using Cognex.VisionPro.Caliper;
	      using Cognex.VisionPro.ImageProcessing;

	      // Working with a CogCaliperTool object
	      CogCaliperTool myCaltool = new CogCaliperTool();

	      // Display a point marker for each found edge
	      foreach (CogCaliperEdge myEdge in myCaltool.Results.Edges)
	      {
	        CogPointMarker myCPM = new CogPointMarker();
	        myCPM.SetCenterRotationSize(myEdge.PositionX, myEdge.PositionY, 0, 10);
           
	        if ( myEdge.Contrast &gt; 10 )
          {
	          myCPM.Color = CogColorConstants.DarkGreen;
          }
	        else
          {
	          myCPM.Color = CogColorConstants.Red;
          }
	        CogDisplay1.StaticGraphics.Add(myCPM, "");
	      }
      </code></example></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResults.#ctor(Cognex.VisionPro.Caliper.CogCaliperResults)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResults.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperResults.Edges"><remarks><PARA>A <see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdges" /> object containing all of the 
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdge" />s found during this run of the Caliper tool.</PARA><PARA>
The returned collection of edges include all edges, regardless of edge polarity.
</PARA></remarks><summary>Collection of all edges located, in increasing order of position.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperResults.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperResults.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperResults.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperResults.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResults.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResults.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResults.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResults.IndexOf(Cognex.VisionPro.Caliper.CogCaliperResult)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResults.GetTime(Cognex.VisionPro.Caliper.CogCaliperTimeConstants)"><param name="caliperTime"><PARA>A <see cref="T:Cognex.VisionPro.Caliper.CogCaliperTimeConstants" /> specifying which time component to return.</PARA></param><summary>Elapsed time in milliseconds for the specified time component.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="caliperTime" /> is not
	a member of <see cref="T:Cognex.VisionPro.Caliper.CogCaliperTimeConstants" />.</para></exception><remarks><PARA>
The elapsed time in milliseconds required to complete the specified 
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperTimeConstants">component</see>.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResults.GetProjectionValues"><summary>Projected image values. These are normalized to the range 0 -&gt; 255 and account for any clipping.</summary><remarks><PARA>Projected image values. These are normalized to the range 0 -&gt; 255 and account for any clipping.</PARA><PARA>You can use the values in this array to 
	<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Measurement.Caliper.Walkthrough.Display1DImages">construct a graphical representation</see> of the projected image. </PARA></remarks><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Working with a CogCaliperTool object
Dim myCaltool As New CogCaliperTool
Dim coDispImage As CogImage8Grey
Dim i As Integer
Dim j As Integer
Dim dblPixelValues() As Double

' You must copy the pixel values into an array before referencing them.
dblPixelValues = myCaltool.Results.GetProjectionValues

' Allocate a new image. Call Allocate to Create Storage for the Pixels
coDispImage = New CogImage8Grey
coDispImage.Allocate(UBound(dblPixelValues) + 1, 40)

' Set each row of the image to be the same.
For i = 0 To 39
  For j = 0 To UBound(dblPixelValues)
    coDispImage.SetPixel(j, i, Convert.ToByte(dblPixelValues(j)))
  Next j
Next

    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

// Working with a CogCaliperTool object
CogCaliperTool myCaltool = new CogCaliperTool();
CogImage8Grey coDispImage;
int i;
int j;
double[] dblPixelValues;

// You must copy the pixel values into an array before referencing them.
dblPixelValues = myCaltool.Results.GetProjectionValues();

// Allocate a new image. Call Allocate to Create Storage for the Pixels
coDispImage = new CogImage8Grey();
coDispImage.Allocate( (dblPixelValues.GetUpperBound(0)) + 1, 40);

// Set each row of the image to be the same.
for( i = 0; i &lt;= 39;i++){
  for( j = 0; j &lt;=  dblPixelValues.GetUpperBound(0); j++) {
   coDispImage.SetPixel(j, i, Convert.ToByte(dblPixelValues[j]));
  }
}
    </code></example></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResults.GetFilteredValues"><remarks><PARA>Filtered image values normalized to the range -255 -&gt; 255. These values represent the contrast at each point in the projected image.</PARA><PARA>You can use the values in this array to 
	<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Measurement.Caliper.Walkthrough.Display1DImages">construct a graphical representation</see> of the filtered image. </PARA></remarks><summary>Filtered image values normalized to the range -255 -&gt; 255. These values represent the contrast at each point in the projected image.</summary><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Working with a CogCaliperTool object
Dim myCaltool As New CogCaliperTool
Dim coDispImage As CogImage8Grey
Dim i As Integer
Dim j As Integer
Dim dblPixelValues() As Double

' You must copy the pixel values into an array before referencing them.
dblPixelValues = myCaltool.Results.GetFilteredValues

' Allocate a new image. Call Allocate to Create Storage for the Pixels
coDispImage = New CogImage8Grey
coDispImage.Allocate(UBound(dblPixelValues) + 1, 40)

' Set each row of the image to be the same.
For i = 0 To 39
  For j = 0 To UBound(dblPixelValues)
    coDispImage.SetPixel(j, i, Convert.ToByte(((dblPixelValues(j)) + 255) / 2))
  Next j
Next

    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

// Working with a CogCaliperTool object
CogCaliperTool myCaltool = new CogCaliperTool();
CogImage8Grey coDispImage;
int i;
int j;
double[] dblPixelValues;

// You must copy the pixel values into an array before referencing them.
dblPixelValues = myCaltool.Results.GetFilteredValues();

// Allocate a new image. Call Allocate to Create Storage for the Pixels
coDispImage = new CogImage8Grey();
coDispImage.Allocate( (dblPixelValues.GetUpperBound(0)) + 1, 40);

// Set each row of the image to be the same.
for( i = 0; i &lt;= 39;i++){
  for( j = 0; j &lt;=  dblPixelValues.GetUpperBound(0); j++) {
  coDispImage.SetPixel(j, i, Convert.ToByte(((dblPixelValues[j]) + 255) / 2));
  }
}
    </code></example></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResults.Map(System.Double,Cognex.VisionPro.Caliper.CogCaliperSpaceConstants,Cognex.VisionPro.Caliper.CogCaliperSpaceConstants)"><param name="position"><PARA>The 1-dimensional position to map.</PARA></param><param name="toSpace"><PARA>
The <see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants">space</see> to which to map <paramref name="position" />.
		</PARA></param><param name="fromSpace"><PARA>
The <see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants">space</see> from which to map <paramref name="position" />.
	</PARA></param><summary>Map between filtered image location and result position and projection image location.</summary><returns><PARA>The mapped position.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="fromSpace" /> 
	or <paramref name="toSpace" /> is not
	a member of <see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants" />.</para></exception><remarks><PARA>
Maps 1-dimensional points among the three defined 1-d spaces supported
by the Caliper tool: 
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants">Filter</see>, 
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants">Projection</see>, and 
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants">Result</see>.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResults.MapToImage(System.Double,Cognex.VisionPro.Caliper.CogCaliperSpaceConstants,System.Double,System.Double@,System.Double@)"><param name="position"><PARA>The 1-dimensional position to map.</PARA></param><param name="fromSpace"><PARA>
The <see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants">space</see> from which to map <paramref name="position" />.
	</PARA></param><param name="t"><PARA>Specify 0.0 to place the returned point at the top of the region (where the top is the 
	origin side). Specify 1.0 to place the returned point at the bottom of the region. The default
	value for this parameter is 0.5, which places the point in the center of the region.</PARA></param><param name="x"><PARA>The x-coordinate of the returned location.</PARA></param><param name="y"><PARA>The Y-coordinate of the returned location.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="fromSpace" /> is not
	a member of <see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants" />.</para></exception><remarks><PARA>
Maps a 1-dimensional point from one of the supported 1-dimensional
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants">spaces</see> to a 2-dimensional point
within the input image. 
</PARA><PARA>
Since the part of the input image that lies within the input region is projected to form
a 1-dimensional image, the result location is actually a line within this region. 
You control 
where along this line the location is placed using the <paramref name="t" /> parameter (it gives
the offset from the top of the input region, in the range 0.0 through 1.0, as shown
in the documentation for <see cref="M:Cognex.VisionPro.Caliper.CogCaliperResult.PositionXY(System.Double,System.Double@,System.Double@)" />.
</PARA></remarks><summary>Map from a caliper 1D space back to the image.  T parameterizes the direction of projection such that a value of 0 corresponds to the P0PX edge of the caliper window and a value of 1 corresponds to the opposite edge.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResults.MapFromImage(System.Double,System.Double,Cognex.VisionPro.Caliper.CogCaliperSpaceConstants)"><param name="x"><PARA>The X-coordinate of the point to map.</PARA></param><param name="y"><PARA>The Y-Coordinate of the point to map.</PARA></param><param name="toSpace"><PARA>
The <see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants">space</see> to which to map the supplied point.
</PARA></param><returns><PARA>The mapped point.</PARA></returns><summary>Map from the image to one of the caliper 1D spaces.</summary><remarks><PARA>
Maps a point from the input image to one of the three defined 1-d spaces supported
by the Caliper tool: 
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants">Filter</see>, 
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants">Projection</see>, and 
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants">Result</see>.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="toSpace" /> 
	is not
	a member of <see cref="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants" />.</para></exception></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperResults.Sort(Cognex.VisionPro.Caliper.CogCaliperSortModeConstants,System.Boolean)"><param name="sortMode"><PARA>The <see cref="T:Cognex.VisionPro.Caliper.CogCaliperSortModeConstants">sort order</see>.</PARA></param><param name="reverseSortOrder"><PARA>If true, the sort is performed in reverse order.</PARA></param><summary>Sort the results and create a new results object.</summary><remarks><PARA>
	Sorts (or re-sorts) the results and create a new 
	<see cref="T:Cognex.VisionPro.Caliper.CogCaliperResults" /> object.
	</PARA></remarks><returns><PARA>An <see cref="T:Cognex.VisionPro.Caliper.CogCaliperResults" /> object containing the newly sorted results.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="sortMode" /> is not
	a member of <see cref="T:Cognex.VisionPro.Caliper.CogCaliperSortModeConstants" />.</para></exception></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerContrast"><remarks><PARA>
A <see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see> 
that scores the contrast of a candidate edge.
This is a one-sided scoring function object; you use 
<see cref="M:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)" /> 
to set the individual values that define this function.</PARA><PARA>
You use this scoring function to score edge candidates based on the contrast of the edge or edges in the candidate. To assign increasing scores as edge contrast increases, specify a function
in which X0 is greater than X1 and X1 is greater than XC, as shown below:
</PARA><PICTURE SRC="increasing.jpg" apiSRC="CogCaliperScorerContrast_increasing.jpg" /><PARA>
To assign decreasing scores as edge contrast increases, specify a function
in which XC is greater than X1 and X1 is greater than X0, as shown below:
</PARA><PICTURE SRC="decreasing.jpg" apiSRC="CogCaliperScorerContrast_decreasing.jpg" /><PARA>
The contrast of an edge is expressed in terms of the change in pixel values divided by the size of the edge in pixels;
the largest possible contrast value is 255.
</PARA></remarks><summary>Scoring function which scores the contrast of a candidate edge.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.#ctor(Cognex.VisionPro.Caliper.CogCaliperScorerContrast)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.SfGetXYParameters"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetXYParameters may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.Enabled"><remarks><PARA>Whether this scorer will be used.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this scorer will be used.</summary><event cref="E:Cognex.VisionPro.Caliper.CogCaliperScorer.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperScorer_Enabled--><ul /></event></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.Scores(System.Int32)"><param name="numEdges"><PARA>The number of edges (1 or 2).</PARA></param><remarks><PARA>
Returns true if this scorer applies to the given number of edges (1 or 2), false otherwise.</PARA></remarks><returns><PARA>True if this function applies to <paramref name="numEdges" />, false otherwise.</PARA></returns><summary>Whether this scorer applies for the given number of edges.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="x0">A contrast value in the range of 0 through 255 that helps describe how an edge candidate's contrast is mapped to a score. Contrast values between x0 and x1 are mapped to a score that is between y0 and y1, while contrast values on the other side of x0 are mapped to a score of y0.</param><param name="x1">A contrast value in the range of 0 through 255 that helps describe how an edge candidate's contrast is mapped to a score. The value of x1 must fall between the values of xc and x0. Contrast values between x0 and x1 are mapped to a score that is between y0 and y1, while contrast values between xc and x1 are mapped to a score of y1.</param><param name="xc">A contrast value in the range of 0 through 255 that helps describe how an edge candidate's contrast is mapped to a score. Contrast values between xc and x1 are mapped to a score of y1, while contrast values on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><summary>Set the parameters used to map an edge candidate's contrast to a score. Contrast is the absolute difference in average pixel values across the edge, and has a range of 0 through 255. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary><remarks><PARA>Function that sets the individual values that define this
			<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
		as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="YO" /> is greater than or equal to <paramref name="y1" /> 
or it is not the case that 
<paramref name="x0" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="xc" /> 
or 
<paramref name="xc" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="x0" />.
</para></exception></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.GetXYParameters(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="x0">A contrast value in the range of 0 through 255 that helps describe how an edge candidate's contrast is mapped to a score. Contrast values between x0 and x1 are mapped to a score that is between y0 and y1, while contrast values on the other side of x0 are mapped to a score of y0.</param><param name="x1">A contrast value in the range of 0 through 255 that helps describe how an edge candidate's contrast is mapped to a score. The value of x1 must fall between the values of xc and x0. Contrast values between x0 and x1 are mapped to a score that is between y0 and y1, while contrast values between xc and x1 are mapped to a score of y1.</param><param name="xc">A contrast value in the range of 0 through 255 that helps describe how an edge candidate's contrast is mapped to a score. Contrast values between xc and x1 are mapped to a score of y1, while contrast values on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><summary>Get the parameters used to map an edge candidate's contrast to a score. Contrast is the absolute difference in average pixel values across the edge, and has a range of 0 through 255. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary><remarks><PARA>Function that gets the individual values that define this
		<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
	as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerPosition"><summary>Scoring function which uses the absolute position of the candidate edge or edge pair.</summary><remarks><PARA>
A <see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see> that 
uses the absolute position of the candidate edge or edge pair relative to the center of the input region. 
This is a one-sided scoring function object; you use 
<see cref="M:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)" /> 
to set the individual values that define this function.
</PARA><PARA>
For most applications, you specify a scoring function that produces lower
scores the further the result is from the center of the input region. You
do this by specifying a function
in which XC is greater than X1 and X1 is greater than X0, as shown below:
</PARA><PICTURE SRC="decreasing.jpg" apiSRC="CogCaliperScorerPosition_decreasing.jpg" /><PARA>
In some cases, you may want to specify scoring function that produces <ITALIC>higher</ITALIC>
scores the further the result is from the center of the input region. You
do this by specifying a function
in which X0 is greater than X1 and X1 is greater than XC, as shown below:
</PARA><PICTURE SRC="increasing.jpg" apiSRC="CogCaliperScorerPosition_increasing.jpg" /></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.#ctor(Cognex.VisionPro.Caliper.CogCaliperScorerPosition)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.SfGetXYParameters"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetXYParameters may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.Enabled"><summary>Whether this scorer will be used.</summary><remarks><PARA>Whether this scorer will be used.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Caliper.CogCaliperScorer.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperScorer_Enabled--><ul /></event></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.Scores(System.Int32)"><param name="numEdges"><PARA>The number of edges (1 or 2).</PARA></param><returns><PARA>True if this function applies to <paramref name="numEdges" />, false otherwise.</PARA></returns><remarks><PARA>
Returns true if this scorer applies to the given number of edges (1 or 2), false otherwise.</PARA></remarks><summary>Whether this scorer applies for the given number of edges.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="x0">A distance value that helps describe how an edge candidate's position is mapped to a score. Distance values between x0 and x1 are mapped to a score that is between y0 and y1, while distance values on the other side of x0 are mapped to a score of y0.</param><param name="x1">A distance value that helps describe how an edge candidate's position is mapped to a score. The value of x1 must fall between the values of xc and x0. Distance values between x0 and x1 are mapped to a score that is between y0 and y1, while distance values between xc and x1 are mapped to a score of y1.</param><param name="xc">A distance value that helps describe how an edge candidate's position is mapped to a score. Distance values between xc and x1 are mapped to a score of y1, while distance values on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><summary>Set the parameters used to map an edge candidate's position to a score. When mapping, position is converted to the distance (absolute value of the positional difference) between the edge model origin and the center of the projection region. This distance is in units of the selected space of the input image. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="YO" /> is greater than or equal to <paramref name="y1" /> 
or it is not the case that 
<paramref name="x0" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="xc" /> 
or 
<paramref name="xc" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="x0" />.
</para></exception><remarks><PARA>Function that sets the individual values that define this
			<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
		as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.GetXYParameters(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="x0">A distance value that helps describe how an edge candidate's position is mapped to a score. Distance values between x0 and x1 are mapped to a score that is between y0 and y1, while distance values on the other side of x0 are mapped to a score of y0.</param><param name="x1">A distance value that helps describe how an edge candidate's position is mapped to a score. The value of x1 must fall between the values of xc and x0. Distance values between x0 and x1 are mapped to a score that is between y0 and y1, while distance values between xc and x1 are mapped to a score of y1.</param><param name="xc">A distance value that helps describe how an edge candidate's position is mapped to a score. Distance values between xc and x1 are mapped to a score of y1, while distance values on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><summary>Get the parameters used to map an edge candidate's position to a score. When mapping, position is converted to the distance (absolute value of the positional difference) between the edge model origin and the center of the projection region. This distance is in units of the selected space of the input image. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary><remarks><PARA>Function that gets the individual values that define this
		<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
	as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg"><summary>Scoring function which uses the position of a candidate edge or edge pair. Negative values allowed.</summary><remarks><PARA>
A <see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see> that 
uses the position (positive or negative) of a candidate edge or edge pair. 
This is a one-sided scoring function object; you use 
<see cref="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)" /> 
to set the individual values that define this function.
</PARA><PARA>
Unlike the
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperScorerPosition" /> object, this object lets you score positive
and negative values. In most cases, you will specify the XC, XO, and X1 values such
that they enclose 0.0, as shown below:
</PARA><PICTURE SRC="oddball.jpg" apiSRC="CogCaliperScorerPositionNeg_oddball.jpg" /></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.#ctor(Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.SfGetXYParameters"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetXYParameters may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.Enabled"><remarks><PARA>Whether this scorer will be used.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Caliper.CogCaliperScorer.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperScorer_Enabled--><ul /></event><summary>Whether this scorer will be used.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.Scores(System.Int32)"><param name="numEdges"><PARA>The number of edges (1 or 2).</PARA></param><returns><PARA>True if this function applies to <paramref name="numEdges" />, false otherwise.</PARA></returns><remarks><PARA>
Returns true if this scorer applies to the given number of edges (1 or 2), false otherwise.</PARA></remarks><summary>Whether this scorer applies for the given number of edges.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="x0">A relative position value that helps describe how an edge candidate's position is mapped to a score. May be negative or positive. Relative position values between x0 and x1 are mapped to a score that is between y0 and y1, while relative position values on the other side of x0 are mapped to a score of y0.</param><param name="x1">A relative position value that helps describe how an edge candidate's position is mapped to a score. May be negative or positive. The value of x1 must fall between the values of xc and x0. Relative position values between x0 and x1 are mapped to a score that is between y0 and y1, while relative position values between xc and x1 are mapped to a score of y1.</param><param name="xc">A relative position value that helps describe how an edge candidate's position is mapped to a score. Relative position values between xc and x1 are mapped to a score of y1, while relative position values on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><remarks><PARA>Function that sets the individual values that define this
			<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
		as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="YO" /> is greater than or equal to <paramref name="y1" /> 
or it is not the case that 
<paramref name="x0" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="xc" /> 
or 
<paramref name="xc" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="x0" />.
</para></exception><summary>Set the parameters used to map an edge candidate's position to a score. When mapping, the signed difference in position between the edge model origin and the center of the projection region is computed. This relative position value is in units of the selected space of the input image. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.GetXYParameters(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="x0">A relative position value that helps describe how an edge candidate's position is mapped to a score. May be negative or positive. Relative position values between x0 and x1 are mapped to a score that is between y0 and y1, while relative position values on the other side of x0 are mapped to a score of y0.</param><param name="x1">A relative position value that helps describe how an edge candidate's position is mapped to a score. May be negative or positive. The value of x1 must fall between the values of xc and x0. Relative position values between x0 and x1 are mapped to a score that is between y0 and y1, while relative position values between xc and x1 are mapped to a score of y1.</param><param name="xc">A relative position value that helps describe how an edge candidate's position is mapped to a score. Relative position values between xc and x1 are mapped to a score of y1, while relative position values on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><remarks><PARA>Function that gets the individual values that define this
		<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
	as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks><summary>Get the parameters used to map an edge candidate's position to a score. When mapping, the signed difference in position between the edge model origin and the center of the projection region is computed. This relative position value is in units of the selected space of the input image. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm"><summary>Scoring function which uses the absolute normalized position of a candidate edge or edge pair.</summary><remarks><PARA>
A <see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see> that 
uses the absolute normalized position of a candidate edge or edge pair. The position 
is normalized by dividing it by the expected distance between the edges (this function
is only suitable if <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.EdgeMode" /> is
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">CogCaliperEdgeModePair</see>.
</PARA><PARA>
This is a one-sided scoring function object; you use  
<see cref="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)" /> 
to set the individual values that define this function.
</PARA><PARA>
For most applications, you specify a scoring function that produces lower
scores the further the result is from the center of the input region. You
do this by specifying a function
in which XC is greater than X1 and X1 is greater than X0, as shown below:
</PARA><PICTURE SRC="decreasing.jpg" apiSRC="CogCaliperScorerPositionNorm_decreasing.jpg" /><PARA>
In some cases, you may want to specify scoring function that produces <ITALIC>higher</ITALIC>
scores the further the result is from the center of the input region. You
do this by specifying a function
in which X0 is greater than X1 and X1 is greater than XC, as shown below:
</PARA><PICTURE SRC="increasing.jpg" apiSRC="CogCaliperScorerPositionNorm_increasing.jpg" /></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.#ctor(Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.SfGetXYParameters"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetXYParameters may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.Enabled"><event cref="E:Cognex.VisionPro.Caliper.CogCaliperScorer.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperScorer_Enabled--><ul /></event><summary>Whether this scorer will be used.</summary><remarks><PARA>Whether this scorer will be used.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.Scores(System.Int32)"><param name="numEdges"><PARA>The number of edges (1 or 2).</PARA></param><remarks><PARA>
Returns true if this scorer applies to the given number of edges (1 or 2), false otherwise.</PARA></remarks><summary>Whether this scorer applies for the given number of edges.</summary><returns><PARA>True if this function applies to <paramref name="numEdges" />, false otherwise.</PARA></returns></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="x0">A normalized distance value that helps describe how an edge pair candidate's position is mapped to a score. Normalized distance values between x0 and x1 are mapped to a score that is between y0 and y1, while normalized distance values on the other side of x0 are mapped to a score of y0.</param><param name="x1">A normalized distance value that helps describe how an edge pair candidate's position is mapped to a score. The value of x1 must fall between the values of xc and x0. Normalized distance values between x0 and x1 are mapped to a score that is between y0 and y1, while normalized distance values between xc and x1 are mapped to a score of y1.</param><param name="xc">A normalized distance value that helps describe how an edge pair candidate's position is mapped to a score. Normalized distance values between xc and x1 are mapped to a score of y1, while normalized distance values on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><remarks><PARA>Function that sets the individual values that define this
			<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
		as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="YO" /> is greater than or equal to <paramref name="y1" /> 
or it is not the case that 
<paramref name="x0" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="xc" /> 
or 
<paramref name="xc" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="x0" />.
</para></exception><summary>Set the parameters used to map an edge pair candidate's position to a score. When mapping, position is converted to a distance by first taking the absolute value of the positional difference between the edge pair model origin and the center of the projection region. This value is in turn divided by the expected width of the edge pair, yielding a normalized distance value. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.GetXYParameters(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="x0">A normalized distance value that helps describe how an edge pair candidate's position is mapped to a score. Normalized distance values between x0 and x1 are mapped to a score that is between y0 and y1, while normalized distance values on the other side of x0 are mapped to a score of y0.</param><param name="x1">A normalized distance value that helps describe how an edge pair candidate's position is mapped to a score. The value of x1 must fall between the values of xc and x0. Normalized distance values between x0 and x1 are mapped to a score that is between y0 and y1, while normalized distance values between xc and x1 are mapped to a score of y1.</param><param name="xc">A normalized distance value that helps describe how an edge pair candidate's position is mapped to a score. Normalized distance values between xc and x1 are mapped to a score of y1, while normalized distance values on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><summary>Get the parameters used to map an edge pair candidate's position to a score. When mapping, position is converted to a distance by first taking the absolute value of the positional difference between the edge pair model origin and the center of the projection region. This value is in turn divided by the expected width of the edge pair, yielding a normalized distance value. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary><remarks><PARA>Function that gets the individual values that define this
		<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
	as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg"><remarks><PARA>
A <see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see> that 
uses the normalized position (positive or negative) of a candidate edge or edge pair. The position 
is normalized by dividing it by the expected distance between the edges (this function
is only suitable if <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.EdgeMode" /> is
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">CogCaliperEdgeModePair</see>.
</PARA><PARA>
This is a one-sided scoring function object; you use 
<see cref="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)" /> 
to set the individual values that define this function.
</PARA><PARA>
Unlike the
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm" /> object, this object lets you score positive
and negative values. In most cases, you will specify the XC, XO, and X1 values such
that they enclose 0.0, as shown below:
</PARA><PICTURE SRC="oddball.jpg" apiSRC="CogCaliperScorerPositionNormNeg_oddball.jpg" /></remarks><summary>Scoring function which uses the normalized position of an edge pair. Negative values are allowed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.#ctor(Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.SfGetXYParameters"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetXYParameters may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.Enabled"><summary>Whether this scorer will be used.</summary><event cref="E:Cognex.VisionPro.Caliper.CogCaliperScorer.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperScorer_Enabled--><ul /></event><remarks><PARA>Whether this scorer will be used.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.Scores(System.Int32)"><param name="numEdges"><PARA>The number of edges (1 or 2).</PARA></param><remarks><PARA>
Returns true if this scorer applies to the given number of edges (1 or 2), false otherwise.</PARA></remarks><summary>Whether this scorer applies for the given number of edges.</summary><returns><PARA>True if this function applies to <paramref name="numEdges" />, false otherwise.</PARA></returns></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="x0">A normalized relative position value that helps describe how an edge pair candidate's position is mapped to a score. May be negative or positive. Normalized relative position values between x0 and x1 are mapped to a score that is between y0 and y1, while normalized relative position values on the other side of x0 are mapped to a score of y0.</param><param name="x1">A normalized relative position value that helps describe how an edge pair candidate's position is mapped to a score. May be negative or positive. The value of x1 must fall between the values of xc and x0. Normalized relative position values between x0 and x1 are mapped to a score that is between y0 and y1, while normalized relative position values between xc and x1 are mapped to a score of y1.</param><param name="xc">A normalized relative position value that helps describe how an edge pair candidate's position is mapped to a score.  Normalized relative position values between xc and x1 are mapped to a score of y1, while normalized relative position values on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><summary>Set the parameters used to map an edge pair candidate's position to a score. When mapping, the signed difference in position between the edge pair model origin and the center of the projection region is computed. This value is in turn divided by the expected width of the edge pair, yielding a normalized relative position value. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="YO" /> is greater than or equal to <paramref name="y1" /> 
or it is not the case that 
<paramref name="x0" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="xc" /> 
or 
<paramref name="xc" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="x0" />.
</para></exception><remarks><PARA>Function that sets the individual values that define this
			<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
		as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.GetXYParameters(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="x0">A normalized relative position value that helps describe how an edge pair candidate's position is mapped to a score. May be negative or positive. Normalized relative position values between x0 and x1 are mapped to a score that is between y0 and y1, while normalized relative position values on the other side of x0 are mapped to a score of y0.</param><param name="x1">A normalized relative position value that helps describe how an edge pair candidate's position is mapped to a score. May be negative or positive. The value of x1 must fall between the values of xc and x0. Normalized relative position values between x0 and x1 are mapped to a score that is between y0 and y1, while normalized relative position values between xc and x1 are mapped to a score of y1.</param><param name="xc">A normalized relative position value that helps describe how an edge pair candidate's position is mapped to a score.  Normalized relative position values between xc and x1 are mapped to a score of y1, while normalized relative position values on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><summary>Get the parameters used to map an edge pair candidate's position to a score. When mapping, the signed difference in position between the edge pair model origin and the center of the projection region is computed. This value is in turn divided by the expected width of the edge pair, yielding a normalized relative position value. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary><remarks><PARA>Function that gets the individual values that define this
		<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
	as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm"><summary>Scoring function which uses the normalized size of the difference between the candidate edge pair size and the expected edge pair size.</summary><remarks><PARA>
A <see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see> that 
uses the normalized difference between the expected distance between the edge
pairs and the actual distance between the edge pairs.
This size difference  
is normalized by dividing it by the expected distance between the edge pairs (this function
is only suitable if <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.EdgeMode" /> is
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">CogCaliperEdgeModePair</see>.
</PARA><PARA>
This is a one-sided scoring function object; you use 
<see cref="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)" /> 
to set the individual values that define this function.
</PARA><PARA>
For most applications, you specify a scoring function that produces lower
scores the greater the difference between the expected and actual edge spacing. You
do this by specifying a function
in which XC is greater than X1 and X1 is greater than X0, as shown below:
</PARA><PICTURE SRC="decreasing.jpg" apiSRC="CogCaliperScorerSizeDiffNorm_decreasing.jpg" /><PARA>
In some cases, you may want to specify scoring function that produces <ITALIC>higher</ITALIC>
scores the greater the difference between the expected and actual edge spacing. You
do this by specifying a function
in which X0 is greater than X1 and X1 is greater than XC, as shown below:
</PARA><PICTURE SRC="increasing.jpg" apiSRC="CogCaliperScorerSizeDiffNorm_increasing.jpg" /></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.#ctor(Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.SfGetXYParameters"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetXYParameters may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.Enabled"><event cref="E:Cognex.VisionPro.Caliper.CogCaliperScorer.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperScorer_Enabled--><ul /></event><summary>Whether this scorer will be used.</summary><remarks><PARA>Whether this scorer will be used.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.Scores(System.Int32)"><param name="numEdges"><PARA>The number of edges (1 or 2).</PARA></param><returns><PARA>True if this function applies to <paramref name="numEdges" />, false otherwise.</PARA></returns><summary>Whether this scorer applies for the given number of edges.</summary><remarks><PARA>
Returns true if this scorer applies to the given number of edges (1 or 2), false otherwise.</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="x0">A normalized width difference value that helps describe how an edge pair candidate's size is mapped to a score.  Normalized width differences between x0 and x1 are mapped to a score that is between y0 and y1, while normalized width differences on the other side of x0 are mapped to a score of y0.</param><param name="x1">A normalized width difference value that helps describe how an edge pair candidate's size is mapped to a score. The value of x1 must fall between the values of xc and x0.  Normalized width differences between x0 and x1 are mapped to a score that is between y0 and y1, while normalized width differences between xc and x1 are mapped to a score of y1.</param><param name="xc">A normalized width difference value that helps describe how an edge pair candidate's size is mapped to a score.  Normalized width differences between xc and x1 are mapped to a score of y1, while normalized width differences on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><summary>Set the parameters used to map an edge pair candidate's size to a score. In mapping, the absolute value of the difference between the observed edge pair width and the expected edge pair width is computed. This value is divided by the expected edge pair width to yield a normalized width difference. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="YO" /> is greater than or equal to <paramref name="y1" /> 
or it is not the case that 
<paramref name="x0" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="xc" /> 
or 
<paramref name="xc" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="x0" />.
</para></exception><remarks><PARA>Function that sets the individual values that define this
			<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
		as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.GetXYParameters(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="x0">A normalized width difference value that helps describe how an edge pair candidate's size is mapped to a score.  Normalized width differences between x0 and x1 are mapped to a score that is between y0 and y1, while normalized width differences on the other side of x0 are mapped to a score of y0.</param><param name="x1">A normalized width difference value that helps describe how an edge pair candidate's size is mapped to a score. The value of x1 must fall between the values of xc and x0.  Normalized width differences between x0 and x1 are mapped to a score that is between y0 and y1, while normalized width differences between xc and x1 are mapped to a score of y1.</param><param name="xc">A normalized width difference value that helps describe how an edge pair candidate's size is mapped to a score.  Normalized width differences between xc and x1 are mapped to a score of y1, while normalized width differences on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><summary>Get the parameters used to map an edge pair candidate's size to a score. In mapping, the absolute value of the difference between the observed edge pair width and the expected edge pair width is computed. This value is divided by the expected edge pair width to yield a normalized width difference. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary><remarks><PARA>Function that gets the individual values that define this
		<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
	as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym"><summary>Scoring function which uses the normalized size of an edge pair with a two sided mapping.</summary><remarks><PARA>
A <see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see> that 
uses the normalized difference between the expected distance between the edge
pairs and the actual distance between the edge pairs.
This size difference  
is normalized by dividing it by the expected distance between the edge pairs (this function
is only suitable if <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.EdgeMode" /> is
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">CogCaliperEdgeModePair</see>.
</PARA><PARA>
Unlike the <see cref="T:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm" /> object, this
scoring function is a two-sided scoring function object; you use the 
<see cref="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" /> function
to set the individual values that define this function. Because it is a 
two-sided function, you can specify different scoring values for edge pairs
that are larger than expected than for edge pairs that are smaller than
expected.
</PARA><PARA>
For most applications, you specify a scoring function that produces lower
scores the greater the difference between the expected and actual edge spacing 
as shown below:
</PARA><PICTURE SRC="decreasing.jpg" apiSRC="CogCaliperScorerSizeDiffNormAsym_decreasing.jpg" /><PARA>
In some cases, you may want to specify scoring function that produces <ITALIC>higher</ITALIC>
scores the greater the difference between the expected and actual edge spacing 
as shown below:
</PARA><PICTURE SRC="increasing.jpg" apiSRC="CogCaliperScorerSizeDiffNormAsym_increasing.jpg" /></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.#ctor(Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.SfGetXYParameters"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetXYParameters may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.Enabled"><remarks><PARA>Whether this scorer will be used.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this scorer will be used.</summary><event cref="E:Cognex.VisionPro.Caliper.CogCaliperScorer.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperScorer_Enabled--><ul /></event></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.Scores(System.Int32)"><param name="numEdges"><PARA>The number of edges (1 or 2).</PARA></param><remarks><PARA>
Returns true if this scorer applies to the given number of edges (1 or 2), false otherwise.</PARA></remarks><summary>Whether this scorer applies for the given number of edges.</summary><returns><PARA>True if this function applies to <paramref name="numEdges" />, false otherwise.</PARA></returns></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="x0">A normalized size difference value that helps describe how a smaller than expected edge pair candidate's size is mapped to a score. Normalized size differences between x0 and x1 are mapped to a score that is between y0 and y1, while normalized size differences between x0 and x0h are mapped to a score of y0.</param><param name="x1">A normalized size difference value that helps describe how a smaller than expected edge pair candidate's size is mapped to a score. The value of x1 must fall between the values of xc and x0. Normalized size differences between x0 and x1 are mapped to a score that is between y0 and y1, while normalized size differences between xc and x1 are mapped to a score of y1.</param><param name="xc">A normalized size difference value that helps describe how a smaller than expected edge pair candidate's size is mapped to a score. Normalized size differences between xc and x1 are mapped to a score of y1, while normalized size differences on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function for a smaller than expected edge pair. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function for a smaller than expected edge pair.  This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><param name="x0H">A normalized size difference value that helps describe how a larger than expected edge pair candidate's size is mapped to a score. Normalized size differences between x0h and x1h are mapped to a score that is between y0h and y1h, while normalized size differences between x0h and x0 are mapped to a score of y0.</param><param name="x1H">A normalized size difference value that helps describe how a larger than expected edge pair candidate's size is mapped to a score. The value of x1h must fall between the values of xch and x0h. Normalized size differences between x0h and x1h are mapped to a score that is between y0h and y1h, while normalized size differences between xch and x1h are mapped to a score of y1h.</param><param name="xch">A normalized size difference value that helps describe how a larger than expected edge pair candidate's size is mapped to a score. Normalized size differences between xch and x1h are mapped to a score of y1h, while normalized size differences on the other side of xch are mapped to a score of zero.</param><param name="y0H">The maximum score that will be produced by this scoring function for a larger than expected edge pair. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1H">The minimum non-zero score that will be produced by this scoring function for a larger than expected edge pair. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="YO" /> is greater than or equal to <paramref name="y1" />;
<paramref name="YOH" /> is greater than or equal to <paramref name="y1H" />; 
it is not the case that 
<paramref name="x0" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="xc" />;
it is not the case that  
<paramref name="xc" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="x0" />;
it is not the case that 
<paramref name="x0H" /> is greater than <paramref name="x1H" /> and <paramref name="x1H" /> is greater than <paramref name="xch" />;
it is not the case that  
<paramref name="xch" /> is greater than <paramref name="x1H" /> and <paramref name="x1H" /> is greater than <paramref name="x0H" />; 
or the greater of <paramref name="x0" /> and <paramref name="xc" /> is less than or
equal to the lesser of <paramref name="x0H" /> and <paramref name="xch" />.
</para></exception><summary>Set the parameters used to map an edge pair candidate's size to a score. In mapping, the signed difference between the observed edge pair width and the expected edge pair width is computed. This value is divided by the expected edge pair width to yield a normalized size difference. When this value is positive, the observed size was larger than the expected size; when this value is negative the observed size was smaller than the expected size. Score is a unitless value in the range of 0.0 (no edge found) to 1.0 (edge found).</summary><remarks><PARA>Function that sets the individual values that define this scoring function as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="SetXYParameters_diagram.jpg" /></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.GetXYParameters(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="x0">A normalized size difference value that helps describe how a smaller than expected edge pair candidate's size is mapped to a score. Normalized size differences between x0 and x1 are mapped to a score that is between y0 and y1, while normalized size differences between x0 and x0h are mapped to a score of y0.</param><param name="x1">A normalized size difference value that helps describe how a smaller than expected edge pair candidate's size is mapped to a score. The value of x1 must fall between the values of xc and x0. Normalized size differences between x0 and x1 are mapped to a score that is between y0 and y1, while normalized size differences between xc and x1 are mapped to a score of y1.</param><param name="xc">A normalized size difference value that helps describe how a smaller than expected edge pair candidate's size is mapped to a score. Normalized size differences between xc and x1 are mapped to a score of y1, while normalized size differences on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function for a smaller than expected edge pair. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function for a smaller than expected edge pair.  This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><param name="x0H">A normalized size difference value that helps describe how a larger than expected edge pair candidate's size is mapped to a score. Normalized size differences between x0h and x1h are mapped to a score that is between y0h and y1h, while normalized size differences between x0h and x0 are mapped to a score of y0.</param><param name="x1H">A normalized size difference value that helps describe how a larger than expected edge pair candidate's size is mapped to a score. The value of x1h must fall between the values of xch and x0h. Normalized size differences between x0h and x1h are mapped to a score that is between y0h and y1h, while normalized size differences between xch and x1h are mapped to a score of y1h.</param><param name="xch">A normalized size difference value that helps describe how a larger than expected edge pair candidate's size is mapped to a score. Normalized size differences between xch and x1h are mapped to a score of y1h, while normalized size differences on the other side of xch are mapped to a score of zero.</param><param name="y0H">The maximum score that will be produced by this scoring function for a larger than expected edge pair. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1H">The minimum non-zero score that will be produced by this scoring function for a larger than expected edge pair. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><remarks><PARA>Function that gets the individual values that define this scoring function as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="GetXYParameters_diagram.jpg" /></remarks><summary>Get the parameters used to map an edge pair candidate's size to a score. In mapping, the signed difference between the observed edge pair width and the expected edge pair width is computed. This value is divided by the expected edge pair width to yield a normalized size difference. When this value is positive, the observed size was larger than the expected size; when this value is negative the observed size was smaller than the expected size. Score is a unitless value in the range of 0.0 (no edge found) to 1.0 (edge found).</summary></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm"><remarks><PARA>
A <see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see> that 
uses the normalized distance between the edge
pairs.
The distance between the edge pairs is normalized 
by dividing it by the expected distance between the edge pairs (this function
is only suitable if <see cref="P:Cognex.VisionPro.Caliper.CogCaliper.EdgeMode" /> is
<see cref="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants">CogCaliperEdgeModePair</see>).
</PARA><PARA>
This is a one-sided scoring function object; you use 
<see cref="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)" /> 
to set the individual values that define this function.
</PARA><PARA>
To create a scoring function that produces lower scores for 
larger edge pair sizes, specify a function
in which XC is greater than X1 and X1 is greater than X0, as shown below:
</PARA><PICTURE SRC="decreasing.jpg" apiSRC="CogCaliperScorerSizeNorm_decreasing.jpg" /><PARA>
To create a scoring function that produces higher scores 
for larger edge pair sizes, specify a function
in which X0 is greater than X1 and X1 is greater than XC, as shown below:
</PARA><PICTURE SRC="increasing.jpg" apiSRC="CogCaliperScorerSizeNorm_increasing.jpg" /></remarks><summary>Scoring function which uses the normalized size of an edge pair.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.#ctor(Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.SfGetXYParameters"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetXYParameters may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.Enabled"><summary>Whether this scorer will be used.</summary><event cref="E:Cognex.VisionPro.Caliper.CogCaliperScorer.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperScorer_Enabled--><ul /></event><remarks><PARA>Whether this scorer will be used.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.Scores(System.Int32)"><param name="numEdges"><PARA>The number of edges (1 or 2).</PARA></param><remarks><PARA>
Returns true if this scorer applies to the given number of edges (1 or 2), false otherwise.</PARA></remarks><returns><PARA>True if this function applies to <paramref name="numEdges" />, false otherwise.</PARA></returns><summary>Whether this scorer applies for the given number of edges.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.SetXYParameters(System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="x0">A normalized width value that helps describe how an edge pair candidate's size is mapped to a score. Normalized width values between x0 and x1 are mapped to a score that is between y0 and y1, while normalized width values on the other side of x0 are mapped to a score of y0.</param><param name="x1">A normalized width value that helps describe how an edge pair candidate's size is mapped to a score. The value of x1 must fall between the values of xc and x0. Normalized width values between x0 and x1 are mapped to a score that is between y0 and y1, while normalized width values between xc and x1 are mapped to a score of y1.</param><param name="xc">A normalized width value that helps describe how an edge pair candidate's size is mapped to a score. Normalized width values between xc and x1 are mapped to a score of y1, while normalized width values on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><remarks><PARA>Function that sets the individual values that define this
			<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
		as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="YO" /> is greater than or equal to <paramref name="y1" /> 
or it is not the case that 
<paramref name="x0" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="xc" /> 
or 
<paramref name="xc" /> is greater than <paramref name="x1" /> and <paramref name="x1" /> is greater than <paramref name="x0" />.
</para></exception><summary>Set the parameters used to map an edge pair candidate's size to a score. In mapping, the observed width of the edge pair is divided by the expected width of the edge pair, yielding a normalized width value. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.GetXYParameters(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="x0">A normalized width value that helps describe how an edge pair candidate's size is mapped to a score. Normalized width values between x0 and x1 are mapped to a score that is between y0 and y1, while normalized width values on the other side of x0 are mapped to a score of y0.</param><param name="x1">A normalized width value that helps describe how an edge pair candidate's size is mapped to a score. The value of x1 must fall between the values of xc and x0. Normalized width values between x0 and x1 are mapped to a score that is between y0 and y1, while normalized width values between xc and x1 are mapped to a score of y1.</param><param name="xc">A normalized width value that helps describe how an edge pair candidate's size is mapped to a score. Normalized width values between xc and x1 are mapped to a score of y1, while normalized width values on the other side of xc are mapped to a score of zero.</param><param name="y0">The maximum score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be greater than the y1 value.</param><param name="y1">The minimum non-zero score that will be produced by this scoring function. This unitless value is in the range of 0.0 through 1.0, and must be less than the y0 value.</param><summary>Get the parameters used to map an edge pair candidate's size to a score. In mapping, the observed width of the edge pair is divided by the expected width of the edge pair, yielding a normalized width value. Score is a unitless value in the range of 0.0 (no edge found) through 1.0 (edge found).</summary><remarks><PARA>Function that gets the individual values that define this
		<see cref="u:Measurement.Caliper.Theory.Caliper" cgnxAnchor="scoring_functions">scoring function</see>
	as
	shown in the following figure:</PARA><PICTURE SRC="diagram.jpg" apiSRC="Caliper_oneside_diagram.jpg" /><PARA>
		If 
		<paramref name="x1" /> is less than <paramref name="x0" />
			raw scores above <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="xc" /> and <paramref name="x1" /> are mapped to <paramref name="y1" />.
			Raw scores below <paramref name="xc" /> are mapped to a score of 0.
	</PARA><PARA>
		If
		<paramref name="x0" /> is less than <paramref name="x1" />
			raw scores below  <paramref name="x0" /> are mapped to <paramref name="y0" />,
			raw scores between <paramref name="x1" /> and <paramref name="xc" /> are mapped to <paramref name="y1" />.
			Raw scores above  <paramref name="xc" /> are mapped to a score of 0.
	</PARA></remarks></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle"><summary>Returns 1 if the candidate edge pair straddles found position, else 0.</summary><remarks><PARA>Common interface for all scorers. This interface lets
	you enable and disable an individual scoring function.</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle.#ctor(Cognex.VisionPro.Caliper.CogCaliperScorerStraddle)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle.Enabled"><remarks><PARA>Whether this scorer will be used.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this scorer will be used.</summary><event cref="E:Cognex.VisionPro.Caliper.CogCaliperScorer.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperScorer_Enabled--><ul /></event></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle.Scores(System.Int32)"><param name="numEdges"><PARA>The number of edges (1 or 2).</PARA></param><returns><PARA>True if this function applies to <paramref name="numEdges" />, false otherwise.</PARA></returns><remarks><PARA>
Returns true if this scorer applies to the given number of edges (1 or 2), false otherwise.</PARA></remarks><summary>Whether this scorer applies for the given number of edges.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorers"><remarks><PARA>Collection of <see cref="T:Cognex.VisionPro.Caliper.CogCaliperScorer" /> objects.</PARA></remarks><summary>Collection of caliper scorers.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorers.#ctor(Cognex.VisionPro.Caliper.CogCaliperScorers)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorers.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorers.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorers.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorers.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorers.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorers.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperScorers.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorers.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorers.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorers.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorers.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorers.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorers.Clear"><summary>Removes all items from this collection.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorers.Move(System.Int32,System.Int32)"><param name="fromIndex">The index of the item to move.</param><param name="toIndex">The index to which the item will be moved.</param><summary>Moves the selected item to a new index in this collection.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorers.IndexOf(Cognex.VisionPro.Caliper.ICogCaliperScorer)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorers.Insert(Cognex.VisionPro.Caliper.ICogCaliperScorer,System.Int32)"><param name="value">The item to be inserted.</param><param name="index">The index at which to insert the item.</param><summary>Inserts the given item at the specified index.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorers.Add(Cognex.VisionPro.Caliper.ICogCaliperScorer)"><param name="value">The item to be added.</param><summary>Adds the given item to the end of this collection.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperScorers.RemoveAt(System.Int32)"><param name="index">The index of the item to remove.</param><summary>Removes the item at the specified index.</summary></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorers.MovedItem"><summary>Occurs after an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorers.MovingItem"><summary>Occurs before an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorers.ReplacedItem"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorers.ReplacingItem"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorers.RemovedItem"><summary>Occurs after an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorers.RemovingItem"><summary>Occurs before an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorers.InsertedItem"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorers.InsertingItem"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorers.Cleared"><summary>Occurs after this collection is cleared.</summary></member><member name="E:Cognex.VisionPro.Caliper.CogCaliperScorers.Clearing"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperTool"><summary>Edge-based caliper tool.</summary><remarks><PARA>Primary interface of a CogCaliperTool.</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperTool.#ctor(Cognex.VisionPro.Caliper.CogCaliperTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Region may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfResults"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Results may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperTool.Results"><remarks><PARA>A <see cref="T:Cognex.VisionPro.Caliper.CogCaliperResults" /> object
	containing the results of the last run of the tool. This property contains
	the results of the last call to <see cref="M:Cognex.VisionPro.Caliper.CogCaliperTool.Run" />, not the
	last call to <see cref="M:Cognex.VisionPro.Caliper.CogCaliper.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.CogRectangleAffine)">ICogCaliper.Execute</see>.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperTool_Region--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfRegion" /></li></ul></event><summary>Results from the last invocation of Run.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperTool.Region"><remarks><PARA>The input <!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Measurement.Caliper.Walkthrough.CaliperInputRegion">region</see> for this tool. 
	Only regions of type 
	<see cref="T:Cognex.VisionPro.CogRectangleAffine" /> are supported. 
	</PARA><DEFAULT>A default-constructed 
	<see cref="T:Cognex.VisionPro.CogRectangleAffine" /></DEFAULT></remarks><summary>Region of interest.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperTool_Region--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfRegion" /></li></ul></event></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperTool.InputImage"><summary>Returns/sets the input image.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfInputImage" /></li></ul></event><remarks><PARA>The input <see cref="T:Cognex.VisionPro.CogImage8Grey" /> used by this Caliper tool.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperTool.RunParams"><summary>Parameters used to run the caliper.</summary><remarks><PARA>An <see cref="T:Cognex.VisionPro.Caliper.CogCaliper" /> containing the parameters used to run the caliper tool. These
parameters are not used if you call the <see cref="M:Cognex.VisionPro.Caliper.CogCaliper.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.CogRectangleAffine)" />
function.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfRunParams" /></li></ul></event></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperTool.CurrentRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfCurrentRecordEnable" /></li></ul></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.Caliper.CogCaliperCurrentRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Caliper.CogCaliperCurrentRecordConstants">InputImage</see> + 
				<see cref="T:Cognex.VisionPro.Caliper.CogCaliperCurrentRecordConstants">Region</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperTool.LastRunRecordDiagEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordDiagConstants" />.  These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordDiagConstants">InputImageByReference</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfLastRunRecordDiagEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperTool.LastRunRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordConstants">Edges</see> + 
	<see cref="T:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordConstants">ProjectionGraph</see> + 
	<see cref="T:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordConstants">FilteredProjectionGraph</see> + 
	<see cref="T:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordConstants">Edges2</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfLastRunRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogCaliperTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperTool.Run"><summary>Runs the tool using the current parameter settings.</summary><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
		
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.Caliper.CogCaliperTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.Caliper.CogCaliperTool" /> returns or in a
		<event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.Caliper.CogCaliperTool.SfResults" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><remarks><PARA>Runs the caliper tool using the supplied 
	<see cref="P:Cognex.VisionPro.Caliper.CogCaliperTool.Region" />,
	<see cref="P:Cognex.VisionPro.Caliper.CogCaliperTool.InputImage" />, and
	<see cref="P:Cognex.VisionPro.Caliper.CogCaliperTool.RunParams" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogCaliperTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindEllipseResult"><summary>Class that contains result information specific to each data point found by the calipers.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseResult.#ctor(Cognex.VisionPro.Caliper.CogFindEllipseResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResult.CaliperResults"><summary>Returns the complete set of caliper results for this data point.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResult.DistanceToEllipse"><summary>Returns the minimum distance from the data point of this result to the best fit Ellipse that was found.  This measurement is available regardless of whether or not the data was used for the fit.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResult.Found"><summary>Indicates whether the caliper found an appropriate edge point or not.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResult.Used"><summary>If true then this data point was used to perform the shape fitting.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResult.Y"><summary>The Y component of the edge point found by the caliper.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResult.X"><summary>The X component of the edge point found by the caliper.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResult.ID"><summary>A unique ID used to identify this CogFindEllipseResult.  This ID also corresponds to the index of this result in the CogFindEllipseResults collection to which this result belongs.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseResult.CreateResultGraphics(Cognex.VisionPro.Caliper.CogFindEllipseResultGraphicConstants)"><param name="graphicOptions">n/a</param><summary>Creates a composite result graphic containing child graphics specified by GraphicOptions which is a bitwise combination of CogFindEllipseResultGraphicConstants.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindEllipseResults"><summary>Class which contains the ellipse finder results.  Primary interface provides access to the best fit ellipse, an interpolated elliptical arc, and a collection of results specific to each edge point found by the calipers.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseResults.#ctor(Cognex.VisionPro.Caliper.CogFindEllipseResults)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseResults.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResults.NumPointsUsed"><summary>Number of points used to perform the Ellipse fitting.  May be less than the number of points found by calipers if some data points were ignored.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResults.NumPointsFound"><summary>Number of calipers that found an edge point.  May be greater than the number of points used for the Ellipse fitting if some data points were ignored.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResults.RMSError"><summary>Root mean square error for the fitting operation. It is computed by taking the square root of the mean of the squares of the individual errors.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResults.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResults.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResults.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseResults.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseResults.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseResults.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseResults.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseResults.IndexOf(Cognex.VisionPro.Caliper.CogFindEllipseResult)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseResults.GetEllipse"><summary>Returns a copy of the found Ellipse.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseResults.GetEllipticalArc"><summary>Returns an EllipticalArc that was interpolated from a combination of the found Ellipse and the expected EllipticalArc provided in the run parameters.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindEllipse"><summary>Class which contains the run parameters of an ellipse finder.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipse.#ctor(Cognex.VisionPro.Caliper.CogFindEllipse)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipse.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipse.SfNumCalipers"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumCalipers may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipse.SfCaliperSearchLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperSearchLength may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipse.SfCaliperProjectionLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperProjectionLength may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipse.SfCaliperRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperRunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipse.SfExpectedEllipticalArc"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExpectedEllipticalArc may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipse.SfNumToIgnore"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumToIgnore may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipse.SfDecrementNumToIgnore"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DecrementNumToIgnore may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipse.SfCaliperSearchDirection"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperSearchDirection may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipse.SfExpectedOrientation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExpectedOrientation may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipse.SfFitConstraint"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FitConstraint may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipse.FitConstraint"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>Bitwise OR of CogFindEllipseFitConstraintConstants.</value><summary>Which ellipse fitting criteria will be used.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipse.ExpectedOrientation"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>The orientation angle that the ellipse will be constrained to if orientation is constrained.</summary><value>Orientation angle in radians.</value></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipse.CaliperSearchDirection"><summary>Indicates whether each caliper should search inward towards the center of the Ellipse, or outward away from the center of the Ellipse.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipse.DecrementNumToIgnore"><summary>If DecrementNumToIgnore is true then the number of points ignored is actually (NumToIgnore - Number of calipers that found no edge).</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipse.NumToIgnore"><summary>The number of points that will be ignored in the fitting operation.  If DecrementNumToIgnore is true then the number of points ignored is actually (NumToIgnore - Number of calipers that found no edge).</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipse.ExpectedEllipticalArc"><summary>The expected EllipticalArc which is used to position the calipers for finding the Ellipse.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipse.CaliperRunParams"><summary>Parameters used to run the calipers.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipse.CaliperProjectionLength"><summary>The length of each caliper region along the caliper projection direction.  Specified in units of the selected space of the input image.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipse.CaliperSearchLength"><summary>The length of each caliper region along the caliper search direction.  Specified in units of the selected space of the input image.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipse.NumCalipers"><summary>Number of calipers used to find the Ellipse.  NumCalipers - NumToIgnore must be greater than or equal to the minimum number of points required to find the shape.  For example, minimum points for a line = 2, circle = 3, &amp; ellipse = 5.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipse.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipse.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipse.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipse.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipse.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipse.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipse.Execute(Cognex.VisionPro.CogImage8Grey)"><param name="image"></param><summary>Finds a Ellipse in the provided image by fitting the highest scoring edge points found by a suite of calipers defined by the run parameters.</summary></member><member name="E:Cognex.VisionPro.Caliper.CogFindEllipse.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindEllipseTool"><summary>Tool which finds an ellipse in a provided image by fitting the highest scoring edge points found by a suite of calipers.  This tool encompasses all of the interfaces required to run an ellipse finder inspection.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseTool.#ctor(Cognex.VisionPro.Caliper.CogFindEllipseTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseTool.SfResults"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Results may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseTool.Results"><summary>Results from the last invocation of Run.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseTool.RunParams"><summary>The run parameters for this Ellipse finder tool.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseTool.InputImage"><summary>Sets/Gets the image used to perform the find Ellipse inspection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseTool.CurrentRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseTool.LastRunRecordDiagEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseTool.LastRunRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindEllipseTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseTool.Run"><summary>Runs the tool using the current parameter settings.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindEllipseTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindCircleResult"><summary>Class that contains result information specific to each data point found by the calipers.</summary><remarks><PARA>Interface that provides result information specific to each data point found by the calipers.</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleResult.#ctor(Cognex.VisionPro.Caliper.CogFindCircleResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResult.CaliperResults"><remarks><PARA>Returns the complete set of <see cref="T:Cognex.VisionPro.Caliper.CogCaliperResults" /> for this data point. 
	The caliper result with the highest score was selected for fitting.</PARA></remarks><summary>Returns the complete set of caliper results for this data point.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResult.DistanceToCircle"><remarks><PARA>
	Returns the minimum distance from the data point of this result to the best fit 
	<see cref="T:Cognex.VisionPro.CogCircle" /> that was found.  
	This measurement is available regardless of whether or not this point was used for the fit.
	</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogFindEdgeNotFoundException" cgnxHRESULT="E_CogFind_EdgeNotFound"><para><see cref="P:Cognex.VisionPro.Caliper.CogFindCircleResult.Found" /> is false.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFindShapeNotFoundException" cgnxHRESULT="E_CogFind_ShapeNotFound"><para>The fitting tool did not find a shape.</para></exception><summary>Returns the minimum distance from the data point of this result to the best fit Circle that was found.  This measurement is available regardless of whether or not the data was used for the fit.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResult.Found"><summary>Indicates whether the caliper found an appropriate edge point or not.</summary><remarks><PARA>Indicates whether the caliper found an appropriate edge point or not.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResult.Used"><summary>If true then this data point was used to perform the shape fitting.</summary><remarks><PARA>If true then this data point was used to perform the shape fitting.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResult.Y"><summary>The Y component of the edge point found by the caliper.</summary><remarks><PARA>The Y component of the edge point found by the caliper.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogFindEdgeNotFoundException" cgnxHRESULT="E_CogFind_EdgeNotFound"><para><see cref="P:Cognex.VisionPro.Caliper.CogFindCircleResult.Found" /> is false.</para></exception></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResult.X"><remarks><PARA>The X component of the edge point found by the caliper.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogFindEdgeNotFoundException" cgnxHRESULT="E_CogFind_EdgeNotFound"><para><see cref="P:Cognex.VisionPro.Caliper.CogFindCircleResult.Found" /> is false.</para></exception><summary>The X component of the edge point found by the caliper.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResult.ID"><summary>A unique ID used to identify this CogFindCircleResult.  This ID also corresponds to the index of this result in the CogFindCircleResults collection to which this result belongs.</summary><remarks><PARA>
	A unique ID used to identify this result.  This ID also corresponds to the 
	index of this result in the <see cref="T:Cognex.VisionPro.Caliper.CogFindCircleResults" /> collection to 
	which this result belongs.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleResult.CreateResultGraphics(Cognex.VisionPro.Caliper.CogFindCircleResultGraphicConstants)"><param name="graphicOptions"><PARA>The bitwise combination of one or more values from <see cref="T:Cognex.VisionPro.Caliper.CogFindCircleResultGraphicConstants" />.</PARA></param><remarks><PARA>Creates a composite result graphic containing child graphics specified by GraphicOptions which is a bitwise combination of <see cref="T:Cognex.VisionPro.Caliper.CogFindCircleResultGraphicConstants" />.</PARA><PARA>
The graphics are drawn in green in if the edge point was found and used for the fit; otherwise 
red is used. If no edge was found, then only the caliper region is drawn. In all cases, the graphics'
<see cref="P:Cognex.VisionPro.CogCompositeShape.Interactive" /> properties are set to true.
</PARA><NOTE>
The <see cref="P:Cognex.VisionPro.CogCompositeShape.ID" /> of the returned shape is 
set to the <see cref="P:Cognex.VisionPro.Caliper.CogFindCircleResult.ID" /> of this object. 
</NOTE></remarks><returns><PARA>The returned graphics.</PARA></returns><summary>Creates a composite result graphic containing child graphics specified by GraphicOptions which is a bitwise combination of CogFindCircleResultGraphicConstants.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindCircleResults"><summary>Class which contains the circle finder results.  Primary interface provides access to the best fit circle, an interpolated circular arc, and a collection of results specific to each edge point found by the calipers.</summary><remarks><PARA>Interface which provides access to the circle finder results.  Provides access to the best fit circle, an interpolated circular arc, and a collection of results specific to each edge point found by the calipers.</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleResults.#ctor(Cognex.VisionPro.Caliper.CogFindCircleResults)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleResults.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResults.NumPointsUsed"><exception cref="T:Cognex.VisionPro.Exceptions.CogFindShapeNotFoundException" cgnxHRESULT="E_CogFind_ShapeNotFound"><para>Not enough caliper edges were found.</para></exception><summary>Number of points used to perform the Circle fitting.  May be less than the number of points found by calipers if some data points were ignored.</summary><remarks><PARA>Number of points used to perform the Circle fitting.  May be less than the number of points found by calipers if some data points were ignored.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResults.NumPointsFound"><summary>Number of calipers that found an edge point.  May be greater than the number of points used for the Circle fitting if some data points were ignored.</summary><remarks><PARA>Number of calipers that found an edge point.  May be greater than the number of points used for the Circle fitting if some data points were ignored.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResults.RMSError"><summary>Root mean square error for the fitting operation. It is computed by taking the square root of the mean of the squares of the individual errors.</summary><remarks><PARA>Root mean square error for the fitting operation. It is computed by taking the square root of the mean of the squares of the individual errors.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogFindShapeNotFoundException" cgnxHRESULT="E_CogFind_ShapeNotFound"><para>
	Not enough caliper edges were found to fit a shape.
	</para></exception></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResults.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResults.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResults.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleResults.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleResults.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleResults.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleResults.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleResults.IndexOf(Cognex.VisionPro.Caliper.CogFindCircleResult)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleResults.GetCircle"><summary>Returns a copy of the found Circle.</summary><remarks><PARA>Returns a copy of the found <see cref="T:Cognex.VisionPro.CogCircle" />. If no 
	shape could be fit to the generated points, NULL is returned.</PARA><PARA>
	The selected space of the returned  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogCircle" />
				--><see cref="T:Cognex.VisionPro.Caliper.CogCircle" /> is set to the selected 
	space of the input image.
	</PARA></remarks><returns><PARA>The returned  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogCircle" />
				--><see cref="T:Cognex.VisionPro.Caliper.CogCircle" />.</PARA></returns></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleResults.GetCircularArc"><remarks><PARA>
	Returns a <see cref="T:Cognex.VisionPro.CogCircularArc" /> based on the 
	<see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.ExpectedCircularArc">expected circular arc</see> 
	that you specified.
	</PARA><PARA>
	The returned  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogCircularArc" />
				--><see cref="T:Cognex.VisionPro.Caliper.CogCircularArc" /> is computed by applying the 
	<see cref="P:Cognex.VisionPro.CogCircularArc.AngleStart" /> and 
	<see cref="P:Cognex.VisionPro.CogCircularArc.AngleSpan" /> properties of 
	the expected circular arc to the fitted circle. 
	</PARA></remarks><summary>Returns a CircularArc that was interpolated from a combination of the found Circle and the expected CircularArc provided in the run parameters.</summary><returns><PARA>The returned  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogCircularArc" />
				--><see cref="T:Cognex.VisionPro.Caliper.CogCircularArc" />.</PARA></returns></member><member name="T:Cognex.VisionPro.Caliper.CogFindCircle"><remarks><PARA>Interface which provides access to both the circle finder run parameters and an execute method for performing a circle finder inspection.</PARA></remarks><summary>Class which contains the run parameters of a circle finder.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircle.#ctor(Cognex.VisionPro.Caliper.CogFindCircle)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircle.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircle.SfNumCalipers"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumCalipers may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircle.SfCaliperSearchLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperSearchLength may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircle.SfCaliperProjectionLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperProjectionLength may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircle.SfCaliperRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperRunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircle.SfExpectedCircularArc"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExpectedCircularArc may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircle.SfNumToIgnore"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumToIgnore may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircle.SfDecrementNumToIgnore"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DecrementNumToIgnore may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircle.SfCaliperSearchDirection"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperSearchDirection may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircle.SfRadiusConstraint"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusConstraint may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircle.SfRadiusConstraintEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusConstraintEnabled may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircle.RadiusConstraintEnabled"><remarks><PARA>
	If true, then the radius of the fit circle is constrained to 
	<see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.RadiusConstraint" />.
</PARA><DEFAULT>False</DEFAULT></remarks><summary>Whether radius will be constrained for the fit.</summary><event cref="E:Cognex.VisionPro.Caliper.CogFindCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes.
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircle_RadiusConstraintEnabled--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfRadiusConstraintEnabled" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Create a CogFindCircle operator and a results object
Dim myFCO As New CogFindCircle
Dim myArc As New CogCircularArc
Dim myFCOResults As New CogFindCircleResults
Dim i As Integer

' Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3
myFCO.NumCalipers = 10
myFCO.CaliperProjectionLength = 25
myFCO.CaliperSearchLength = 35
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward
myFCO.DecrementNumToIgnore = True
myFCO.RadiusConstraint = myArc.Radius
myFCO.RadiusConstraintEnabled = True

' Execute it
myFCOResults = myFCO.Execute(CType(myAFT.OutputImage, CogImage8Grey))
  ' Display the found circle
CogDisplay1.StaticGraphics.Clear()
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle.CopyBase(CogCopyShapeConstants.All), "")

' Display some information about the result
lblRes.text = "Points found; " &amp; myFCOResults.NumPointsFound _
                &amp; " points used; " &amp; myFCOResults.NumPointsUsed _
                &amp; " RMS error: " &amp; myFCOResults.RMSError

' And display some information about each individual result

For i = 0 To myFCOResults.Count - 1
  LstRes.Items.Add("Point (" &amp; myFCOResults(i).X.ToString &amp; ", " &amp; myFCOResults(i).Y.ToString _
            &amp; ") Found: " &amp; myFCOResults(i).Found &amp; " Used: " &amp; myFCOResults(i).Used _
            &amp; " is " &amp; myFCOResults(i).DistanceToCircle &amp; " from found shape.")
Next i
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

    
// Create a CogFindCircle operator and a results object
  CogFindCircle myFCO = new CogFindCircle();
  CogCircularArc myArc = new CogCircularArc();
  CogFindCircleResults myFCOResults = new CogFindCircleResults();
  int i;

// Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc;
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3;
myFCO.NumCalipers = 10;
myFCO.CaliperProjectionLength = 25;
myFCO.CaliperSearchLength = 35;
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward;
myFCO.DecrementNumToIgnore = true;
myFCO.RadiusConstraint = myArc.Radius;
myFCO.RadiusConstraintEnabled = true;

// Execute it
myFCOResults = myFCO.Execute((CogImage8Grey)myAFT.OutputImage );
// Display the found circle
CogDisplay1.StaticGraphics.Clear();
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle().CopyBase(CogCopyShapeConstants.All), "");

// Display some information about the result
lblRes.Text = "Points found; " + myFCOResults.NumPointsFound  
                + " points used; " + myFCOResults.NumPointsUsed  
                + " RMS error: " + myFCOResults.RMSError;

// And display some information about each individual result

for (i = 0; i &lt; myFCOResults.Count; i++)
  {
  LstRes.Items.Add("Point (" + myFCOResults[i].X  + ", " + myFCOResults[i].Y   
            + ") Found: " + myFCOResults[i].Found + " Used: " + myFCOResults[i].Used  
            + " is " + myFCOResults[i].DistanceToCircle + " from found shape.");
  }
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircle.RadiusConstraint"><event cref="E:Cognex.VisionPro.Caliper.CogFindCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes.
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircle_RadiusConstraint--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfRadiusConstraint" /></li></ul></event><summary>The value that the radius of the circle will be constrained to if radius is constrained.</summary><remarks><PARA>
	If <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.RadiusConstraintEnabled" /> is true, the radius of the fit circle is constrained 
	to the value of this property.
</PARA><DEFAULT>100</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than or equal to 0.
	</para></exception><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Create a CogFindCircle operator and a results object
Dim myFCO As New CogFindCircle
Dim myArc As New CogCircularArc
Dim myFCOResults As New CogFindCircleResults
Dim i As Integer

' Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3
myFCO.NumCalipers = 10
myFCO.CaliperProjectionLength = 25
myFCO.CaliperSearchLength = 35
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward
myFCO.DecrementNumToIgnore = True
myFCO.RadiusConstraint = myArc.Radius
myFCO.RadiusConstraintEnabled = True

' Execute it
myFCOResults = myFCO.Execute(CType(myAFT.OutputImage, CogImage8Grey))
  ' Display the found circle
CogDisplay1.StaticGraphics.Clear()
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle.CopyBase(CogCopyShapeConstants.All), "")

' Display some information about the result
lblRes.text = "Points found; " &amp; myFCOResults.NumPointsFound _
                &amp; " points used; " &amp; myFCOResults.NumPointsUsed _
                &amp; " RMS error: " &amp; myFCOResults.RMSError

' And display some information about each individual result

For i = 0 To myFCOResults.Count - 1
  LstRes.Items.Add("Point (" &amp; myFCOResults(i).X.ToString &amp; ", " &amp; myFCOResults(i).Y.ToString _
            &amp; ") Found: " &amp; myFCOResults(i).Found &amp; " Used: " &amp; myFCOResults(i).Used _
            &amp; " is " &amp; myFCOResults(i).DistanceToCircle &amp; " from found shape.")
Next i
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

    
// Create a CogFindCircle operator and a results object
  CogFindCircle myFCO = new CogFindCircle();
  CogCircularArc myArc = new CogCircularArc();
  CogFindCircleResults myFCOResults = new CogFindCircleResults();
  int i;

// Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc;
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3;
myFCO.NumCalipers = 10;
myFCO.CaliperProjectionLength = 25;
myFCO.CaliperSearchLength = 35;
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward;
myFCO.DecrementNumToIgnore = true;
myFCO.RadiusConstraint = myArc.Radius;
myFCO.RadiusConstraintEnabled = true;

// Execute it
myFCOResults = myFCO.Execute((CogImage8Grey)myAFT.OutputImage );
// Display the found circle
CogDisplay1.StaticGraphics.Clear();
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle().CopyBase(CogCopyShapeConstants.All), "");

// Display some information about the result
lblRes.Text = "Points found; " + myFCOResults.NumPointsFound  
                + " points used; " + myFCOResults.NumPointsUsed  
                + " RMS error: " + myFCOResults.RMSError;

// And display some information about each individual result

for (i = 0; i &lt; myFCOResults.Count; i++)
  {
  LstRes.Items.Add("Point (" + myFCOResults[i].X  + ", " + myFCOResults[i].Y   
            + ") Found: " + myFCOResults[i].Found + " Used: " + myFCOResults[i].Used  
            + " is " + myFCOResults[i].DistanceToCircle + " from found shape.");
  }
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperSearchDirection"><remarks><PARA>Indicates whether each caliper should search inward towards the center of the circle, or outward away from the center of the Circle.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Caliper.CogFindCircleSearchDirectionConstants">Inward</see>.</DEFAULT></remarks><summary>Indicates whether each caliper should search inward towards the center of the Circle, or outward away from the center of the Circle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is not a member of <see cref="T:Cognex.VisionPro.Caliper.CogFindCircleSearchDirectionConstants" />.
	</para></exception><event cref="E:Cognex.VisionPro.Caliper.CogFindCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircle_CaliperSearchDirection--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfCaliperSearchDirection" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Create a CogFindCircle operator and a results object
Dim myFCO As New CogFindCircle
Dim myArc As New CogCircularArc
Dim myFCOResults As New CogFindCircleResults
Dim i As Integer

' Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3
myFCO.NumCalipers = 10
myFCO.CaliperProjectionLength = 25
myFCO.CaliperSearchLength = 35
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward
myFCO.DecrementNumToIgnore = True
myFCO.RadiusConstraint = myArc.Radius
myFCO.RadiusConstraintEnabled = True

' Execute it
myFCOResults = myFCO.Execute(CType(myAFT.OutputImage, CogImage8Grey))
  ' Display the found circle
CogDisplay1.StaticGraphics.Clear()
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle.CopyBase(CogCopyShapeConstants.All), "")

' Display some information about the result
lblRes.text = "Points found; " &amp; myFCOResults.NumPointsFound _
                &amp; " points used; " &amp; myFCOResults.NumPointsUsed _
                &amp; " RMS error: " &amp; myFCOResults.RMSError

' And display some information about each individual result

For i = 0 To myFCOResults.Count - 1
  LstRes.Items.Add("Point (" &amp; myFCOResults(i).X.ToString &amp; ", " &amp; myFCOResults(i).Y.ToString _
            &amp; ") Found: " &amp; myFCOResults(i).Found &amp; " Used: " &amp; myFCOResults(i).Used _
            &amp; " is " &amp; myFCOResults(i).DistanceToCircle &amp; " from found shape.")
Next i
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

    
// Create a CogFindCircle operator and a results object
  CogFindCircle myFCO = new CogFindCircle();
  CogCircularArc myArc = new CogCircularArc();
  CogFindCircleResults myFCOResults = new CogFindCircleResults();
  int i;

// Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc;
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3;
myFCO.NumCalipers = 10;
myFCO.CaliperProjectionLength = 25;
myFCO.CaliperSearchLength = 35;
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward;
myFCO.DecrementNumToIgnore = true;
myFCO.RadiusConstraint = myArc.Radius;
myFCO.RadiusConstraintEnabled = true;

// Execute it
myFCOResults = myFCO.Execute((CogImage8Grey)myAFT.OutputImage );
// Display the found circle
CogDisplay1.StaticGraphics.Clear();
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle().CopyBase(CogCopyShapeConstants.All), "");

// Display some information about the result
lblRes.Text = "Points found; " + myFCOResults.NumPointsFound  
                + " points used; " + myFCOResults.NumPointsUsed  
                + " RMS error: " + myFCOResults.RMSError;

// And display some information about each individual result

for (i = 0; i &lt; myFCOResults.Count; i++)
  {
  LstRes.Items.Add("Point (" + myFCOResults[i].X  + ", " + myFCOResults[i].Y   
            + ") Found: " + myFCOResults[i].Found + " Used: " + myFCOResults[i].Used  
            + " is " + myFCOResults[i].DistanceToCircle + " from found shape.");
  }
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircle.DecrementNumToIgnore"><remarks><PARA>
	If DecrementNumToIgnore is true then the 
	<see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.NumToIgnore">number of points to ignore</see> is decremented by the number of calipers that 
	found no edge. Specifying true for this value makes sure that the number of outliers discarded by the underlying
	<see cref="T:Cognex.VisionPro.CogFitCircle" /> remains the same when one or more calipers cannot find edges, 
	as long as the number of calipers that found no edge is less than the number of points to ignore.
	</PARA><DEFAULT>False</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Caliper.CogFindCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircle_DecrementNumToIgnore--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfDecrementNumToIgnore" /></li></ul></event><summary>If DecrementNumToIgnore is true then the number of points ignored is actually (NumToIgnore - Number of calipers that found no edge).</summary><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Create a CogFindCircle operator and a results object
Dim myFCO As New CogFindCircle
Dim myArc As New CogCircularArc
Dim myFCOResults As New CogFindCircleResults
Dim i As Integer

' Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3
myFCO.NumCalipers = 10
myFCO.CaliperProjectionLength = 25
myFCO.CaliperSearchLength = 35
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward
myFCO.DecrementNumToIgnore = True
myFCO.RadiusConstraint = myArc.Radius
myFCO.RadiusConstraintEnabled = True

' Execute it
myFCOResults = myFCO.Execute(CType(myAFT.OutputImage, CogImage8Grey))
  ' Display the found circle
CogDisplay1.StaticGraphics.Clear()
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle.CopyBase(CogCopyShapeConstants.All), "")

' Display some information about the result
lblRes.text = "Points found; " &amp; myFCOResults.NumPointsFound _
                &amp; " points used; " &amp; myFCOResults.NumPointsUsed _
                &amp; " RMS error: " &amp; myFCOResults.RMSError

' And display some information about each individual result

For i = 0 To myFCOResults.Count - 1
  LstRes.Items.Add("Point (" &amp; myFCOResults(i).X.ToString &amp; ", " &amp; myFCOResults(i).Y.ToString _
            &amp; ") Found: " &amp; myFCOResults(i).Found &amp; " Used: " &amp; myFCOResults(i).Used _
            &amp; " is " &amp; myFCOResults(i).DistanceToCircle &amp; " from found shape.")
Next i
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

    
// Create a CogFindCircle operator and a results object
  CogFindCircle myFCO = new CogFindCircle();
  CogCircularArc myArc = new CogCircularArc();
  CogFindCircleResults myFCOResults = new CogFindCircleResults();
  int i;

// Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc;
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3;
myFCO.NumCalipers = 10;
myFCO.CaliperProjectionLength = 25;
myFCO.CaliperSearchLength = 35;
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward;
myFCO.DecrementNumToIgnore = true;
myFCO.RadiusConstraint = myArc.Radius;
myFCO.RadiusConstraintEnabled = true;

// Execute it
myFCOResults = myFCO.Execute((CogImage8Grey)myAFT.OutputImage );
// Display the found circle
CogDisplay1.StaticGraphics.Clear();
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle().CopyBase(CogCopyShapeConstants.All), "");

// Display some information about the result
lblRes.Text = "Points found; " + myFCOResults.NumPointsFound  
                + " points used; " + myFCOResults.NumPointsUsed  
                + " RMS error: " + myFCOResults.RMSError;

// And display some information about each individual result

for (i = 0; i &lt; myFCOResults.Count; i++)
  {
  LstRes.Items.Add("Point (" + myFCOResults[i].X  + ", " + myFCOResults[i].Y   
            + ") Found: " + myFCOResults[i].Found + " Used: " + myFCOResults[i].Used  
            + " is " + myFCOResults[i].DistanceToCircle + " from found shape.");
  }
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircle.NumToIgnore"><event cref="E:Cognex.VisionPro.Caliper.CogFindCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes.
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircle_NumToIgnore--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfNumToIgnore" /></li></ul></event><event cref="E:Cognex.VisionPro.Caliper.CogFindCircle.Changed" cgnxEvent="multiState"><para>
		
Fires when both this property and <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.NumCalipers" /> change.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_FindCircle_NumCalipers--><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfNumCalipers" /></li><!--FA:cogFA_FindCircle_NumToIgnore--><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfNumToIgnore" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	A value of less than 0 was supplied.
	</para></exception><remarks><PARA>The 
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumToIgnore">number of points that will be ignored in the fitting operation</see>. If <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.DecrementNumToIgnore" /> 
is true then the number of points ignored is reduced by the number of calipers which failed to detect an edge.</PARA><PARA>
	If the value of this property is changed such that the number of calipers minus the 
	number of points to ignore is less than 3, <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.NumCalipers" /> will be changed so 
	that the difference is 3 and the change event will indicate that both properties have changed.
	</PARA><DEFAULT>0</DEFAULT></remarks><summary>The number of points that will be ignored in the fitting operation.  If DecrementNumToIgnore is true then the number of points ignored is actually (NumToIgnore - Number of calipers that found no edge).</summary><example><code lang="Visual Basic">
' Create a CogFindCircle operator and a results object
Dim myFCO As New CogFindCircle
Dim myFCOResults As New CogFindCircleResults

' Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3
myFCO.NumCalipers = 10
myFCO.CaliperProjectionLength = 25
myFCO.CaliperSearchLength = 35
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward

myFCO.DecrementNumToIgnore = True
myFCO.RadiusConstraint = myArc.Radius
myFCO.RadiusConstraintEnabled = True

' Execute it
myFCOResults = myFCO.Execute(myAFT.OutputImage)

' Display the found circle
CogDisplay1.StaticGraphics.Clear()
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle, "")

' Display some information about the result
lblRes.Text = "Points found; " &amp; myFCOResults.NumPointsFound _
				&amp; " points used; " &amp; myFCOResults.NumPointsUsed _
				&amp; " RMS error: " &amp; myFCOResults.RMSError
    </code><code lang="C#">
// Create a CogFindCircle operator and a results object
	CogFindCircle myFCO = new CogFindCircle();

	CogFindCircleResults myFCOResults = new CogFindCircleResults();

// Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc;
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3;
myFCO.NumCalipers = 10;
myFCO.CaliperProjectionLength = 25;
myFCO.CaliperSearchLength = 35;
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward;

myFCO.DecrementNumToIgnore = true;
myFCO.RadiusConstraint = myArc.Radius;
myFCO.RadiusConstraintEnabled = true;

// Execute it
myFCOResults = myFCO.Execute((CogImage8Grey) myAft.OutputImage);

// Display the found circle
CogDisplay1.StaticGraphics.Clear();
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle(), "");
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircle.ExpectedCircularArc"><event cref="E:Cognex.VisionPro.Caliper.CogFindCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircle_ExpectedCircularArc--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfExpectedCircularArc" /></li></ul></event><remarks><PARA>The expected <see cref="T:Cognex.VisionPro.CogCircularArc" /> which is used to position the calipers for finding the Circle.</PARA><DEFAULT>
A  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogCircularArc" />
				--><see cref="T:Cognex.VisionPro.Caliper.CogCircularArc" /> with its 
<see cref="P:Cognex.VisionPro.CogCircularArc.Interactive" /> property set to true, 
all degrees of freedom enabled, its center set to (150, 50), a radius of 100, an AngleStart of
0, and an angle span of π.
</DEFAULT></remarks><summary>The expected CircularArc which is used to position the calipers for finding the Circle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	An NULL <see cref="T:Cognex.VisionPro.CogCircularArc" /> was supplied.
	</para></exception><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Create a CogFindCircle operator and a results object
Dim myFCO As New CogFindCircle
Dim myArc As New CogCircularArc
Dim myFCOResults As New CogFindCircleResults
Dim i As Integer

' Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3
myFCO.NumCalipers = 10
myFCO.CaliperProjectionLength = 25
myFCO.CaliperSearchLength = 35
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward
myFCO.DecrementNumToIgnore = True
myFCO.RadiusConstraint = myArc.Radius
myFCO.RadiusConstraintEnabled = True

' Execute it
myFCOResults = myFCO.Execute(CType(myAFT.OutputImage, CogImage8Grey))
  ' Display the found circle
CogDisplay1.StaticGraphics.Clear()
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle.CopyBase(CogCopyShapeConstants.All), "")

' Display some information about the result
lblRes.text = "Points found; " &amp; myFCOResults.NumPointsFound _
                &amp; " points used; " &amp; myFCOResults.NumPointsUsed _
                &amp; " RMS error: " &amp; myFCOResults.RMSError

' And display some information about each individual result

For i = 0 To myFCOResults.Count - 1
  LstRes.Items.Add("Point (" &amp; myFCOResults(i).X.ToString &amp; ", " &amp; myFCOResults(i).Y.ToString _
            &amp; ") Found: " &amp; myFCOResults(i).Found &amp; " Used: " &amp; myFCOResults(i).Used _
            &amp; " is " &amp; myFCOResults(i).DistanceToCircle &amp; " from found shape.")
Next i
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

    
// Create a CogFindCircle operator and a results object
  CogFindCircle myFCO = new CogFindCircle();
  CogCircularArc myArc = new CogCircularArc();
  CogFindCircleResults myFCOResults = new CogFindCircleResults();
  int i;

// Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc;
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3;
myFCO.NumCalipers = 10;
myFCO.CaliperProjectionLength = 25;
myFCO.CaliperSearchLength = 35;
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward;
myFCO.DecrementNumToIgnore = true;
myFCO.RadiusConstraint = myArc.Radius;
myFCO.RadiusConstraintEnabled = true;

// Execute it
myFCOResults = myFCO.Execute((CogImage8Grey)myAFT.OutputImage );
// Display the found circle
CogDisplay1.StaticGraphics.Clear();
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle().CopyBase(CogCopyShapeConstants.All), "");

// Display some information about the result
lblRes.Text = "Points found; " + myFCOResults.NumPointsFound  
                + " points used; " + myFCOResults.NumPointsUsed  
                + " RMS error: " + myFCOResults.RMSError;

// And display some information about each individual result

for (i = 0; i &lt; myFCOResults.Count; i++)
  {
  LstRes.Items.Add("Point (" + myFCOResults[i].X  + ", " + myFCOResults[i].Y   
            + ") Found: " + myFCOResults[i].Found + " Used: " + myFCOResults[i].Used  
            + " is " + myFCOResults[i].DistanceToCircle + " from found shape.");
  }
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperRunParams"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	A NULL <see cref="T:Cognex.VisionPro.Caliper.CogCaliper" /> was supplied.
	</para></exception><event cref="E:Cognex.VisionPro.Caliper.CogFindCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircle_CaliperRunParams--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfCaliperRunParams" /></li></ul></event><remarks><PARA>
	An <see cref="T:Cognex.VisionPro.Caliper.CogCaliper" /> that specifies the run-time parameters for the 
	all of the calipers used to generate points for this tool.</PARA><DEFAULT>A default-constructed <see cref="T:Cognex.VisionPro.Caliper.CogCaliper" /> object.</DEFAULT></remarks><summary>Parameters used to run the calipers.</summary><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Using the CogFindCircleTool interface
Dim myFCTool As New CogFindCircleTool
Dim myArc As New CogCircularArc

' Set up current, last run, and diagnostic records
myFCTool.CurrentRecordEnable = CogFindCircleCurrentRecordConstants.InteractiveCaliperSize
myFCTool.LastRunRecordEnable = CogFindCircleLastRunRecordConstants.FoundEdges
myFCTool.LastRunRecordDiagEnable = CogFindCircleLastRunRecordDiagConstants.TransformedRegionPixels

' Set up Run Parameters
myFCTool.RunParams.ExpectedCircularArc = myArc
myFCTool.RunParams.CaliperRunParams.FilterHalfSizeInPixels = 3
myFCTool.RunParams.NumCalipers = 10
myFCTool.RunParams.CaliperProjectionLength = 25
myFCTool.RunParams.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward

' Set up input image and run tool
myFCTool.InputImage = CType(myAFT.OutputImage, CogImage8Grey)
myFCTool.Run()

' Check the run status and display the found circle
If myFCTool.RunStatus.Result = CogToolResultConstants.Accept Then
  If Not myFCTool.Results.GetCircle Is Nothing Then
    CogDisplay1.StaticGraphics.Add(myFCTool.Results.GetCircle.CopyBase(CogCopyShapeConstants.All), "")
  End If
End If
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

// Using the CogFindCircleTool interface
CogFindCircleTool myFCTool = new CogFindCircleTool();
CogCircularArc myArc = new CogCircularArc();

// Set up current, last run, and diagnostic records
myFCTool.CurrentRecordEnable = CogFindCircleCurrentRecordConstants.InteractiveCaliperSize;
myFCTool.LastRunRecordEnable = CogFindCircleLastRunRecordConstants.FoundEdges;
myFCTool.LastRunRecordDiagEnable = CogFindCircleLastRunRecordDiagConstants.TransformedRegionPixels;

// Set up Run Parameters
myFCTool.RunParams.ExpectedCircularArc = myArc;
myFCTool.RunParams.CaliperRunParams.FilterHalfSizeInPixels = 3;
myFCTool.RunParams.NumCalipers = 10;
myFCTool.RunParams.CaliperProjectionLength = 25;
myFCTool.RunParams.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward;

// Set up input image and run tool
myFCTool.InputImage = (CogImage8Grey) myAFT.OutputImage;
myFCTool.Run();

// Check the run status and display the found circle
if (myFCTool.RunStatus.Result == CogToolResultConstants.Accept) 
  if ( myFCTool.Results.GetCircle() != null )  
    CogDisplay1.StaticGraphics.Add(myFCTool.Results.GetCircle().CopyBase(CogCopyShapeConstants.All), "");
}
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperProjectionLength"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than or equal to 0.
	</para></exception><remarks><PARA>The length of each caliper region along the caliper projection direction.  Specified in units of the selected space of the input image.</PARA><DEFAULT>10</DEFAULT></remarks><summary>The length of each caliper region along the caliper projection direction.  Specified in units of the selected space of the input image.</summary><event cref="E:Cognex.VisionPro.Caliper.CogFindCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircle_CaliperProjectionLength--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfCaliperProjectionLength" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Create a CogFindCircle operator and a results object
Dim myFCO As New CogFindCircle
Dim myArc As New CogCircularArc
Dim myFCOResults As New CogFindCircleResults
Dim i As Integer

' Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3
myFCO.NumCalipers = 10
myFCO.CaliperProjectionLength = 25
myFCO.CaliperSearchLength = 35
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward
myFCO.DecrementNumToIgnore = True
myFCO.RadiusConstraint = myArc.Radius
myFCO.RadiusConstraintEnabled = True

' Execute it
myFCOResults = myFCO.Execute(CType(myAFT.OutputImage, CogImage8Grey))
  ' Display the found circle
CogDisplay1.StaticGraphics.Clear()
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle.CopyBase(CogCopyShapeConstants.All), "")

' Display some information about the result
lblRes.text = "Points found; " &amp; myFCOResults.NumPointsFound _
                &amp; " points used; " &amp; myFCOResults.NumPointsUsed _
                &amp; " RMS error: " &amp; myFCOResults.RMSError

' And display some information about each individual result

For i = 0 To myFCOResults.Count - 1
  LstRes.Items.Add("Point (" &amp; myFCOResults(i).X.ToString &amp; ", " &amp; myFCOResults(i).Y.ToString _
            &amp; ") Found: " &amp; myFCOResults(i).Found &amp; " Used: " &amp; myFCOResults(i).Used _
            &amp; " is " &amp; myFCOResults(i).DistanceToCircle &amp; " from found shape.")
Next i
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

    
// Create a CogFindCircle operator and a results object
  CogFindCircle myFCO = new CogFindCircle();
  CogCircularArc myArc = new CogCircularArc();
  CogFindCircleResults myFCOResults = new CogFindCircleResults();
  int i;

// Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc;
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3;
myFCO.NumCalipers = 10;
myFCO.CaliperProjectionLength = 25;
myFCO.CaliperSearchLength = 35;
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward;
myFCO.DecrementNumToIgnore = true;
myFCO.RadiusConstraint = myArc.Radius;
myFCO.RadiusConstraintEnabled = true;

// Execute it
myFCOResults = myFCO.Execute((CogImage8Grey)myAFT.OutputImage );
// Display the found circle
CogDisplay1.StaticGraphics.Clear();
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle().CopyBase(CogCopyShapeConstants.All), "");

// Display some information about the result
lblRes.Text = "Points found; " + myFCOResults.NumPointsFound  
                + " points used; " + myFCOResults.NumPointsUsed  
                + " RMS error: " + myFCOResults.RMSError;

// And display some information about each individual result

for (i = 0; i &lt; myFCOResults.Count; i++)
  {
  LstRes.Items.Add("Point (" + myFCOResults[i].X  + ", " + myFCOResults[i].Y   
            + ") Found: " + myFCOResults[i].Found + " Used: " + myFCOResults[i].Used  
            + " is " + myFCOResults[i].DistanceToCircle + " from found shape.");
  }
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperSearchLength"><summary>The length of each caliper region along the caliper search direction.  Specified in units of the selected space of the input image.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than or equal to 0.
	</para></exception><remarks><PARA>The length of each caliper region along the caliper search direction.  Specified in units of the selected space of the input image.</PARA><DEFAULT>30</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Caliper.CogFindCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircle_CaliperSearchLength--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfCaliperSearchLength" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Create a CogFindCircle operator and a results object
Dim myFCO As New CogFindCircle
Dim myArc As New CogCircularArc
Dim myFCOResults As New CogFindCircleResults
Dim i As Integer

' Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3
myFCO.NumCalipers = 10
myFCO.CaliperProjectionLength = 25
myFCO.CaliperSearchLength = 35
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward
myFCO.DecrementNumToIgnore = True
myFCO.RadiusConstraint = myArc.Radius
myFCO.RadiusConstraintEnabled = True

' Execute it
myFCOResults = myFCO.Execute(CType(myAFT.OutputImage, CogImage8Grey))
  ' Display the found circle
CogDisplay1.StaticGraphics.Clear()
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle.CopyBase(CogCopyShapeConstants.All), "")

' Display some information about the result
lblRes.text = "Points found; " &amp; myFCOResults.NumPointsFound _
                &amp; " points used; " &amp; myFCOResults.NumPointsUsed _
                &amp; " RMS error: " &amp; myFCOResults.RMSError

' And display some information about each individual result

For i = 0 To myFCOResults.Count - 1
  LstRes.Items.Add("Point (" &amp; myFCOResults(i).X.ToString &amp; ", " &amp; myFCOResults(i).Y.ToString _
            &amp; ") Found: " &amp; myFCOResults(i).Found &amp; " Used: " &amp; myFCOResults(i).Used _
            &amp; " is " &amp; myFCOResults(i).DistanceToCircle &amp; " from found shape.")
Next i
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

    
// Create a CogFindCircle operator and a results object
  CogFindCircle myFCO = new CogFindCircle();
  CogCircularArc myArc = new CogCircularArc();
  CogFindCircleResults myFCOResults = new CogFindCircleResults();
  int i;

// Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc;
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3;
myFCO.NumCalipers = 10;
myFCO.CaliperProjectionLength = 25;
myFCO.CaliperSearchLength = 35;
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward;
myFCO.DecrementNumToIgnore = true;
myFCO.RadiusConstraint = myArc.Radius;
myFCO.RadiusConstraintEnabled = true;

// Execute it
myFCOResults = myFCO.Execute((CogImage8Grey)myAFT.OutputImage );
// Display the found circle
CogDisplay1.StaticGraphics.Clear();
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle().CopyBase(CogCopyShapeConstants.All), "");

// Display some information about the result
lblRes.Text = "Points found; " + myFCOResults.NumPointsFound  
                + " points used; " + myFCOResults.NumPointsUsed  
                + " RMS error: " + myFCOResults.RMSError;

// And display some information about each individual result

for (i = 0; i &lt; myFCOResults.Count; i++)
  {
  LstRes.Items.Add("Point (" + myFCOResults[i].X  + ", " + myFCOResults[i].Y   
            + ") Found: " + myFCOResults[i].Found + " Used: " + myFCOResults[i].Used  
            + " is " + myFCOResults[i].DistanceToCircle + " from found shape.");
  }
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircle.NumCalipers"><event cref="E:Cognex.VisionPro.Caliper.CogFindCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes.
	</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircle_NumCalipers--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfNumCalipers" /></li></ul></event><event cref="E:Cognex.VisionPro.Caliper.CogFindCircle.Changed" cgnxEvent="multiState"><para>
		
Fires when both this property and <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.NumToIgnore" /> change.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_FindCircle_NumCalipers--><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfNumCalipers" /></li><!--FA:cogFA_FindCircle_NumToIgnore--><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircle.SfNumToIgnore" /></li></ul></event><summary>Number of calipers used to find the Circle.  NumCalipers - NumToIgnore must be greater than or equal to the minimum number of points required to find the shape.  For example, minimum points for a line = 2, circle = 3, &amp; ellipse = 5.</summary><remarks><PARA>
	Number of calipers used to find the Circle.  
	The number of calipers minus the <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.NumToIgnore">number of points to ignore</see> 
	must be greater than or equal to the minimum number of points required to fit a circle (3).
	</PARA><PARA>
	If the value of this property is changed such that the number of calipers minus the 
	number of points to ignore is less than 3, <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.NumToIgnore" /> will be changed so 
	that the difference is 3 and the change event will indicate that both properties have changed.
	</PARA><DEFAULT>6</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	A value of less than 3 was supplied.
	</para></exception><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Create a CogFindCircle operator and a results object
Dim myFCO As New CogFindCircle
Dim myArc As New CogCircularArc
Dim myFCOResults As New CogFindCircleResults
Dim i As Integer

' Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3
myFCO.NumCalipers = 10
myFCO.CaliperProjectionLength = 25
myFCO.CaliperSearchLength = 35
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward
myFCO.DecrementNumToIgnore = True
myFCO.RadiusConstraint = myArc.Radius
myFCO.RadiusConstraintEnabled = True

' Execute it
myFCOResults = myFCO.Execute(CType(myAFT.OutputImage, CogImage8Grey))
  ' Display the found circle
CogDisplay1.StaticGraphics.Clear()
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle.CopyBase(CogCopyShapeConstants.All), "")

' Display some information about the result
lblRes.text = "Points found; " &amp; myFCOResults.NumPointsFound _
                &amp; " points used; " &amp; myFCOResults.NumPointsUsed _
                &amp; " RMS error: " &amp; myFCOResults.RMSError

' And display some information about each individual result

For i = 0 To myFCOResults.Count - 1
  LstRes.Items.Add("Point (" &amp; myFCOResults(i).X.ToString &amp; ", " &amp; myFCOResults(i).Y.ToString _
            &amp; ") Found: " &amp; myFCOResults(i).Found &amp; " Used: " &amp; myFCOResults(i).Used _
            &amp; " is " &amp; myFCOResults(i).DistanceToCircle &amp; " from found shape.")
Next i
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

    
// Create a CogFindCircle operator and a results object
  CogFindCircle myFCO = new CogFindCircle();
  CogCircularArc myArc = new CogCircularArc();
  CogFindCircleResults myFCOResults = new CogFindCircleResults();
  int i;

// Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc;
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3;
myFCO.NumCalipers = 10;
myFCO.CaliperProjectionLength = 25;
myFCO.CaliperSearchLength = 35;
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward;
myFCO.DecrementNumToIgnore = true;
myFCO.RadiusConstraint = myArc.Radius;
myFCO.RadiusConstraintEnabled = true;

// Execute it
myFCOResults = myFCO.Execute((CogImage8Grey)myAFT.OutputImage );
// Display the found circle
CogDisplay1.StaticGraphics.Clear();
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle().CopyBase(CogCopyShapeConstants.All), "");

// Display some information about the result
lblRes.Text = "Points found; " + myFCOResults.NumPointsFound  
                + " points used; " + myFCOResults.NumPointsUsed  
                + " RMS error: " + myFCOResults.RMSError;

// And display some information about each individual result

for (i = 0; i &lt; myFCOResults.Count; i++)
  {
  LstRes.Items.Add("Point (" + myFCOResults[i].X  + ", " + myFCOResults[i].Y   
            + ") Found: " + myFCOResults[i].Found + " Used: " + myFCOResults[i].Used  
            + " is " + myFCOResults[i].DistanceToCircle + " from found shape.");
  }
    </code></example></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircle.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircle.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircle.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircle.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircle.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircle.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircle.Execute(Cognex.VisionPro.CogImage8Grey)"><param name="image"><PARA>The image in which to locate the circle.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="image" /> is null.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="image" />  is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogCaliperNoScorersException" cgnxHRESULT="E_CogCaliper_NoScorers"><para>
	The collection of scoring functions in <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperRunParams" /> is null
  or empty or all the scoring functions are disabled and the maximum number of results specified is greater than 0.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogCaliperBadScorerException" cgnxHRESULT="E_CogCaliper_BadScorer"><para>
	The collection of single-edge scoring functions in <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperRunParams" /> 
	contains an edge pair scoring function, or the 
	collection of edge-pair scoring functions in <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperRunParams" /> 
	contains an single-edge scoring function.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFindAllCalipersFailedException" cgnxHRESULT="E_CogFind_AllCalipersFailed"><para>
	All of the calipers failed. This can happen when the  
	values for <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperSearchLength" /> or 
	<see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperProjectionLength" /> are too small or 
	when all of the specified caliper regions fall completely outside of the input image.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFindInvalidExpectedShapeException" cgnxHRESULT="E_CogFind_InvalidExpectedShape"><para>
	The selected space of the <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.ExpectedCircularArc" />
	is not a valid space of the input image; the selected space name of the
   <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.ExpectedCircularArc" /> is a nonqualified space name and more than one instance
	of it exists in the space tree of the input image; or the selected space name of the
   <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.ExpectedCircularArc" /> is not a legal space name.
   </para></exception><remarks><PARA>Finds a <see cref="T:Cognex.VisionPro.CogCircle" /> in the provided image by fitting the highest scoring edge points found by a suite of calipers defined by the <see cref="T:Cognex.VisionPro.Caliper.CogFindCircle" />.</PARA></remarks><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogCircle" />.</PARA></returns><summary>Finds a Circle in the provided image by fitting the highest scoring edge points found by a suite of calipers defined by the run parameters.</summary><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Caliper
Imports Cognex.VisionPro.ImageProcessing

' Create a CogFindCircle operator and a results object
Dim myFCO As New CogFindCircle
Dim myArc As New CogCircularArc
Dim myFCOResults As New CogFindCircleResults
Dim i As Integer

' Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3
myFCO.NumCalipers = 10
myFCO.CaliperProjectionLength = 25
myFCO.CaliperSearchLength = 35
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward
myFCO.DecrementNumToIgnore = True
myFCO.RadiusConstraint = myArc.Radius
myFCO.RadiusConstraintEnabled = True

' Execute it
myFCOResults = myFCO.Execute(CType(myAFT.OutputImage, CogImage8Grey))
  ' Display the found circle
CogDisplay1.StaticGraphics.Clear()
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle.CopyBase(CogCopyShapeConstants.All), "")

' Display some information about the result
lblRes.text = "Points found; " &amp; myFCOResults.NumPointsFound _
                &amp; " points used; " &amp; myFCOResults.NumPointsUsed _
                &amp; " RMS error: " &amp; myFCOResults.RMSError

' And display some information about each individual result

For i = 0 To myFCOResults.Count - 1
  LstRes.Items.Add("Point (" &amp; myFCOResults(i).X.ToString &amp; ", " &amp; myFCOResults(i).Y.ToString _
            &amp; ") Found: " &amp; myFCOResults(i).Found &amp; " Used: " &amp; myFCOResults(i).Used _
            &amp; " is " &amp; myFCOResults(i).DistanceToCircle &amp; " from found shape.")
Next i
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Caliper;
using Cognex.VisionPro.ImageProcessing;

    
// Create a CogFindCircle operator and a results object
  CogFindCircle myFCO = new CogFindCircle();
  CogCircularArc myArc = new CogCircularArc();
  CogFindCircleResults myFCOResults = new CogFindCircleResults();
  int i;

// Configure the CogFindCircle Object
myFCO.ExpectedCircularArc = myArc;
myFCO.CaliperRunParams.FilterHalfSizeInPixels = 3;
myFCO.NumCalipers = 10;
myFCO.CaliperProjectionLength = 25;
myFCO.CaliperSearchLength = 35;
myFCO.CaliperSearchDirection = CogFindCircleSearchDirectionConstants.Inward;
myFCO.DecrementNumToIgnore = true;
myFCO.RadiusConstraint = myArc.Radius;
myFCO.RadiusConstraintEnabled = true;

// Execute it
myFCOResults = myFCO.Execute((CogImage8Grey)myAFT.OutputImage );
// Display the found circle
CogDisplay1.StaticGraphics.Clear();
CogDisplay1.StaticGraphics.Add(myFCOResults.GetCircle().CopyBase(CogCopyShapeConstants.All), "");

// Display some information about the result
lblRes.Text = "Points found; " + myFCOResults.NumPointsFound  
                + " points used; " + myFCOResults.NumPointsUsed  
                + " RMS error: " + myFCOResults.RMSError;

// And display some information about each individual result

for (i = 0; i &lt; myFCOResults.Count; i++)
  {
  LstRes.Items.Add("Point (" + myFCOResults[i].X  + ", " + myFCOResults[i].Y   
            + ") Found: " + myFCOResults[i].Found + " Used: " + myFCOResults[i].Used  
            + " is " + myFCOResults[i].DistanceToCircle + " from found shape.");
  }
    </code></example></member><member name="E:Cognex.VisionPro.Caliper.CogFindCircle.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindCircleTool"><remarks><PARA>Tool that finds a circle in a provided image by fitting the highest scoring edge points found by a suite of calipers.  This tool encompasses all of the interfaces required to run a circle finder inspection.</PARA></remarks><summary>Tool which finds a circle in a provided image by fitting the highest scoring edge points found by a suite of calipers.  This tool encompasses all of the interfaces required to run a circle finder inspection.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleTool.#ctor(Cognex.VisionPro.Caliper.CogFindCircleTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleTool.SfResults"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Results may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleTool.Results"><remarks><PARA>Results from the last invocation of Run.</PARA></remarks><summary>Results from the last invocation of Run.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleTool.RunParams"><remarks><PARA>The run parameters for this circle finder tool.</PARA></remarks><summary>The run parameters for this Circle finder tool.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircleTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircleTool.SfRunParams" /></li></ul></event></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleTool.InputImage"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircleTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircleTool.SfInputImage" /></li></ul></event><remarks><PARA>Sets and gets the image in which to find a circle.</PARA></remarks><summary>Sets/Gets the image used to perform the find Circle inspection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleTool.CurrentRecordEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.Caliper.CogFindCircleCurrentRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Caliper.CogFindCircleCurrentRecordConstants">InputImage</see> + 
<see cref="T:Cognex.VisionPro.Caliper.CogFindCircleCurrentRecordConstants">ExpectedCircularArc</see> + 
<see cref="T:Cognex.VisionPro.Caliper.CogFindCircleCurrentRecordConstants">CaliperRegions</see> + 
<see cref="T:Cognex.VisionPro.Caliper.CogFindCircleCurrentRecordConstants">InteractiveCaliperSize</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircleTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircleTool.SfCurrentRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleTool.LastRunRecordDiagEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate 
	<see cref="T:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordDiagConstants" />.  These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordDiagConstants">InputImageByReference
</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircleTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircleTool.SfLastRunRecordDiagEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleTool.LastRunRecordEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants">BestFitCircle</see> + 
<see cref="T:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants">ResultsUsedPoints</see> + 
<see cref="T:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants">ResultsIgnoredPoints</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindCircleTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircleTool.SfLastRunRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCircleTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleTool.Run"><summary>Runs the tool using the current parameter settings.</summary><remarks><PARA>
	Attempts to locate a circle in the supplied <see cref="P:Cognex.VisionPro.Caliper.CogFindCircleTool.InputImage" /> using 
	the specified <see cref="P:Cognex.VisionPro.Caliper.CogFindCircleTool.RunParams" />. The results are placed in <see cref="P:Cognex.VisionPro.Caliper.CogFindCircleTool.Results" />.
	</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.Caliper.CogFindCircleTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.Caliper.CogFindCircleTool" /> returns or in a
		<event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.Caliper.CogFindCircleTool.SfResults" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.Caliper.CogFindCircleTool.RunParams" />  is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.Caliper.CogFindCircleTool.InputImage" /> is null.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.Caliper.CogFindCircleTool.InputImage" />  is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogCaliperNoScorersException" cgnxHRESULT="E_CogCaliper_NoScorers"><para>
	The collection of scoring functions in <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperRunParams" /> is null
  or empty or all the scoring functions are disabled and the maximum number of results specified is greater than 0.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogCaliperBadScorerException" cgnxHRESULT="E_CogCaliper_BadScorer"><para>
	The collection of single-edge scoring functions in <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperRunParams" /> 
	contains an edge pair scoring function, or the 
	collection of edge-pair scoring functions in <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperRunParams" />
	contains an single-edge scoring function.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFindAllCalipersFailedException" cgnxHRESULT="E_CogFind_AllCalipersFailed"><para>
	All of the calipers failed. This can happen when the  
	values for <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperSearchLength" /> or 
	<see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperProjectionLength" /> are too small or 
	when all of the specified caliper regions fall completely outside of the input image.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFindInvalidExpectedShapeException" cgnxHRESULT="E_CogFind_InvalidExpectedShape"><para>
	The selected space of the <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.ExpectedCircularArc" />
	is not a valid space of the input image; the selected space name of the
   <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.ExpectedCircularArc" /> is a nonqualified space name and more than one instance
	of it exists in the space tree of the input image; or the selected space name of the
  <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.ExpectedCircularArc" />  is not a legal space name.
   </para></exception></member><member name="M:Cognex.VisionPro.Caliper.CogFindCircleTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindLineResult"><remarks><PARA>Interface that provides result information specific to each data point found by the calipers.</PARA></remarks><summary>Class that contains result information specific to each data point found by the calipers.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineResult.#ctor(Cognex.VisionPro.Caliper.CogFindLineResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResult.CaliperResults"><remarks><PARA>Returns the complete set of <see cref="T:Cognex.VisionPro.Caliper.CogCaliperResults" /> for this data point. 
	The caliper result with the highest score was selected for fitting.</PARA></remarks><summary>Returns the complete set of caliper results for this data point.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResult.DistanceToLine"><exception cref="T:Cognex.VisionPro.Exceptions.CogFindEdgeNotFoundException" cgnxHRESULT="E_CogFind_EdgeNotFound"><para><see cref="P:Cognex.VisionPro.Caliper.CogFindLineResult.Found" /> is false.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFindShapeNotFoundException" cgnxHRESULT="E_CogFind_ShapeNotFound"><para>The fitting tool did not find a shape.</para></exception><remarks><PARA>
	Returns the minimum distance from the data point of this result to the best fit 
	<see cref="T:Cognex.VisionPro.CogLine" /> that was found.  
	This measurement is available regardless of whether or not this point was used for the fit.
	</PARA></remarks><summary>Returns the minimum distance from the data point of this result to the best fit Line that was found.  This measurement is available regardless of whether or not the data was used for the fit.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResult.Found"><summary>Indicates whether the caliper found an appropriate edge point or not.</summary><remarks><PARA>Indicates whether the caliper found an appropriate edge point or not.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResult.Used"><remarks><PARA>If true then this data point was used to perform the shape fitting.</PARA></remarks><summary>If true then this data point was used to perform the shape fitting.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResult.Y"><summary>The Y component of the edge point found by the caliper.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogFindEdgeNotFoundException" cgnxHRESULT="E_CogFind_EdgeNotFound"><para><see cref="P:Cognex.VisionPro.Caliper.CogFindLineResult.Found" /> is false.</para></exception><remarks><PARA>The Y component of the edge point found by the caliper.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResult.X"><summary>The X component of the edge point found by the caliper.</summary><remarks><PARA>The X component of the edge point found by the caliper.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogFindEdgeNotFoundException" cgnxHRESULT="E_CogFind_EdgeNotFound"><para><see cref="P:Cognex.VisionPro.Caliper.CogFindLineResult.Found" /> is false.</para></exception></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResult.ID"><summary>A unique ID used to identify this CogFindLineResult.  This ID also corresponds to the index of this result in the CogFindLineResults collection to which this result belongs.</summary><remarks><PARA>
	A unique ID used to identify this result.  This ID also corresponds to the 
	index of this result in the <see cref="T:Cognex.VisionPro.Caliper.CogFindLineResults" /> collection to 
	which this result belongs.
</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineResult.CreateResultGraphics(Cognex.VisionPro.Caliper.CogFindLineResultGraphicConstants)"><param name="graphicOptions"><PARA>The bitwise combination of one or more values from <see cref="T:Cognex.VisionPro.Caliper.CogFindLineResultGraphicConstants" />.</PARA></param><remarks><PARA>Creates a composite result graphic containing child graphics specified by GraphicOptions which is a bitwise combination of <see cref="T:Cognex.VisionPro.Caliper.CogFindLineResultGraphicConstants" />.</PARA><PARA>
The graphics are drawn in green in if the edge point was found and used for the fit; otherwise 
red is used. If no edge was found, then only the caliper region is drawn. In all cases, the graphics'
<see cref="P:Cognex.VisionPro.CogCompositeShape.Interactive" /> properties are set to true.
</PARA><NOTE>
The <see cref="P:Cognex.VisionPro.CogCompositeShape.ID" /> of the returned shape is 
set to the <see cref="P:Cognex.VisionPro.Caliper.CogFindLineResult.ID" /> of this object. 
</NOTE></remarks><summary>Creates a composite result graphic containing child graphics specified by GraphicOptions which is a bitwise combination of CogFindLineResultGraphicConstants.</summary><returns><PARA>The returned graphic.</PARA></returns></member><member name="T:Cognex.VisionPro.Caliper.CogFindLineResults"><remarks><PARA>Interface which provides access to the line finder results.  Provides access to the best fit line, an interpolated line segment, and a collection of results specific to each edge point found by the calipers.</PARA></remarks><summary>Class which contains the line finder results.  Primary interface provides access to the best fit line, an interpolated line segment, and a collection of results specific to each edge point found by the calipers.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineResults.#ctor(Cognex.VisionPro.Caliper.CogFindLineResults)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineResults.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResults.NumPointsUsed"><summary>Number of points used to perform the Line fitting.  May be less than the number of points found by calipers if some data points were ignored.</summary><remarks><PARA>Number of points used to perform the Line fitting.  May be less than the number of points found by calipers if some data points were ignored.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogFindShapeNotFoundException" cgnxHRESULT="E_CogFind_ShapeNotFound"><para>Not enough caliper edges were found.</para></exception></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResults.NumPointsFound"><remarks><PARA>Number of calipers that found an edge point.  May be greater than the number of points used for the Line fitting if some data points were ignored.</PARA></remarks><summary>Number of calipers that found an edge point.  May be greater than the number of points used for the Line fitting if some data points were ignored.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResults.RMSError"><exception cref="T:Cognex.VisionPro.Exceptions.CogFindShapeNotFoundException" cgnxHRESULT="E_CogFind_ShapeNotFound"><para>
	Not enough caliper edges were found to fit a shape.
	</para></exception><summary>Root mean square error for the fitting operation. It is computed by taking the square root of the mean of the squares of the individual errors.</summary><remarks><PARA>Root mean square error for the fitting operation. It is computed by taking the square root of the mean of the squares of the individual errors.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResults.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResults.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResults.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineResults.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineResults.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineResults.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineResults.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineResults.IndexOf(Cognex.VisionPro.Caliper.CogFindLineResult)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineResults.GetLine"><summary>Returns a copy of the found Line.</summary><remarks><PARA>Returns a copy of the found <see cref="T:Cognex.VisionPro.CogLine" />. If no 
	shape could be fit to the generated points, NULL is returned.</PARA><PARA>
	The selected space of the returned  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogLine" />
				--><see cref="T:Cognex.VisionPro.Caliper.CogLine" /> is set to the selected 
	space of the input image.
	</PARA></remarks><returns><PARA>The returned  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogLine" />
				--><see cref="T:Cognex.VisionPro.Caliper.CogLine" />.</PARA></returns></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineResults.GetLineSegment"><summary>Returns a LineSegment that was interpolated from a combination of the found Line and the expected LineSegment provided in the run parameters.</summary><returns><PARA>The returned  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogLineSegment" />
				--><see cref="T:Cognex.VisionPro.Caliper.CogLineSegment" />.</PARA></returns><remarks><PARA>
	Returns a <see cref="T:Cognex.VisionPro.CogLineSegment" /> based on the 
	<see cref="P:Cognex.VisionPro.Caliper.CogFindLine.ExpectedLineSegment">expected line segment</see> 
	that you specified.
	</PARA><PARA>
	The returned  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogLineSegment" />
				--><see cref="T:Cognex.VisionPro.Caliper.CogLineSegment" /> is the segment of the fitted line the 
	midpoint of which is closest to the midpoint of the expected line segment that you supplied. 
	The end points of the returned line segment are determined by the length of the expected segment that you supplied.
	</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogFindLine"><remarks><PARA>Interface which provides access to both the line finder run parameters and an execute method for performing a line find inspection.</PARA></remarks><summary>Class which contains the run parameters of a line finder.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLine.#ctor(Cognex.VisionPro.Caliper.CogFindLine)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLine.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLine.SfNumCalipers"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumCalipers may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLine.SfCaliperSearchLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperSearchLength may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLine.SfCaliperProjectionLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperProjectionLength may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLine.SfCaliperRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperRunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLine.SfExpectedLineSegment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExpectedLineSegment may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLine.SfNumToIgnore"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumToIgnore may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLine.SfDecrementNumToIgnore"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DecrementNumToIgnore may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLine.SfCaliperSearchDirection"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperSearchDirection may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLine.CaliperSearchDirection"><remarks><PARA>Specifies the search direction of the caliper with respect to the expected line.  The default is PI/2 which indicates a search direction that is perpendicular to the expected line.</PARA></remarks><summary>Specifies the search direction of the caliper with respect to the tangent of the shape at the center of each caliper region.  The default is PI/2 which indicates a search direction that is perpendicular to the tangent.</summary><event cref="E:Cognex.VisionPro.Caliper.CogFindLine.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindLine_CaliperSearchDirection--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLine.SfCaliperSearchDirection" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is between -0.001 and 0.001 radians or between 
	π - 0.001 and π + 0.001 radians.
	</para></exception></member><member name="P:Cognex.VisionPro.Caliper.CogFindLine.DecrementNumToIgnore"><event cref="E:Cognex.VisionPro.Caliper.CogFindLine.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindLine_DecrementNumToIgnore--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLine.SfDecrementNumToIgnore" /></li></ul></event><summary>If DecrementNumToIgnore is true then the number of points ignored is actually (NumToIgnore - Number of calipers that found no edge).</summary><remarks><PARA>
	If DecrementNumToIgnore is true then the 
	<see cref="P:Cognex.VisionPro.Caliper.CogFindLine.NumToIgnore">number of points to ignore</see> is decremented by the number of calipers that 
	found no edge. Specifying true for this value makes sure that the number of outliers discarded by the underlying
	<see cref="T:Cognex.VisionPro.CogFitLine" /> remains the same when one or more calipers cannot find edges, 
	as long as the number of calipers that found no edge is less than the number of points to ignore.	</PARA><DEFAULT>False</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogFindLine.NumToIgnore"><remarks><PARA>The 
	<see cref="P:Cognex.VisionPro.CogFitLine.NumToIgnore">number of points that will be ignored in the fitting operation</see>. If <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.DecrementNumToIgnore" /> 
is true then the number of points ignored is reduced by the number of calipers which failed to detect an edge.</PARA><PARA>
	If the value of this property is changed such that the number of calipers minus the 
	number of points to ignore is less than 2, <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.NumCalipers" /> will be changed so 
	that the difference is 2 and the change event will indicate that both properties have changed.
	</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Caliper.CogFindLine.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes.
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindLine_NumToIgnore--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLine.SfNumToIgnore" /></li></ul></event><event cref="E:Cognex.VisionPro.Caliper.CogFindLine.Changed" cgnxEvent="multiState"><para>
		
Fires when both this property and <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.NumCalipers" /> change.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_FindLine_NumCalipers--><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLine.SfNumCalipers" /></li><!--FA:cogFA_FindLine_NumToIgnore--><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLine.SfNumToIgnore" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	A value of less than 0 was supplied.
	</para></exception><summary>The number of points that will be ignored in the fitting operation.  If DecrementNumToIgnore is true then the number of points ignored is actually (NumToIgnore - Number of calipers that found no edge).</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLine.ExpectedLineSegment"><summary>The expected LineSegment which is used to position the calipers for finding the Line.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	An NULL <see cref="T:Cognex.VisionPro.CogLineSegment" /> was supplied.
	</para></exception><event cref="E:Cognex.VisionPro.Caliper.CogFindLine.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindLine_ExpectedLineSegment--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLine.SfExpectedLineSegment" /></li></ul></event><remarks><PARA>The expected <see cref="T:Cognex.VisionPro.CogLineSegment" /> which is used to position the calipers for finding the line.</PARA><DEFAULT>
A default-constructed  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogLineSegment" />
				--><see cref="T:Cognex.VisionPro.Caliper.CogLineSegment" /> with its 
<see cref="P:Cognex.VisionPro.CogLineSegment.Interactive" /> property set to true, 
all degrees of freedom enabled, its start set to (50, 50), a length of 200, and a rotation of 0.
</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogFindLine.CaliperRunParams"><event cref="E:Cognex.VisionPro.Caliper.CogFindLine.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindLine_CaliperRunParams--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLine.SfCaliperRunParams" /></li></ul></event><remarks><PARA>
	An <see cref="T:Cognex.VisionPro.Caliper.CogCaliper" /> that specifies the run-time parameters for the 
	all of the calipers used to generate points for this tool.</PARA><DEFAULT>A default-constructed <see cref="T:Cognex.VisionPro.Caliper.CogCaliper" /> object.</DEFAULT></remarks><summary>Parameters used to run the calipers.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	A NULL <see cref="T:Cognex.VisionPro.Caliper.CogCaliper" /> was supplied.
	</para></exception></member><member name="P:Cognex.VisionPro.Caliper.CogFindLine.CaliperProjectionLength"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than or equal to 0.
	</para></exception><remarks><PARA>The length of each caliper region along the caliper projection direction.  Specified in units of the selected space of the input image.</PARA></remarks><event cref="E:Cognex.VisionPro.Caliper.CogFindLine.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindLine_CaliperProjectionLength--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLine.SfCaliperProjectionLength" /></li></ul></event><summary>The length of each caliper region along the caliper projection direction.  Specified in units of the selected space of the input image.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLine.CaliperSearchLength"><remarks><PARA>The length of each caliper region along the caliper search direction.  Specified in units of the selected space of the input image.</PARA><DEFAULT>30</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Caliper.CogFindLine.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindLine_CaliperSearchLength--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLine.SfCaliperSearchLength" /></li></ul></event><summary>The length of each caliper region along the caliper search direction.  Specified in units of the selected space of the input image.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than or equal to 0.
	</para></exception></member><member name="P:Cognex.VisionPro.Caliper.CogFindLine.NumCalipers"><summary>Number of calipers used to find the Line.  NumCalipers - NumToIgnore must be greater than or equal to the minimum number of points required to find the shape.  For example, minimum points for a line = 2, circle = 3, &amp; ellipse = 5.</summary><remarks><PARA>
	Number of calipers used to find the line.  
	The number of calipers minus the <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.NumToIgnore">number of points to ignore</see> 
	must be greater than or equal to the minimum number of points required to fit a line (2).
	</PARA><DEFAULT>6</DEFAULT><PARA>
	If the value of this property is changed such that the number of calipers minus the 
	number of points to ignore is less than 2, <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.NumToIgnore" /> will be changed so 
	that the difference is 2 and the change event will indicate that both properties have changed.
	</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	A value of less than 2 was supplied.
	</para></exception><event cref="E:Cognex.VisionPro.Caliper.CogFindLine.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes.
	</para><para>The following state flag may be affected:</para><!--STATEID:cogFindLine_NumCalipers--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLine.SfNumCalipers" /></li></ul></event><event cref="E:Cognex.VisionPro.Caliper.CogFindLine.Changed" cgnxEvent="multiState"><para>
		
Fires when both this property and <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.NumToIgnore" /> change.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_FindLine_NumCalipers--><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLine.SfNumCalipers" /></li><!--FA:cogFA_FindLine_NumToIgnore--><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLine.SfNumToIgnore" /></li></ul></event></member><member name="P:Cognex.VisionPro.Caliper.CogFindLine.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLine.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLine.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLine.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLine.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLine.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLine.Execute(Cognex.VisionPro.CogImage8Grey)"><param name="image"><PARA>The image in which to locate the line.</PARA></param><remarks><PARA>Finds a <see cref="T:Cognex.VisionPro.CogLine" /> in the provided image by fitting the highest scoring edge points found by a suite of calipers defined by the <see cref="T:Cognex.VisionPro.Caliper.CogFindLine" />.</PARA></remarks><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogLine" />.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="image" /> is null.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="image" />  is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogCaliperNoScorersException" cgnxHRESULT="E_CogCaliper_NoScorers"><para>
	The collection of scoring functions in <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperRunParams" /> is null
  or empty or all the scoring functions are disabled and the maximum number of results specified is greater than 0.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogCaliperBadScorerException" cgnxHRESULT="E_CogCaliper_BadScorer"><para>
	The collection of single-edge scoring functions in <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperRunParams" /> 
	contains an edge pair scoring function, or the 
	collection of edge-pair scoring functions in <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.CaliperRunParams" /> 
	contains an single-edge scoring function.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFindAllCalipersFailedException" cgnxHRESULT="E_CogFind_AllCalipersFailed"><para>
	All of the calipers failed. This can happen when the  
	values for <see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperSearchLength" /> or 
	<see cref="P:Cognex.VisionPro.Caliper.CogFindCircle.CaliperProjectionLength" /> are too small or 
	when all of the specified caliper regions fall completely outside of the input image.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFindInvalidExpectedShapeException" cgnxHRESULT="E_CogFind_InvalidExpectedShape"><para>
	The selected space of the <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.ExpectedLineSegment" />
	is not a valid space of the input image; the selected space name of the
   <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.ExpectedLineSegment" /> is a nonqualified space name and more than one instance
	of it exists in the space tree of the input image; or the selected space name of the
   <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.ExpectedLineSegment" /> is not a legal space name.
   </para></exception><summary>Finds a Line in the provided image by fitting the highest scoring edge points found by a suite of calipers defined by the run parameters.</summary></member><member name="E:Cognex.VisionPro.Caliper.CogFindLine.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindLineTool"><summary>Tool which finds a line in a provided image by fitting the highest scoring edge points found by a suite of calipers.  This tool encompasses all of the interfaces required to run a line finder inspection.</summary><remarks><PARA>Tool which finds a line in a provided image by fitting the highest scoring edge points found by a suite of calipers.  This tool encompasses all of the interfaces required to run a line finder inspection.</PARA></remarks></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineTool.#ctor(Cognex.VisionPro.Caliper.CogFindLineTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineTool.SfResults"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Results may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineTool.Results"><remarks><PARA>Results from the last invocation of Run.</PARA></remarks><summary>Results from the last invocation of Run.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineTool.RunParams"><summary>The run parameters for this Line finder tool.</summary><remarks><PARA>The run parameters for this line finder tool.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindLineTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLineTool.SfRunParams" /></li></ul></event></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineTool.InputImage"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindLineTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLineTool.SfInputImage" /></li></ul></event><summary>Sets/Gets the image used to perform the find Line inspection.</summary><remarks><PARA>Sets and gets the image in which to find a line.</PARA></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineTool.CurrentRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindLineTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLineTool.SfCurrentRecordEnable" /></li></ul></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.Caliper.CogFindLineCurrentRecordConstants" />.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Caliper.CogFindLineCurrentRecordConstants">InputImage</see> + 
<see cref="T:Cognex.VisionPro.Caliper.CogFindLineCurrentRecordConstants">ExpectedLineSegment</see> + 
<see cref="T:Cognex.VisionPro.Caliper.CogFindLineCurrentRecordConstants">CaliperRegions</see> + 
<see cref="T:Cognex.VisionPro.Caliper.CogFindLineCurrentRecordConstants">InteractiveCaliperSize</see> +
<see cref="T:Cognex.VisionPro.Caliper.CogFindLineCurrentRecordConstants">InteractiveCaliperSearchDirection</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineTool.LastRunRecordDiagEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindLineTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLineTool.SfLastRunRecordDiagEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary><remarks><PARA>Enable creation of records by bitwise ORing the appropriate 
	<see cref="T:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordDiagConstants" />.  These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordDiagConstants">InputImageByReference</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineTool.LastRunRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFindLineTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLineTool.SfLastRunRecordEnable" /></li></ul></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants">BestFitLine</see> + 
<see cref="T:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants">ResultsUsedPoints</see> + 
<see cref="T:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants">ResultsIgnoredPoints</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindLineTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineTool.Run"><summary>Runs the tool using the current parameter settings.</summary><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.Caliper.CogFindLineTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.Caliper.CogFindLineTool" /> returns or in a
		<event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.Caliper.CogFindLineTool.SfResults" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><remarks><PARA>
	Attempts to locate a line in the supplied <see cref="P:Cognex.VisionPro.Caliper.CogFindLineTool.InputImage" /> using 
	the specified <see cref="P:Cognex.VisionPro.Caliper.CogFindLineTool.RunParams" />. The results are placed in <see cref="P:Cognex.VisionPro.Caliper.CogFindLineTool.Results" />.
	</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.Caliper.CogFindLineTool.RunParams" />  is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.Caliper.CogFindLineTool.InputImage" /> is null.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.Caliper.CogFindLineTool.InputImage" />  is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogCaliperNoScorersException" cgnxHRESULT="E_CogCaliper_NoScorers"><para>
	The collection of scoring functions in <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.CaliperRunParams" /> is null
  or empty or all the scoring functions are disabled and the maximum number of results specified is greater than 0.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogCaliperBadScorerException" cgnxHRESULT="E_CogCaliper_BadScorer"><para>
	The collection of single-edge scoring functions in <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.CaliperRunParams" /> 
	contains an edge pair scoring function, or the 
	collection of edge-pair scoring functions in <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.CaliperRunParams" /> 
	contains an single-edge scoring function.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFindAllCalipersFailedException" cgnxHRESULT="E_CogFind_AllCalipersFailed"><para>
	All of the calipers failed. This can happen when the  
	values for <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.CaliperSearchLength" /> or 
	<see cref="P:Cognex.VisionPro.Caliper.CogFindLine.CaliperProjectionLength" /> are too small or 
	when all of the specified caliper regions fall completely outside of the input image.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFindInvalidExpectedShapeException" cgnxHRESULT="E_CogFind_InvalidExpectedShape"><para>
	The selected space of the <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.ExpectedLineSegment" />
	is not a valid space of the input image; the selected space name of the
  <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.ExpectedLineSegment" />
 is a nonqualified space name and more than one instance
	of it exists in the space tree of the input image; or the selected space name of the
  <see cref="P:Cognex.VisionPro.Caliper.CogFindLine.ExpectedLineSegment" />
 is not a legal space name.
   </para></exception></member><member name="M:Cognex.VisionPro.Caliper.CogFindLineTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindCornerResult"><summary>Class that contains the corner finder results. Along with line finder results for both lines, there is a boolean to indicate that a corner was successfully computed as well as the two corner point coordinates.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCornerResult.#ctor(Cognex.VisionPro.Caliper.CogFindCornerResult)"><param name="pOther">The CogFindCornerResult object to be copied. May not be NULL.</param><exception cref="T:System.ArgumentNullException">If the input argument is NULL.</exception><summary>Construct a deep copy of the supplied CogFindCornerResult.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCornerResult.CornerY"><summary>The Y coordinate of the found corner point. Only valid if CornerFound is true.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCornerResult.CornerX"><summary>The X coordinate of the found corner point. Only valid if CornerFound is true.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCornerResult.CornerFound"><summary>Whether or not a corner was found. May be false if either expected line was not found, or if the found lines do not intersect, or if the found lines are identical.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCornerResult.LineResultsB"><summary>The line finder result for expected line B.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCornerResult.LineResultsA"><summary>The line finder result for expected line A.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindCorner"><summary>Class which contains the run parameters of a corner finder.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCorner.#ctor(Cognex.VisionPro.Caliper.CogFindCorner)"><param name="pOther">The CogFindCorner object to be copied.</param><summary>Construct a deep copy of the supplied CogFindCorner object.</summary><exception cref="T:System.ArgumentNullException">If pOther is NULL.</exception></member><member name="M:Cognex.VisionPro.Caliper.CogFindCorner.#ctor"><summary>Construct a CogFindCorner object.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCorner.SfCaliperProjectionLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperProjectionLength may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCorner.SfCaliperRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperRunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCorner.SfCaliperSearchDirection"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperSearchDirection may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCorner.SfCaliperSearchLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CaliperSearchLength may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCorner.SfDecrementNumToIgnore"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DecrementNumToIgnore may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCorner.SfExpectedLineSegmentA"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExpectedLineSegmentA may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCorner.SfExpectedLineSegmentB"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExpectedLineSegmentB may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCorner.SfNumCalipers"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumCalipers may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCorner.SfNumToIgnore"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumToIgnore may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCorner.NumToIgnore"><summary>The number of points that will be ignored in the fitting operation. If DecrementNumToIgnore is true then the number of points ignored is actually (NumToIgnore - Number of calipers that found no edge). Note that this setter may modify NumCalipers to ensure that NumCalipers - NumToIgnore is greater than or equal to 2.</summary><exception cref="T:System.ArgumentException">If NewVal is less than zero.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.Caliper.CogFindCorner.NumCalipers"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><exception cref="T:System.ArgumentException">If NewVal - NumToIgnore is less than 2.</exception><summary>Number of calipers used to find each line. NumCalipers - NumToIgnore must be greater than or equal to 2 (the minimum number of points required to find a line.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCorner.ExpectedLineSegmentB"><exception cref="T:System.ArgumentException">If NewVal is NULL.</exception><summary>The expected line segment B which is used to position the calipers for finding the line B.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.Caliper.CogFindCorner.ExpectedLineSegmentA"><exception cref="T:System.ArgumentException">If NewVal is NULL.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>The expected line segment A which is used to position the calipers for finding the line A.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCorner.DecrementNumToIgnore"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>If DecrementNumToIgnore is true then the number of points ignored is actually (NumToIgnore - Number of calipers that found no edge).</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCorner.CaliperSearchLength"><summary>The length of each caliper region along the caliper search direction. Specified in units of the selected space of the input image.</summary><exception cref="T:System.ArgumentException">If NewVal is less than or equal to zero.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.Caliper.CogFindCorner.CaliperSearchDirection"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Specifies the search direction of the caliper with respect to the tangent of the shape at the center of each caliper region. The default is PI/2 which indicates a search direction that is perpendicular to the tangent.</summary><exception cref="T:System.ArgumentException">If NewVal is within 0.001 of either zero or +/- PI.</exception></member><member name="P:Cognex.VisionPro.Caliper.CogFindCorner.CaliperRunParams"><exception cref="T:System.ArgumentException">If NewVal is NULL.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Parameters used to run the calipers</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCorner.CaliperProjectionLength"><exception cref="T:System.ArgumentException">If NewVal is less than or equal to zero.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>The length of each caliper region along the caliper projection direction. Specified in units of the selected space of the input image.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCorner.Execute(Cognex.VisionPro.CogImage8Grey)"><param name="image">The input image to be processed.</param><summary>Perform corner finding on the supplied input image.</summary><returns>The results of this operation. Note that this may be a partial result if one or both lines were not found, or if the found lines do not intersect in a single point.</returns><exception cref="T:System.ArgumentException">If image is NULL.</exception></member><member name="T:Cognex.VisionPro.Caliper.CogFindCornerTool"><summary>Tool which finds a corner in a provided image, as defined by the intersection of two lines.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCornerTool.#ctor(Cognex.VisionPro.Caliper.CogFindCornerTool)"><param name="pOther">The corner finder tool to be copied.</param><exception cref="T:System.ArgumentNullException">If pOther is NULL.</exception><summary>Construct a deep copy of the supplied corner finder tool.</summary></member><member name="M:Cognex.VisionPro.Caliper.CogFindCornerTool.#ctor"><summary>Construct a default corner finder tool.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerTool.SfResult"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Result may have changed.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCornerTool.Result"><summary>Results from the last invocation of Run.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCornerTool.RunParams"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>The run parameters for this corner finder tool.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCornerTool.InputImage"><summary>Sets/Gets the imiage used to perform the find corner inspection.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.Caliper.CogFindCornerTool.LastRunRecordDiagEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants. These are diagnostic records that may cause the tool to have a longer execution time.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.Caliper.CogFindCornerTool.LastRunRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary></member><member name="P:Cognex.VisionPro.Caliper.CogFindCornerTool.CurrentRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary></member><member name="T:Cognex.VisionPro.Caliper.ICogCaliperScorer"><remarks><PARA>Common interface for all scorers. This interface lets
	you enable and disable an individual scoring function.</PARA></remarks><summary>Common interface for all scorers.</summary></member><member name="P:Cognex.VisionPro.Caliper.ICogCaliperScorer.Enabled"><remarks><PARA>Whether this scorer will be used.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.Caliper.CogCaliperScorer.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCaliperScorer_Enabled--><ul /></event><summary>Whether this scorer will be used.</summary></member><member name="M:Cognex.VisionPro.Caliper.ICogCaliperScorer.Scores(System.Int32)"><param name="numEdges"><PARA>The number of edges (1 or 2).</PARA></param><remarks><PARA>
Returns true if this scorer applies to the given number of edges (1 or 2), false otherwise.</PARA></remarks><returns><PARA>True if this function applies to <paramref name="numEdges" />, false otherwise.</PARA></returns><summary>Whether this scorer applies for the given number of edges.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperResultGraphicConstants"><remarks><PARA>Constants used to specify desired result graphics.</PARA></remarks><summary>Constants used to specify desired result graphics for CreateResultGraphics().</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperResultGraphicConstants.Edges"><remarks><PARA>Draw the found edge(s) as line segment(s).  The length of the edge(s) is determined by the region's Y Axis length.  Two edges are drawn when in edge pair mode.</PARA></remarks><summary>Draw the found edge(s) as line segment(s).  The length of the edge(s) is determined by the region's Y Axis length.  Two edges are drawn when in edge pair mode.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperResultGraphicConstants.TipText"><summary>Add tooltip text to each result.</summary><remarks><PARA>Add tooltip text to each result.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperResultGraphicConstants.All"><summary>Draw all the result graphics.</summary><remarks><PARA>Draw all the result graphics.</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperTimeConstants"><remarks><PARA>Enumeration of times that may be requested from Caliper results.</PARA></remarks><summary>Enumeration of times that may be requested from Caliper results.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperTimeConstants.Score"><remarks><PARA>Time in milliseconds for the scoring.</PARA></remarks><summary>Time in milliseconds for the scoring.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperTimeConstants.EdgeDetect"><summary>Time in milliseconds for the edge detection.</summary><remarks><PARA>Time in milliseconds for the edge detection.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperTimeConstants.Filter"><remarks><PARA>Time in milliseconds for the filtering.</PARA></remarks><summary>Time in milliseconds for the filtering.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperTimeConstants.Projection"><summary>Time in milliseconds for the projection.</summary><remarks><PARA>Time in milliseconds for the projection.</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants"><remarks><PARA>Enumeration of one-dimensional coordinate spaces that Caliper uses. These spaces let you manipulate points within the one-dimensional images produced by the tool (projection and filtered) as well as within the results collection.</PARA></remarks><summary>Enumeration of 1D coordinate spaces that Caliper uses.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants.Filter"><summary>Space where zero corresponds to the left edge of the filtered image.</summary><remarks><PARA>Space where zero corresponds to the left edge of the filtered image.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants.Projection"><summary>Space where zero corresponds to the left edge of the projection image.</summary><remarks><PARA>Space where zero corresponds to the left edge of the projection image.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperSpaceConstants.Result"><summary>Space where zero corresponds to the center of the projection image.</summary><remarks><PARA>Space where zero corresponds to the center of the projection image. Keep in mind that the position of a Caliper result is expressed relative to the center of the projection image.</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperSortModeConstants"><remarks><PARA>Enumeration of ways in which caliper results may be sorted.</PARA></remarks><summary>Enumeration of ways in which caliper results may be sorted.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperSortModeConstants.Distance"><summary>Sort by distance - smallest distance first unless ReverseSortOrder is true.</summary><remarks><PARA>Sort by distance - smallest distance first unless ReverseSortOrder is true.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperSortModeConstants.Score"><summary>Sort by score - largest score first unless ReverseSortOrder is true.</summary><remarks><PARA>Sort by score - largest score first unless ReverseSortOrder is true.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperSortModeConstants.Position"><summary>Sort by position - smallest position first unless ReverseSortOrder is true.</summary><remarks><PARA>Sort by position - smallest position first unless ReverseSortOrder is true.</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants"><remarks><PARA>An enumeration of edge polarities.</PARA></remarks><summary>Enumeration of polarity possibilities.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants.DontCare"><summary>Edges are indicated by a dark to light or a light to dark transition.</summary><remarks><PARA>Edges are indicated by a dark to light or a light to dark transition.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants.LightToDark"><remarks><PARA>Edges are indicated by a light to dark transition.</PARA></remarks><summary>Edges are indicated by a light to dark transition.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperPolarityConstants.DarkToLight"><summary>Edges are indicated by a dark to light transition.</summary><remarks><PARA>Edges are indicated by a dark to light transition.</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants"><summary>Enumeration of caliper edge-finding modes.</summary><remarks><PARA>Enumeration of the Caliper tool's edge-finding modes. </PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants.Pair"><summary>Each result is comprised of a pair of edges.</summary><remarks><PARA>The Caliper tool searches for and returns the location of a pair of edges. The result position is centered between the two edges.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperEdgeModeConstants.SingleEdge"><summary>Each result is comprised of a single edge.</summary><remarks><PARA>The Caliper tool searches for and returns the location of a single edge.</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperSamplingModeConstants"><summary>Enumeration of affine sampling modes.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperSamplingModeConstants.BilinearAccurate"><summary>Use bilinear accurate.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperSamplingModeConstants.BilinearInterpolation"><summary>Use bilinear interpolation.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.Caliper.CogCaliperTool.LastRunRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogCaliper Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="CogCaliperTool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Non-Diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordConstants.Edges2"><summary>Generate a record containing the found edges in the region data.</summary><remarks><PARA>Generate a record containing the found edges in the region data.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordConstants.FilteredProjectionGraph"><summary>Generate a record containing the filtered projection graph.</summary><remarks><PARA>Generate a record containing the filtered projection graph.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordConstants.ProjectionGraph"><remarks><PARA>Generate a record containing the projection graph.</PARA></remarks><summary>Generate a record containing the projection graph.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordConstants.Edges"><remarks><PARA>Generate a record containing the found edges on the last run image.</PARA></remarks><summary>Generate a record containing the found edges on the last run image.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordConstants.None"><summary>Do not create records for any images or any graphics.</summary><remarks><PARA>Do not create records for any images or any graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordConstants.All"><remarks><PARA>Create records for all images and all graphics.</PARA></remarks><summary>Create records for all images and all graphics.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordDiagConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.Caliper.CogCaliperTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogCaliper Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="CogCaliperTool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordDiagConstants.TransformedRegionPixels"><remarks><PARA>Generate a record containing the pixels within the Region.</PARA></remarks><summary>Generate a record containing the pixels within the Region.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordDiagConstants.Region"><summary>Generate a record containing the Region.</summary><remarks><PARA>Generate a record containing the Region.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordDiagConstants.InputImageDeepCopy"><summary>Include a deep copy of the input image in the LastRunRecord.  You must set this bit, if you set any last run graphics bits.</summary><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.  You must set this bit, if you set any last run graphics bits.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.  You must set this bit, if you set any last run graphics bits.</summary><remarks><PARA>Include a reference to the input image in the LastRunRecord.  You must set this bit, if you set any last run graphics bits.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordDiagConstants.None"><remarks><PARA>Do not create records for any images or any graphics.</PARA></remarks><summary>Do not create records for any images or any graphics.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperLastRunRecordDiagConstants.All"><summary>Create records for all images and all graphics.</summary><remarks><PARA>Create records for all images and all graphics.</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.Caliper.CogCaliperTool.CurrentRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogCaliper Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="CogCaliperTool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperCurrentRecordConstants.Region"><summary>Generate a record containing the current Region.</summary><remarks><PARA>Generate a record containing the current Region.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperCurrentRecordConstants.None"><summary>Do not create records for any images or any graphics.</summary><remarks><PARA>Do not create records for any images or any graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperCurrentRecordConstants.All"><remarks><PARA>Create records for all images and all graphics.</PARA></remarks><summary>Create records for all images and all graphics.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogCaliperCurrentRecordConstants.InputImage"><remarks><PARA>Generate a record containing the current InputImage. This bit must be set to see any graphics.</PARA></remarks><summary>Generate a record containing the current InputImage. This bit must be set to see any graphics.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindLineResultGraphicConstants"><summary>Constants used to specify desired result graphics.</summary><remarks><PARA>Constants used to specify desired result graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineResultGraphicConstants.CaliperRegion"><remarks><PARA>Draw the caliper region.</PARA></remarks><summary>Draw the caliper region.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineResultGraphicConstants.CaliperEdge"><summary>Draw a line segment at the edge found by the caliper.  The length of the edge is determined by the caliper projection width.  Two edges are drawn when in edge pair mode.</summary><remarks><PARA>Draw a line segment at the edge found by the caliper.  The length of the edge is determined by the caliper projection width.  Two edges are drawn when in edge pair mode.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineResultGraphicConstants.DataPoint"><summary>Draw a cross at the data point found by the caliper.  This will be the center point of the edge pair when the caliper is configured for edge pair mode.</summary><remarks><PARA>Draw a cross at the data point found by the caliper.  This will be the center point of the edge pair when the caliper is configured for edge pair mode.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineResultGraphicConstants.TipText"><remarks><PARA>Turn on tip text for result graphics.</PARA></remarks><summary>Turn on tip text for result graphics.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineResultGraphicConstants.None"><remarks><PARA>Draw no result graphics.</PARA></remarks><summary>Draw no result graphics.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineResultGraphicConstants.All"><remarks><PARA>Draw all result graphics.</PARA></remarks><summary>Draw all result graphics.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants"><summary>Enumeration of non-diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.Caliper.CogFindLineTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFindLine Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfindlinetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants.FoundEdges"><summary>Generate a record containing the found edges in the caliper region data record.</summary><remarks><PARA>Generate a record containing the found edges in the caliper region data record.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants.FilteredProjectionGraph"><remarks><PARA>Generate records containing the filtered projection graph of each caliper.</PARA></remarks><summary>Generate records containing the filtered projection graph of each caliper.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants.ProjectionGraph"><remarks><PARA>Generate records containing the projection graph of each caliper.</PARA></remarks><summary>Generate records containing the projection graph of each caliper.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants.ResultsCaliperRegions"><remarks><PARA>Include the caliper region of each result in the LastRunRecord.</PARA></remarks><summary>Include the caliper region of each result in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants.ResultsCaliperEdges"><summary>Include the caliper edge of each result in the LastRunRecord.</summary><remarks><PARA>Include the caliper edge of each result in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants.ResultsIgnoredPoints"><remarks><PARA>Include a point marker for each point ignored in the fitting of the shape in the LastRunRecord.</PARA></remarks><summary>Include a point marker for each point ignored in the fitting of the shape in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants.ResultsUsedPoints"><summary>Include a point marker for each point used in the fitting of the shape in the LastRunRecord.</summary><remarks><PARA>Include a point marker for each point used in the fitting of the shape in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants.BestFitLineSegment"><remarks><PARA>Include the best fit LineSegment in the LastRunRecord.</PARA></remarks><summary>Include the best fit LineSegment in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordConstants.BestFitLine"><summary>Include the best fit Line in the LastRunRecord.</summary><remarks><PARA>Include the best fit Line in the LastRunRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordDiagConstants"><summary>Enumeration of diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.Caliper.CogFindLineTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFindLine Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfindlinetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordDiagConstants.TransformedRegionPixels"><remarks><PARA>Include an image in each caliper region record which contains the transformed pixels from within its caliper region.</PARA></remarks><summary>Include an image in each caliper region record which contains the transformed pixels from within its caliper region.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordDiagConstants.ExpectedLineSegment"><summary>Include a clone of the expected LineSegment in the LastRunRecord.</summary><remarks><PARA>Include a clone of the expected LineSegment in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordDiagConstants.InputImageDeepCopy"><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.</summary><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogFindLineCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.Caliper.CogFindLineTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFindLine Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfindlinetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineCurrentRecordConstants.InteractiveCaliperSearchDirection"><summary>Include a line segment that can be used to adjust the search direction of the caliper regions in the CurrentRecord.</summary><remarks><PARA>Include a line segment that can be used to adjust the search direction of the caliper regions in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineCurrentRecordConstants.InteractiveCaliperSize"><summary>Include a point marker that can be used to adjust the size of the caliper regions in the Current Record.</summary><remarks><PARA>Include a point marker that can be used to adjust the size of the caliper regions in the Current Record.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineCurrentRecordConstants.CaliperRegions"><summary>Include all of caliper regions, non-interactive, in the CurrentRecord.</summary><remarks><PARA>Include all of caliper regions, non-interactive, in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineCurrentRecordConstants.ExpectedLineSegment"><summary>Include the ExpectedLineSegment in the CurrentRecord.</summary><remarks><PARA>Include the ExpectedLineSegment in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindLineCurrentRecordConstants.InputImage"><summary>Include the input image in the CurrentRecord.</summary><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogFindCircleSearchDirectionConstants"><remarks><PARA>Indicates whether each caliper should search inward towards the center of the circle, or outward away from the center of the circle.</PARA></remarks><summary>Indicates whether each caliper should search inward towards the center of the Circle, or outward away from the center of the Circle.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleSearchDirectionConstants.Outward"><remarks><PARA>Caliper will search outward away from the center of the circle.</PARA></remarks><summary>Caliper will search outward away from the center of the Circle.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleSearchDirectionConstants.Inward"><remarks><PARA>Caliper will search inward towards the center of the circle.</PARA></remarks><summary>Caliper will search inward towards the center of the Circle.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindCircleResultGraphicConstants"><summary>Constants used to specify desired result graphics.</summary><remarks><PARA>Constants used to specify desired result graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleResultGraphicConstants.CaliperRegion"><summary>Draw the caliper region.</summary><remarks><PARA>Draw the caliper region.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleResultGraphicConstants.CaliperEdge"><remarks><PARA>Draw a line segment at the edge found by the caliper.  The length of the edge is determined by the caliper projection width.  Two edges are drawn when in edge pair mode.</PARA></remarks><summary>Draw a line segment at the edge found by the caliper.  The length of the edge is determined by the caliper projection width.  Two edges are drawn when in edge pair mode.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleResultGraphicConstants.DataPoint"><summary>Draw a cross at the data point found by the caliper.  This will be the center point of the edge pair when the caliper is configured for edge pair mode.</summary><remarks><PARA>Draw a cross at the data point found by the caliper.  This will be the center point of the edge pair when the caliper is configured for edge pair mode.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleResultGraphicConstants.TipText"><remarks><PARA>Turn on tip text for result graphics.</PARA></remarks><summary>Turn on tip text for result graphics.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleResultGraphicConstants.None"><summary>Draw no result graphics.</summary><remarks><PARA>Draw no result graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleResultGraphicConstants.All"><summary>Draw all result graphics.</summary><remarks><PARA>Draw all result graphics.</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.Caliper.CogFindCircleTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFindCircle Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfindcircletool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of non-diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants.FoundEdges"><summary>Generate a record containing the found edges in the caliper region data record.</summary><remarks><PARA>Generate a record containing the found edges in the caliper region data record.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants.FilteredProjectionGraph"><summary>Generate records containing the filtered projection graph of each caliper.</summary><remarks><PARA>Generate records containing the filtered projection graph of each caliper.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants.ProjectionGraph"><remarks><PARA>Generate records containing the projection graph of each caliper.</PARA></remarks><summary>Generate records containing the projection graph of each caliper.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants.ResultsCaliperRegions"><remarks><PARA>Include the caliper region of each result in the LastRunRecord.</PARA></remarks><summary>Include the caliper region of each result in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants.ResultsCaliperEdges"><remarks><PARA>Include the caliper edge of each result in the LastRunRecord.</PARA></remarks><summary>Include the caliper edge of each result in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants.ResultsIgnoredPoints"><remarks><PARA>Include a point marker for each point ignored in the fitting of the shape in the LastRunRecord.</PARA></remarks><summary>Include a point marker for each point ignored in the fitting of the shape in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants.ResultsUsedPoints"><remarks><PARA>Include a point marker for each point used in the fitting of the shape in the LastRunRecord.</PARA></remarks><summary>Include a point marker for each point used in the fitting of the shape in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants.BestFitCircularArc"><remarks><PARA>Include the best fit CircularArc in the LastRunRecord.</PARA></remarks><summary>Include the best fit CircularArc in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordConstants.BestFitCircle"><remarks><PARA>Include the best fit Circle in the LastRunRecord.</PARA></remarks><summary>Include the best fit Circle in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordDiagConstants"><summary>Enumeration of diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.Caliper.CogFindCircleTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFindCircle Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfindcircletool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordDiagConstants.TransformedRegionPixels"><summary>Include an image in each caliper region record which contains the transformed pixels from within its caliper region.</summary><remarks><PARA>Include an image in each caliper region record which contains the transformed pixels from within its caliper region.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordDiagConstants.ExpectedCircularArc"><remarks><PARA>Include a clone of the expected CircularArc in the LastRunRecord.</PARA></remarks><summary>Include a clone of the expected CircularArc in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordDiagConstants.InputImageDeepCopy"><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.</summary><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogFindCircleCurrentRecordConstants"><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.Caliper.CogFindCircleTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFindCircle Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfindcircletool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleCurrentRecordConstants.InteractiveCaliperSize"><remarks><PARA>Include a point marker that can be used to adjust the size of the caliper regions in the Current Record.</PARA></remarks><summary>Include a point marker that can be used to adjust the size of the caliper regions in the Current Record.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleCurrentRecordConstants.CaliperRegions"><remarks><PARA>Include all of caliper regions, non-interactive, in the CurrentRecord.</PARA></remarks><summary>Include all of caliper regions, non-interactive, in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleCurrentRecordConstants.ExpectedCircularArc"><summary>Include the ExpectedCircularArc in the CurrentRecord.</summary><remarks><PARA>Include the ExpectedCircularArc in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.Caliper.CogFindCircleCurrentRecordConstants.InputImage"><summary>Include the input image in the CurrentRecord.</summary><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.Caliper.CogFindEllipseFitConstraintConstants"><summary>What if any constraints should be applied to the ellipse fit.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseFitConstraintConstants.AccurateRMSError"><summary>Use accurate RMS Error constraint.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseFitConstraintConstants.ExpectedOrientation"><summary>Use expected orientation constraint.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseFitConstraintConstants.LeastSquares"><summary>Use least squares fit.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindEllipseSearchDirectionConstants"><summary>Indicates whether each caliper should search inward towards the center of the Ellipse, or outward away from the center of the Ellipse.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseSearchDirectionConstants.Outward"><summary>Caliper will search outward away from the center of the Ellipse.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseSearchDirectionConstants.Inward"><summary>Caliper will search inward towards the center of the Ellipse.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindEllipseResultGraphicConstants"><summary>Constants used to specify desired result graphics.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseResultGraphicConstants.CaliperRegion"><summary>Draw the caliper region.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseResultGraphicConstants.CaliperEdge"><summary>Draw a line segment at the edge found by the caliper.  The length of the edge is determined by the caliper projection width.  Two edges are drawn when in edge pair mode.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseResultGraphicConstants.DataPoint"><summary>Draw a cross at the data point found by the caliper.  This will be the center point of the edge pair when the caliper is configured for edge pair mode.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseResultGraphicConstants.TipText"><summary>Turn on tip text for result graphics.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseResultGraphicConstants.None"><summary>Draw no result graphics.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseResultGraphicConstants.All"><summary>Draw all result graphics.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordConstants"><summary>Enumeration of non-diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordConstants.FoundEdges"><summary>Generate a record containing the found edges in the caliper region data record.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordConstants.FilteredProjectionGraph"><summary>Generate records containing the filtered projection graph of each caliper.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordConstants.ProjectionGraph"><summary>Generate records containing the projection graph of each caliper.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordConstants.ResultsCaliperRegions"><summary>Include the caliper region of each result in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordConstants.ResultsCaliperEdges"><summary>Include the caliper edge of each result in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordConstants.ResultsIgnoredPoints"><summary>Include a point marker for each point ignored in the fitting of the shape in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordConstants.ResultsUsedPoints"><summary>Include a point marker for each point used in the fitting of the shape in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordConstants.BestFitEllipticalArc"><summary>Include the best fit EllipticalArc in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordConstants.BestFitEllipse"><summary>Include the best fit Ellipse in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordDiagConstants"><summary>Enumeration of diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordDiagConstants.TransformedRegionPixels"><summary>Include an image in each caliper region record which contains the transformed pixels from within its caliper region.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordDiagConstants.ExpectedEllipticalArc"><summary>Include a clone of the expected EllipticalArc in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordDiagConstants.InputImageDeepCopy"><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindEllipseCurrentRecordConstants"><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseCurrentRecordConstants.InteractiveCaliperSize"><summary>Include a point marker that can be used to adjust the size of the caliper regions in the Current Record.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseCurrentRecordConstants.CaliperRegions"><summary>Include all of caliper regions, non-interactive, in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseCurrentRecordConstants.ExpectedEllipticalArc"><summary>Include the ExpectedEllipticalArc in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindEllipseCurrentRecordConstants.InputImage"><summary>Include the input image in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordConstants"><summary>Enumeration of non-diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordConstants.FoundCorner"><summary>Include a point marker for the found corner in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordConstants.FoundEdges"><summary>Generate a record containing the found edges in the caliper region data record.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordConstants.FilteredProjectionGraph"><summary>Generate records containing the filtered projection graph of each caliper.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordConstants.ProjectionGraph"><summary>Generate records containing the projection graph of each caliper.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordConstants.ResultsCaliperRegions"><summary>Include the caliper region of each result in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordConstants.ResultsCaliperEdges"><summary>Include the caliper edge of each result in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordConstants.ResultsIgnoredPoints"><summary>Include a point marker for each point ignored in the fitting of the lines in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordConstants.ResultsUsedPoints"><summary>Include a point marker for each point used in the fitting of the lines in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordConstants.BestFitLineSegments"><summary>Include the best fit line segments in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordConstants.BestFitLines"><summary>Include the best fit lines in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordDiagConstants"><summary>Enumeration of diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordDiagConstants.TransformedRegionPixels"><summary>Include an image in each caliper region record which contains the transformed pixels from within its caliper region.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordDiagConstants.ExpectedLineSegments"><summary>Include a clone of the expected line segments in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordDiagConstants.InputImageDeepCopy"><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindCornerCurrentRecordConstants"><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerCurrentRecordConstants.InteractiveCaliperSearchDirection"><summary>Include a line segment that can be used to adjust the search direction of the caliper regions in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerCurrentRecordConstants.InteractiveCaliperSize"><summary>Include a point marker that can be used to adjust the size of the caliper regions in the Current Record.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerCurrentRecordConstants.CaliperRegions"><summary>Include all of caliper regions, non-interactive, in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerCurrentRecordConstants.ExpectedLineSegments"><summary>Include the expected line segments in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.Caliper.CogFindCornerCurrentRecordConstants.InputImage"><summary>Include the input image in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliper.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerContrast.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerPosition.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNeg.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNorm.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerPositionNormNeg.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNorm.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerSizeDiffNormAsym.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerSizeNorm.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorerStraddle.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorers.MovedItemEventHandler"><summary>Occurs after an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorers.MovingItemEventHandler"><summary>Occurs before an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorers.ReplacedItemEventHandler"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorers.ReplacingItemEventHandler"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorers.RemovedItemEventHandler"><summary>Occurs after an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorers.RemovingItemEventHandler"><summary>Occurs before an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorers.InsertedItemEventHandler"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorers.InsertingItemEventHandler"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorers.ClearedEventHandler"><summary>Occurs after this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogCaliperScorers.ClearingEventHandler"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindEllipse.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindCircle.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Caliper.CogFindLine.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member></members></doc>