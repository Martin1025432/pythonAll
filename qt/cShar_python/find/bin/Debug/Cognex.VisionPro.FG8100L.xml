<?xml version="1.0"?><doc><assembly><name>Cognex.VisionPro.FG8100L</name></assembly><members><member name="T:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L"><summary>This object may only be created from a CogFrameGrabber8100l class.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.#ctor(Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfCoordinateSpaceTree"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CoordinateSpaceTree may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfTimeoutEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TimeoutEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfTimeout"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Timeout may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfCameraPort"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CameraPort may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfAutoPrepareEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AutoPrepareEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfLightPower"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LightPower may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfLightEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LightEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfLightBrightFieldPowerRatio"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LightBrightFieldPowerRatio may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfLightDelay"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LightDelay may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfAuxLightEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AuxLightEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfAuxLightPort"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AuxLightPort may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfAuxLightPower"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AuxLightPower may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfAuxLightBrightFieldPowerRatio"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AuxLightBrightFieldPowerRatio may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfBrightness"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Brightness may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfContrast"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Contrast may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfTestEncoderEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TestEncoderEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfTestEncoderDirectionPositive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TestEncoderDirectionPositive may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfGetStepsPerLine"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetStepsPerLine may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfEncoderPort"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EncoderPort may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfNumEncoderPorts"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumEncoderPorts may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfAcquireDirectionPositive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AcquireDirectionPositive may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfCurrentEncoderCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentEncoderCount may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfResetCounterOnHardwareTrigger"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ResetCounterOnHardwareTrigger may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfTriggerFromEncoder"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerFromEncoder may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfEncoderOffset"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EncoderOffset may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfUseSingleChannel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by UseSingleChannel may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfStartAcqOnEncoderCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartAcqOnEncoderCount may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfIgnoreBackwardsMotionBetweenAcquires"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by IgnoreBackwardsMotionBetweenAcquires may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfEncoderResolution"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EncoderResolution may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfHorizontalAdjustment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HorizontalAdjustment may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfSyncModel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SyncModel may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfChargeTransferInterval"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ChargeTransferInterval may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfGetLookupTable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetLookupTable may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfExposure"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Exposure may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfStrobeEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StrobeEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfStrobePulseDuration"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StrobePulseDuration may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfStrobePulsePolarityHigh"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StrobePulsePolarityHigh may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfTriggerModel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerModel may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfTriggerEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfTriggerLowToHigh"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerLowToHigh may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfSettlingTime"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SettlingTime may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfDigitalHighGainSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DigitalHighGainSelected may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfMasterClockFrequency"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MasterClockFrequency may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfGetROIXYWidthHeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetROIXYWidthHeight may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfMaster"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Master may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfGetSlaves"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetSlaves may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfOffsetClampMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OffsetClampMode may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfSampleX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SampleX may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfSampleY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SampleY may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfHorizontalReadoutReversed"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HorizontalReadoutReversed may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfVerticalReadoutReversed"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by VerticalReadoutReversed may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfMinTriggerWidth"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MinTriggerWidth may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfMinTriggerPeriod"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MinTriggerPeriod may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfTriggerDelay"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerDelay may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfStrobeDelay"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StrobeDelay may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfOutlierPixelCorrectionEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutlierPixelCorrectionEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfRowColumnCalibrationEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RowColumnCalibrationEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfGetBrightnessMultiChannel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetBrightnessMultiChannel may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfGetContrastMultiChannel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetContrastMultiChannel may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfCameraBandwidth"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CameraBandwidth may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfUGain"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by UGain may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfVGain"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by VGain may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfOutputPixelFormat"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputPixelFormat may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfHardwareImagePool"><summary>This bit will be set in the EventArgs of a Changed event every time the HardwareImagePool setting has changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfRecommendedHardwareImagePool"><summary>This bit will be set in the EventArgs of a Changed event every time the RecommendedHardwareImagePool setting has changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfUseCustomHardwareImagePool"><summary>This bit will be set in the EventArgs of a Changed event every time the UseCustomHardwareImagePool setting has changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfCustomProps"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CustomProperties may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfIgnoreMissedTrigger"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by IgnoreMissedTrigger may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfIgnoreTooFastEncoder"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by IgnoreTooFastEncoder may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfROIMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ROIMode may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfDistancePerCycle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DistancePerCycle may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfProfileCameraPositiveEncoderDirection"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ProfileCameraPositiveEncoderDirection may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfProfileCameraAcquireDirection"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ProfileCameraAcquireDirection may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfTransportTimeout"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TransportTimeout may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfDetectionSensitivity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DetectionSensitivity may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfPacketSize"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PacketSize may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfLatencyLevel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LatencyLevel may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfZDetectionBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionBase may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfZDetectionHeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionHeight may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfZDetectionSampling"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionSampling may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfCameraMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Mode may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfLaserMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LaserMode may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfHighDynamicRange"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighDynamicRange may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfZDetectionBase2"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionBase2 may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfZDetectionHeight2"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionExcludeHeight2 may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfZDetectionSampling2"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionSampling2 may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfZDetectionEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfZDetectionEnable2"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionEnable2 may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfLinkDetectionZones"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LinkDetectionZones may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfBridgeDetectionZones"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by BridgeDetectionZones may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfTriggerType"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerType may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfLaserDetectionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LaserDetectionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfXScale"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by XScale may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfFirstPixelLocation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FirstPixelLocation may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfZScale"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZScale may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfZOffset"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZOffset may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfAutoCorrectPixelRowOrder"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AutoCorrectPixelRowOrder may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfCalibratedSpaceName2D"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CalibratedSpaceName2D may have changed.</summary></member><member name="F:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SfSelectCalibratedSpace2D"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectCalibratedSpace2D may have changed.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.UserData"><summary>Gets a CogDictionary object that can be used to store application-specific information for this acquisition fifo. Internal use only.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedProfileCameraParams"><value>An interface containing the profile camera parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the profile camera parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedGigEVisionTransportParams"><value>An interface containing the gige vision transport parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the gige vision transport parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedRangeImageParams"><value>An interface containing the range image parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the range image parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedCustomPropertiesParams"><summary>Gets the custom properties parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the custom properties parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedTriggerFilterParams"><summary>Gets the trigger filter parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the trigger filter parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedTriggerParams"><summary>Gets the trigger parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the trigger parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedSyncParams"><summary>Gets the video sync parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the video sync parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedStrobePulseDurationParams"><summary>Gets the strobe pulse duration parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the strobe pulse duration parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedStrobeDelayParams"><summary>Gets the strobe delay parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the strobe delay parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedStrobeParams"><summary>Gets the strobe parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the strobe parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedSimultaneousParams"><value>An interface containing the simultaneous acquisition parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the simultaneous acquisition parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedSettlingTimeParams"><summary>Gets the settling time parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the settling time parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedSampleParams"><value>An interface containing the sample parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the sample parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedReadoutDirectionParams"><summary>Gets the readout direction parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the readout direction parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedROIParams"><value>An interface containing the region of interest parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the region of interest parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedOffsetClampParams"><value>An interface containing the offset clamp parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the offset clamp parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedMasterClockFrequencyParams"><summary>Gets the master clock frequency parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the master clock frequency parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedLookupTableParams"><value>An interface containing the lookup table parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the lookup table parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedLineScanParams"><summary>Gets the linescan parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the linescan parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedLightParams"><value>An interface containing the light parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the light parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedHorizontalAdjustmentParams"><summary>Gets the horizontal adjustment parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the horizontal adjustment parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedExposureParams"><summary>Gets the exposure parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the exposure parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedDigitalCameraGainParams"><value>An interface containing the digital camera gain parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the digital camera gain parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedContrastMultiChannelParams"><value>An interface containing the multi-channel contrast parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the multi-channel contrast parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedContrastParams"><value>An interface containing the contrast parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the contrast parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedChargeTransferIntervalParams"><summary>Gets the charge transfer interval parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the charge transfer interval parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedCameraCalibrationParams"><value>An interface containing the camera calibration parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the camera calibration parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedBrightnessMultiChannelParams"><summary>Gets the multi-channel brightness parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary><value>An interface containing the multi-channel brightness parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OwnedBrightnessParams"><value>An interface containing the brightness parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the brightness parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.Owned1394DCAMParams"><value>An interface containing the IEEE 1394 DCAM parameters for this AcqFifo, or null if these parameters are not supported by your hardware in the currently selected video format.</value><summary>Gets the IEEE 1394 DCAM parameters.  These parameters are owned by this AcqFifo object, but are conveniently grouped together inside the returned interface.  A null interface will be returned if your hardware does not support these parameters.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.AutoPrepareEnabled"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq_AutoPrepareEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAutoPrepareEnabled" /></li></ul></event><summary>Whether a fifo is automatically prepared after a property is changed. Default is true.</summary><remarks><PARA>Specifies whether the acquisition FIFO is automatically <see cref="M:Cognex.VisionPro.ICogAcqFifo.Prepare">prepared</see> after a property changes.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.NumCameraPorts"><remarks><PARA>Returns the number of physical camera ports available for this acquisition FIFO.</PARA><PARA><see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" /> returns the number of camera ports available for connecting cameras of the same type as the video format you specified when you <see cref="M:Cognex.VisionPro.ICogFrameGrabber.CreateAcqFifo(System.String,Cognex.VisionPro.CogAcqFifoPixelFormatConstants,System.Int32,System.Boolean)">created the FIFO</see>. Camera port numbering starts at zero. The highest camera port number is one less than <see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" />. </PARA><PARA>Refer to the manual for the frame grabber you are using for information on how software port numbers map to the physical ports on your hardware.</PARA><PARA>Compare this function with 
		<see cref="M:Cognex.VisionPro.ICogFrameGrabber.GetNumCameraPorts(System.String)" />.
	</PARA></remarks><summary>Number of physical camera ports available for this acquisition fifo.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.VideoFormat"><summary>Video Format associated with this acquisition fifo.</summary><remarks><PARA>Returns the <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats">video format</see> associated with this acquisition FIFO. You specify the video format when you <see cref="M:Cognex.VisionPro.ICogFrameGrabber.CreateAcqFifo(System.String,Cognex.VisionPro.CogAcqFifoPixelFormatConstants,System.Int32,System.Boolean)">create an acquisition FIFO</see>.</PARA></remarks></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.FrameGrabber"><summary>Frame grabber associated with this acquisition fifo.</summary><remarks><PARA>Returns the <see cref="T:Cognex.VisionPro.CogFrameGrabber" /> associated with this acquisition FIFO.</PARA></remarks></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.CameraPort"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  Port &lt; 0 or Port &gt;= <see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" /></para></exception><summary>Camera port number which this fifo is attached to.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the camera port changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq_CameraPort--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCameraPort" /></li></ul></event><remarks><PARA>Sets or gets the camera port number that this acquisition FIFO is attached to. You specify the camera port when you <see cref="M:Cognex.VisionPro.ICogFrameGrabber.CreateAcqFifo(System.String,Cognex.VisionPro.CogAcqFifoPixelFormatConstants,System.Int32,System.Boolean)">create an acquisition FIFO</see>.</PARA><PARA>You can use <see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" /> to get the number of available camera ports. Port numbering starts at zero.</PARA></remarks></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.Timeout"><summary>Read or set the timeout in milliseconds used when calling Acquire or CompleteAcquire (typically used for handling the case of triggers that didn't occur).</summary><remarks><PARA>Sets or gets the timeout period in milliseconds used when calling <see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)" /> or <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" />.
The timeout period is typically used for handling the case of triggers that didn't occur.</PARA><DEFAULT>10000 milliseconds</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the timeout period changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq_Timeout--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTimeout" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is &lt;= 0.</para></exception></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.OutputPixelFormat"><summary>The desired pixel format for images acquired with this fifo.  A conversion will be performed if different from AcquiredPixelFormat.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.TimeoutEnabled"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the timeout period is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq_TimeoutEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTimeoutEnabled" /></li></ul></event><summary>Read or set whether the timeout value is used.</summary><remarks><PARA>Sets or gets whether the <see cref="P:Cognex.VisionPro.ICogAcqFifo.Timeout" /> is used.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.CoordinateSpaceTree"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the coordinate space tree changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq_CoordinateSpaceTree--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCoordinateSpaceTree" /></li></ul></event><summary>Reads or sets a custom space tree that will be copied into all images acquired from this acquisition fifo.  The tree provides advanced functions for managing coordinate spaces.</summary><remarks><PARA>Sets or gets the tree of all named coordinate spaces for images acquired from this acquisition FIFO.  
						The <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> provides advanced functions for managing coordinate spaces.</PARA><PARA>The coordinate space tree is deep-copied into the acquired <see cref="T:Cognex.VisionPro.CogImage" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SelectedSpaceName"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected coordinate space changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq_SelectedSpaceName--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSelectedSpaceName" /></li></ul></event><remarks><PARA>Sets or gets the selected <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> that is applied to each image returned from <see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)" /> or <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" />.

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><PARA>The value of this property is ignored when this <see cref="T:Cognex.VisionPro.ICogAcqFifo" /> is used to acquire a <see cref="T:Cognex.VisionPro.CogImage16Range" />.</PARA><DEFAULT>The default space name is "@".</DEFAULT></remarks><summary>Read or set the selected space name that is applied to each image returned from Acquire or CompleteAcquire.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="val" /> is not a valid space name.</para></exception></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.AcquiredPixelFormat"><summary>The actual pixel format output by the camera.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.Acquire(System.Int32@)"><param name="triggerNumber"><PARA>A trigger sequence number. </PARA></param><remarks><PARA>Acquires a new image. This method waits until an image is acquired. To start an acquisition without waiting, use <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> and <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" />.</PARA><!--
	<PARA>
		<see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)"/> can fire <see cref="T:Cognex.VisionPro.CogAcqCompleteEvent"/>.<LINK IFACE="ICogAcqCompleteEvent" FUNC="Complete" cref="Cognex.VisionPro.CogAcqCompleteEvent.Complete" assemblyName="Core" iface="CogAcqCompleteEvent" func="Complete"/>, <see cref="T:Cognex.VisionPro.CogAcqMovePartEvent"/>.<LINK IFACE="ICogAcqMovePartEvent" FUNC="MovePart" cref="Cognex.VisionPro.CogAcqMovePartEvent.MovePart" assemblyName="Core" iface="CogAcqMovePartEvent" func="MovePart"/>, and <see cref="T:Cognex.VisionPro.CogAcqOverrunEvent"/>.<LINK IFACE="ICogAcqOverrunEvent" FUNC="Overrun" cref="Cognex.VisionPro.CogAcqOverrunEvent.Overrun" assemblyName="Core" iface="CogAcqOverrunEvent" func="Overrun"/>.
</PARA>
--></remarks><summary>Acquire a new image.</summary><event cref="E:Cognex.VisionPro.ICogAcqFifo.Complete"><para>
		The acquisition request completed, possibly unsuccessfully.
		</para></event><event cref="E:Cognex.VisionPro.ICogAcqFifo.MovePart"><para>
		Fired when the camera's field of view can be changed without affecting the acquired image.
		</para></event><event cref="E:Cognex.VisionPro.ICogAcqFifo.Overrun"><para>
		Fired from an acquisition FIFO when a trigger is missed or an overrun occurs.
		</para></event><!--
	<ERROR_HRESULT NAME="E_CogAcq_ResourceAllocationTimeout">
		<LINK IFACE="ICogAcqResourceTimeout">Resource allocation timeout</LINK> expired.</ERROR_HRESULT>
--><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqTimeoutException" cgnxHRESULT="E_CogAcq_Timeout"><para><see cref="P:Cognex.VisionPro.ICogAcqFifo.Timeout" /> period expired.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqWrongTriggerModelException" cgnxHRESULT="E_CogAcq_WrongTriggerModel"><para><see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerModel">Trigger model</see> is <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Auto</see> or <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Slave</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOverrunException" cgnxHRESULT="E_CogAcq_Overrun"><para>A trigger could not be serviced.</para></exception><!-- <ERROR_HRESULT NAME="E_CogAcq_Missed">The FIFO filled up. The size of the FIFO queue is 32 requests.</ERROR_HRESULT> --><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqAbnormalException" cgnxHRESULT="E_CogAcq_Abnormal"><para>The acquisition failed because of a fault in the acquisition hardware or because of some other unusual problem.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqEncoderOverrunException" cgnxHRESULT="E_CogAcq_EncoderOverrun"><para>Encoder overrun.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqInvalidROIException" cgnxHRESULT="E_CogAcq_InvalidROI"><para>The <see cref="T:Cognex.VisionPro.ICogAcqROI">region of interest</see> is not valid.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOtherFifoErrorException" cgnxHRESULT="E_CogAcq_OtherFifoError"><para>There was an error in another FIFO in the same master/slave group.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqTooManyStartsException" cgnxHRESULT="E_CogAcq_TooManyStarts"><para>No more acquisition requests can be made. The limit is 32 acquisition requests.</para></exception><returns><PARA>The acquired <see cref="T:Cognex.VisionPro.ICogImage">image</see>.</PARA></returns></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.StartAcquire"><summary>Start a new acquisition. The returned value is a ticket that may be handed to CompleteAcquire.</summary><returns><PARA>A ticket that you can pass <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" /> to complete the acquisition.</PARA></returns><remarks><PARA>Starts a new acquisition without waiting for the acquisition for complete. The returned value is a ticket that you pass <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" /> to get the acquired image.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqWrongTriggerModelException" cgnxHRESULT="E_CogAcq_WrongTriggerModel"><para>Trigger model is auto or slave.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqTooManyStartsException" cgnxHRESULT="E_CogAcq_TooManyStarts"><para>No more acquisition requests can be made. The limit is 32 acquisition requests.</para></exception></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)"><param name="requestedTicket"><PARA>The ticket of an outstanding acquisition. This is usually a value returned by <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" />. If this value is omitted or set to -1, the oldest outstanding acquisition is completed. <paramref name="requestedTicket" /> must be -1 for automatically triggered acquisitions.</PARA></param><param name="ticket"><PARA>The actual ticket of the completed acquisition. When <paramref name="requestedTicket" /> is not −1, this value is the same as <paramref name="requestedTicket" />.</PARA></param><param name="triggerNumber"><PARA>The trigger sequence number of the completed acquisition. You can compare this value with <paramref name="Trigger" /> value returned by <see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)" /> to see if there were missed triggers.</PARA></param><summary>Completes the acquisition specified by the given ticket and returns the acquired image.  If the ticket is omitted, or set to -1, the uncompleted acquire that was least recently started will be completed.</summary><returns><PARA>The acquired <see cref="T:Cognex.VisionPro.ICogImage">image</see>.</PARA></returns><!--
    <ERROR_HRESULT NAME="E_CogAcq_ResourceAllocationTimeout"><LINK IFACE="ICogAcqResourceTimeout">Resource allocation timeout</LINK> expired.</ERROR_HRESULT>
--><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqTimeoutException" cgnxHRESULT="E_CogAcq_Timeout"><para><see cref="P:Cognex.VisionPro.ICogAcqFifo.Timeout" /> period expired.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqBadTicketException" cgnxHRESULT="E_CogAcq_BadTicket"><para><paramref name="ticket" /> is −1 and there is no outstanding <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" />, or if there is no <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> for this <paramref name="ticket" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOldTicketException" cgnxHRESULT="E_CogAcq_OldTicket"><para>The image corresponding to <paramref name="ticket" /> has already been collected.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOverrunException" cgnxHRESULT="E_CogAcq_Overrun"><para>A trigger could not be serviced.</para></exception><!-- <ERROR_HRESULT NAME="E_CogAcq_Missed">The FIFO filled up. The size of the FIFO queue is 32 requests.</ERROR_HRESULT> --><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqAbnormalException" cgnxHRESULT="E_CogAcq_Abnormal"><para>The acquisition failed because of a fault in the acquisition hardware or because of some other unusual problem.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqEncoderOverrunException" cgnxHRESULT="E_CogAcq_EncoderOverrun"><para>Encoder overrun.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqInvalidROIException" cgnxHRESULT="E_CogAcq_InvalidROI"><para>The <see cref="T:Cognex.VisionPro.ICogAcqROI">region of interest</see> is not valid.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqNoOutstandingStartsException" cgnxHRESULT="E_CogAcq_NoOutstandingStarts"><para><paramref name="ticket" /> was −1, but there were no outstanding <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> requests</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOtherFifoErrorException" cgnxHRESULT="E_CogAcq_OtherFifoError"><para>There was an error in another FIFO in the same master/slave group.</para></exception><remarks><PARA>Completes the acquisition specified by the given ticket and returns the acquired image.  If <paramref name="ticket" /> is omitted, or set to -1, the oldest outstanding acquisition will be completed.</PARA><NOTE>
	If you are completing an automatically triggered acquisition (one for which <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> was not called),
	then you must  either omit the <paramref name="requestedTicket" /> argument or supply a value of -1. 
</NOTE><PARA>
Under some conditions, the VisionPro acquisition system may fire a
	<see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" />
event when there is no completed acquisition available.

If you call <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" />
when this happens, you will receive a timeout error, or possibly some other error. 
This happens primarily when you disable triggers and
	<see cref="M:Cognex.VisionPro.ICogAcqFifo.Flush" /> the FIFO (to stop acquisitions),
and the
		<see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" />
event for the flushed image fires.

To avoid this situation, be sure
to call
<see cref="M:Cognex.VisionPro.ICogAcqFifo.GetFifoState(System.Int32@,System.Int32@,System.Boolean@)" />, 
to determine whether there really is an image pending.
</PARA><PARA><see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" /> can fire
		<see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" />,
		<see cref="E:Cognex.VisionPro.ICogAcqFifo.MovePart" />,
		and <see cref="E:Cognex.VisionPro.ICogAcqFifo.Overrun" />.
</PARA></remarks></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.CompleteAcquireEx(Cognex.VisionPro.ICogAcqInfo)"><param name="info">Contains information about the completed acquisition.</param><summary>Completes the acquisition specified by the requested ticket and returns the acquired image.  This method is the same as <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" />  but passes and returns its results in an <see cref="T:Cognex.VisionPro.ICogAcqInfo" />.</summary><returns><PARA>The acquired <see cref="T:Cognex.VisionPro.ICogImage">image</see>.</PARA></returns><!--
						<ERROR_HRESULT NAME="E_CogAcq_ResourceAllocationTimeout"><LINK IFACE="ICogAcqResourceTimeout">Resource allocation timeout</LINK> expired.</ERROR_HRESULT>
					--><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqTimeoutException" cgnxHRESULT="E_CogAcq_Timeout"><para><see cref="P:Cognex.VisionPro.ICogAcqFifo.Timeout" /> period expired.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqBadTicketException" cgnxHRESULT="E_CogAcq_BadTicket"><para><paramref name="Ticket" /> is −1 and there is no outstanding <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" />, or if there is no <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> for this <paramref name="Ticket" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOldTicketException" cgnxHRESULT="E_CogAcq_OldTicket"><para>The image corresponding to <paramref name="Ticket" /> has already been collected.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOverrunException" cgnxHRESULT="E_CogAcq_Overrun"><para>A trigger could not be serviced.</para></exception><!-- <ERROR_HRESULT NAME="E_CogAcq_Missed">The FIFO filled up. The size of the FIFO queue is 32 requests.</ERROR_HRESULT> --><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqAbnormalException" cgnxHRESULT="E_CogAcq_Abnormal"><para>The acquisition failed because of a fault in the acquisition hardware or because of some other unusual problem.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqEncoderOverrunException" cgnxHRESULT="E_CogAcq_EncoderOverrun"><para>Encoder overrun.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqInvalidROIException" cgnxHRESULT="E_CogAcq_InvalidROI"><para>The <see cref="T:Cognex.VisionPro.ICogAcqROI">region of interest</see> is not valid.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqNoOutstandingStartsException" cgnxHRESULT="E_CogAcq_NoOutstandingStarts"><para><paramref name="Ticket" /> was −1, but there were no outstanding <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> requests</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOtherFifoErrorException" cgnxHRESULT="E_CogAcq_OtherFifoError"><para>There was an error in another FIFO in the same master/slave group.</para></exception><remarks><PARA>Completes the acquisition specified by the requested ticket and returns the acquired image. This method is the same as <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" /> but passes and returns its results in an <see cref="M:Cognex.VisionPro.ICogAcqInfo" />.</PARA><NOTE>
			If you are completing an automatically triggered acquisition (one for which <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> was not called),
			then you must either omit the <see cref="E:Cognex.VisionPro.CogAcqInfo.RequestedTicket" /> property of the <paramref name="info" /> argument or supply a value of -1. 
		</NOTE><PARA>
		Under some conditions, the VisionPro acquisition system may fire a
			<see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" />
		event when there is no completed acquisition available.

		If you call <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquireEx(Cognex.VisionPro.ICogAcqInfo)" />
		when this happens, you will receive a timeout error, or possibly some other error. 
		This happens primarily when you disable triggers and
			<see cref="M:Cognex.VisionPro.ICogAcqFifo.Flush" /> the FIFO (to stop acquisitions),
		and the
				<see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" />
		event for the flushed image fires.

		To avoid this situation, be sure
		to call
		<see cref="M:Cognex.VisionPro.ICogAcqFifo.GetFifoState(System.Int32@,System.Int32@,System.Boolean@)" />, 
		to determine whether there really is an image pending.
		</PARA><PARA><see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquireEx(Cognex.VisionPro.ICogAcqInfo)" /> can fire
				<see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" />,
				<see cref="E:Cognex.VisionPro.ICogAcqFifo.MovePart" />,
				and <see cref="E:Cognex.VisionPro.ICogAcqFifo.Overrun" />.
		</PARA></remarks></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.Flush"><remarks><PARA>Flushes all outstanding acquisitions.</PARA></remarks><summary>Flush all outstanding queued acquisitions.</summary><event cref="E:Cognex.VisionPro.ICogAcqFifo.Flushed"><para>
		Fires when the acquisition FIFO is flushed. 
		</para></event></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.GetFifoState(System.Int32@,System.Int32@,System.Boolean@)"><param name="numPending"><PARA>The number of acquisitions in the pending state. This is the number of
acquisitions requested by <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> for which acquisition has not started. To achieve frame
rate acquisition in manual trigger mode, the FIFO must always have one or more
pending acquisitions.</PARA></param><param name="numReady"><PARA>The number of acquisition requests ready to be <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)">completed</see>.</PARA></param><param name="busy"><PARA>True if the oldest outstanding acquisition is waiting for a trigger signal or is
acquiring an image. For master/slave acquisitions, it becomes true only after the master
and all slaves are ready for acquisition.</PARA></param><summary>Returns the instantaneous state of the fifo.</summary><remarks><PARA>Returns the current  state of the acquisition FIFO.</PARA></remarks></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.Prepare"><summary>Prepare the fifo so it is ready to start taking triggers immediately.</summary><remarks><PARA>Prepare the acquisition hardware so that the FIFO is ready to accept triggers immediately.</PARA><PARA>When <see cref="P:Cognex.VisionPro.ICogAcqFifo.AutoPrepareEnabled" /> is True (the default), the acquisition system automatically calls <see cref="M:Cognex.VisionPro.ICogAcqFifo.Prepare" /> when any property changes. In most cases you do not need to use <see cref="M:Cognex.VisionPro.ICogAcqFifo.Prepare" /> yourself.</PARA><PARA>If you are changing many properties at once, you can set <see cref="P:Cognex.VisionPro.ICogAcqFifo.AutoPrepareEnabled" /> to False, change all the properties, and call <see cref="M:Cognex.VisionPro.ICogAcqFifo.Prepare" /> to set up the hardware for all the properties.</PARA></remarks></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.GetInternal(System.Double@,System.Int32)"><param name="val">n/a</param><param name="select">n/a</param><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SetInternal(System.Double,System.Int32)"><param name="val">n/a</param><param name="select">n/a</param><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.CreateEventSink(System.String)"><param name="progIDOrClassID"><PARA>A ProgID or ClassID that identifies the type of object to create. </PARA></param><returns><PARA>The object that was created.</PARA></returns><remarks><PARA>Create an object in the event thread of this CogAcqFifo. This allows single-threaded objects to sink acquisition events efficiently.</PARA><PARA>
This CogAcqFifo's event thread runs at a high priority, which means that the event 
handler you implement in the specified class will also run at a high priority. You should 
take care to limit the amount of processing time required to service events.
</PARA><PARA>
This function creates an object within the apartment of the acquisition FIFO's
event thread but it does not actually connect the FIFO events to the
object. In Visual Basic events are connected by assigning the FIFO  to
a <BOLD> WithEvents</BOLD> variable declared in the class that was created. 
For example if your event sink class (named  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="MyInspection" />
				--><see cref="T:Cognex.VisionPro.MyInspection" />) contains 
the following code:
</PARA><CODE LANGUAGE="VB">
  Public WithEvents AcqComplete As CogAcqCompleteEvent

  Private Sub AcqComplete_Complete(ByVal Ticket As Long, ByVal TriggerNumber As Long)
	<COMMENTLINE><ITALIC>Run the inspection now</ITALIC></COMMENTLINE>
  End Sub
</CODE><PARA>
You would use the code shown below to create the event sink class and 
connect it to the acquisition FIFO event source when your program starts:
</PARA><CODE LANGUAGE="VB">
  Dim FGs As New CogFrameGrabbers, AcqFifo As CogAcqFifo
  Set AcqFifo = FGs(0).CreateAcqFifo("Sony XC-75 640x480 IntDrv CCF")
  
  Dim Inspection As MyInspection
  Set Inspection = AcqFifo.CreateEventSink("MyProject.MyInspection")
  Set Inspection.AcqComplete = AcqFifo
   </CODE><NOTE>
If you wish to use this function to implement true multithreading in a Visual Basic 6 application, 
the object specified by <paramref name="progIDOrClassID" /> must be
defined in an ActiveX DLL project.
</NOTE></remarks><summary>Create an object in the event thread of this fifo. This allows single-threaded objects to sink acquisition events efficiently.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.Cognex::VisionPro::ICogAcqSettingInfo#IsPresent(System.Int32)"><param name="settingID"></param><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.Cognex::VisionPro::ICogAcqSettingInfo#DefaultValue(System.Int32)"><param name="settingID"></param><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.Cognex::VisionPro::ICogAcqSettingInfo#MinValue(System.Int32)"><param name="settingID"></param><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.Cognex::VisionPro::ICogAcqSettingInfo#MaxValue(System.Int32)"><param name="settingID"></param><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.Flushed"><summary>Occurs after an acquisition FIFO is flushed.</summary></member><member name="E:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L"><summary>This object may only be created from the CogFrameGrabber8100ls class.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.MaxPeakToPeakVoltage"><summary>Read or set the maximum peak to peak voltage.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.UniqueID"><summary>String which uniquely identifies this frame grabber.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.OutputLines"><summary>Gets the collection of available output lines.  If no output lines are available the returned collection will have a Count of zero.</summary><value>The collection of available output lines.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.InputLines"><summary>Gets the collection of available input lines.  If no input lines are available the returned collection will have a Count of zero.</summary><value>The collection of available input lines.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.OwnedImagingDeviceAccess"><summary>Gets an interface that provides low-level access to the Imaging Device.  A null interface will be returned if your hardware does not support the Imaging Device.  Your code should check for null before attempting access.</summary><value>An interface that provides low-level access to the Imaging Device, or null if such cameras are not supported by your hardware.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.OwnedGigEAccess"><summary>Gets an interface that provides low-level access to the GigE Vision camera.  A null interface will be returned if your hardware does not support GigE Vision.  Your code should check for null before attempting access.</summary><value>An interface that provides low-level access to the GigE Vision camera, or null if such cameras are not supported by your hardware.</value></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.Owned1394DCAMAccess"><value>An interface that provides low-level access to the 1394 DCAM camera, or null if such cameras are not supported by your hardware.</value><summary>Gets an interface that provides low-level access to the 1394 DCAM camera.  A null interface will be returned if your hardware does not support 1394 DCAM.  Your code should check for null before attempting access.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.NumVideoChannels"><remarks><PARA>Returns the number of video channels this frame grabber supports. This is the maximum number of simultaneous acquisitions the frame grabber supports.</PARA></remarks><summary>Number of video channels this frame grabber supports. This is the maximum number of simultaneous acquisitions allowed.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.AvailableVideoFormats"><remarks><PARA>Returns a collection of video formats that this frame grabber supports. You specify the video format when you <see cref="M:Cognex.VisionPro.ICogFrameGrabber.CreateAcqFifo(System.String,Cognex.VisionPro.CogAcqFifoPixelFormatConstants,System.Int32,System.Boolean)">create an acquisition FIFO</see>.</PARA><PARA>On frame grabbers that support <see cref="u:Acquisition.CDC_CMOS.Theory.CMOSCams">CogLink</see>, <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats" /> returns a collection of video formats supported by all connected cameras.
To determine which formats a particular CogLink camera supports, use 
<see cref="T:Cognex.VisionPro.FG8100D.Implementation.Internal.CogLinkCamera8100D">CogLinkCamera8100D</see>.<see cref="P:Cognex.VisionPro.ICogLinkCamera.AvailableVideoFormats" />.
</PARA><PARA>See the 
<see cref="r:cameras">camera support table</see>
 for a list of video formats supported for each frame grabber.</PARA></remarks><summary>Collection of video formats that this frame grabber supports.</summary></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.Index"><summary>Index within the collection of frame grabbers of this type.</summary><remarks><PARA>Returns the index of this frame grabber within the collection of frame grabbers of this type.</PARA></remarks></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.SerialNumber"><summary>Serial number of this frame grabber.</summary><remarks><PARA>Serial number of this frame grabber.</PARA></remarks></member><member name="P:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.Name"><remarks><PARA>Returns the model name of this frame grabber, for example "Cognex 8100M"</PARA></remarks><summary>Name indicating the type of frame grabber.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.GetStatus(System.Boolean)"><param name="Cached">n/a</param><value>Interface to current status.</value><summary>Gets the current status of the device.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.GetAvailableVideoFormatOptions(Cognex.VisionPro.CogAcqVideoFormatOptionConstants,System.String,System.String,System.String,System.String,System.String)"><param name="requestedOptions"><PARA>The options you want reported for the cameras that match the other parameters.</PARA></param><param name="cameraManufacturer"><PARA>The camera manufacturer such as "Pulnix" or "Sony".</PARA></param><param name="cameraModel"><PARA>The camera model such as "TM-7EX".</PARA></param><param name="cameraResolution"><PARA>The camera resolution such as "640x480".</PARA></param><param name="cameraDriveType"><PARA>The type of camera drive such as "IntDrv" or "ExtPLLCo"</PARA></param><param name="cameraOptions"><PARA>The camera options such as "rapid-reset, shutter-sw-EDONPISHAII".</PARA></param><remarks><PARA>Returns a sorted list of video format options that match the selected criteria.</PARA><PARA>You specify the video format options that interest you in <paramref name="requestedOptions" /> and use the remaining parameters as filters.

<see cref="M:Cognex.VisionPro.ICogFrameGrabber.GetAvailableVideoFormatOptions(Cognex.VisionPro.CogAcqVideoFormatOptionConstants,System.String,System.String,System.String,System.String,System.String)" />
returns a <see cref="T:Cognex.VisionPro.CogStringCollection" /> of video format options that match your criteria.
If you request more than one option,
	the resulting strings contain the options concatenated with a single space between them.

The
	<see cref="M:Cognex.VisionPro.CogStringCollection.GetKey(System.Int32)">key</see>
	of each element in the collection returned is the index of the first available video format  that matches.

You can use this value as an index to <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats" />.</PARA></remarks><summary>Returns a sorted list of video format options that match the selected criteria.</summary><returns><PARA>The collection of options that matches the criteria.</PARA></returns></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.GetNumCameraPorts(System.String)"><param name="videoFormat"><PARA>The video format.</PARA></param><remarks><PARA>Returns the number of physical camera ports for a particular <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats">video format</see> on this frame grabber. Camera port numbering starts at zero. The highest camera port number is one less than 
<see cref="M:Cognex.VisionPro.ICogFrameGrabber.GetNumCameraPorts(System.String)" />.
 </PARA><PARA>Your frame grabber may not be able to acquire images from all ports simultaneously. Use <see cref="P:Cognex.VisionPro.ICogFrameGrabber.NumVideoChannels" /> to determine how many images can be acquired at the same time.</PARA><PARA>Refer to the manual for the frame grabber you are using for information on how software port numbers map to the physical ports on your hardware.</PARA><PARA>Compare this function with <see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" />.</PARA></remarks><summary>Number of camera ports available for the given video format.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.GetSupportsPixelFormat(Cognex.VisionPro.CogAcqFifoPixelFormatConstants)"><param name="format"><PARA>The pixel format. Must be one of the pixel formats in <see cref="T:Cognex.VisionPro.CogAcqFifoPixelFormatConstants" />.</PARA></param><remarks><PARA>
This method is deprecated. It always returns True.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="format" /> is not in <see cref="T:Cognex.VisionPro.CogAcqFifoPixelFormatConstants" />.</para></exception><summary>Whether this frame grabber supports the given pixel format.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.CreateAcqFifo(System.String,Cognex.VisionPro.CogAcqFifoPixelFormatConstants,System.Int32,System.Boolean)"><param name="videoFormat"><PARA>The video format. Must be one of the strings returned by <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats" /></PARA></param><param name="fifoType"><PARA>This parameter is ignored. </PARA></param><param name="cameraPort"><PARA>Specifies the camera port to use with the newly created acquisition FIFO. Camera port numbering starts at zero.
Use
	<see cref="M:Cognex.VisionPro.ICogFrameGrabber.GetNumCameraPorts(System.String)" />.
to determine how many camera ports this frame grabber supports.</PARA></param><param name="autoPrepare"><PARA>Sets the  <see cref="P:Cognex.VisionPro.ICogAcqFifo.AutoPrepareEnabled" /> property of the acquisition FIFO that specifies whether the FIFO is automatically <see cref="M:Cognex.VisionPro.ICogAcqFifo.Prepare">prepared</see> when a property changes.</PARA></param><returns><PARA>An <see cref="T:Cognex.VisionPro.CogAcqFifo" /> suitable for acquiring images of the specified <see cref="T:Cognex.VisionPro.CogAcqFifoPixelFormatConstants">pixel format</see> with the specified video format.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.ICogAcqFifo" /> on this frame grabber.</PARA><PARA>You can use <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats" /> to get a list of available video formats. They are also listed in the 
<HTMLPASS><A HREF="cameras.html">camera support table</A></HTMLPASS>
.</PARA><PARA>You may get an error creating an acquisition FIFO if the new FIFO and an existing FIFO use the same camera port. The error occurs when the existing FIFO uses <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">hardware triggers</see>. To avoid errors, you must either delete the old FIFO or create the new FIFO with <paramref name="autoPrepare" /> set to False. The following code shows how to avoid this problem.
</PARA><NOTE>
The fifoType argument is ignored.
</NOTE><CODE LANGUAGE="VB">
  Dim iTrig As CogAcqTrigger
  Dim fgs As New CogFrameGrabbers
  Dim fg As CogFrameGrabber
  Dim myFifo As CogAcqFifo
  Set fg = fgs(0)

  Set myFifo = fg.CreateAcqFifo(fg.VideoFormats(0))
  Set iTrig = myFifo
  iTrig.TriggerModel = cogAcqTriggerModelAuto
  iTrig.TriggerEnabled = True
  <ITALIC>... acquire images and process them ...</ITALIC><COMMENTLINE>Before changing video formats, flush the FIFO, then delete it</COMMENTLINE>
  myFifo.Flush
  myFifo = Nothing
  Set myFifo = fg.CreateAcqFifo(fg.VideoFormats(1))
  Set iTrig = myFifo

</CODE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Format" /> is not in <see cref="T:Cognex.VisionPro.CogAcqFifoPixelFormatConstants" />.</para></exception><!--
    <ERROR_HRESULT NAME="E_CogAcq_PixelFormatNotSupported"><DISPLAY PARAM="Format" /> is not a supported pixel format for this frame grabber.</ERROR_HRESULT>
--><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqBadVideoFormatException" cgnxHRESULT="E_CogAcq_BadVideoFormat"><para>The video format is not recognized, or no connected camera supports the video format.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqNoCamerasException" cgnxHRESULT="E_CogAcq_NoCameras"><para>No cameras are connected (CogLink only).</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqCannotCreateFifoException" cgnxHRESULT="E_CogAcq_CannotCreateFifo"><para><paramref name="autoPrepare" /> is True and the  FIFO cannot be prepared. This may be because a digital camera is not connected.</para></exception><summary>Create a new acquisition fifo on this frame grabber. The value of AutoPrepare will be used as the initial setting of the AutoPrepareEnabled property. If this value is true, the fifo will be prepared after it is created.</summary></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.SameHardware(Cognex.VisionPro.ICogFrameGrabber)"><param name="other"><PARA>The other frame grabber.</PARA></param><summary>Whether this frame grabber refers to the same hardware as Other.</summary><returns><PARA>True if this frame grabber and <paramref name="other" /> are the same .</PARA></returns><remarks><PARA>Whether this frame grabber refers to the same hardware as Other.</PARA></remarks></member><member name="M:Cognex.VisionPro.FG8100L.Implementation.Internal.CogFrameGrabber8100L.Disconnect(System.Boolean)"><param name="AllowRecovery">n/a</param><summary>Breaks the connection between this software object and the hardware.</summary></member><member name="T:Cognex.VisionPro.FG8100L.CogFrameGrabber8100Ls"><summary>Class which holds a collection of Cognex 8100l frame grabbers.</summary></member><member name="M:Cognex.VisionPro.FG8100L.CogFrameGrabber8100Ls.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.FG8100L.CogFrameGrabber8100Ls.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.FG8100L.CogFrameGrabber8100Ls.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.FG8100L.CogFrameGrabber8100Ls.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.FG8100L.CogFrameGrabber8100Ls.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="P:Cognex.VisionPro.FG8100L.CogFrameGrabber8100Ls.Name"><summary>Name of the frame grabber module.</summary><remarks><PARA>Name of the frame grabber module.</PARA></remarks></member><member name="M:Cognex.VisionPro.FG8100L.CogFrameGrabber8100Ls.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.FG8100L.CogFrameGrabber8100Ls.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.FG8100L.CogFrameGrabber8100Ls.IndexOf(Cognex.VisionPro.ICogFrameGrabber)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="T:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.FlushedEventHandler"><summary>Occurs after an acquisition FIFO is flushed.</summary></member><member name="T:Cognex.VisionPro.FG8100L.Implementation.Internal.CogAcqFifo8100L.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member></members></doc>