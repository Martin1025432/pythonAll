<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cognex.VisionPro.QuickBuild.Core</name>
    </assembly>
    <members>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobRunModeConstants">
            <summary>
            The CogJobRunModeConstants enumerated type is used to set the RunMode of the CogJob.
            </summary>
            <remarks/><example/><seealso/>  
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobRunModeConstants.AcquisitionAndImageProcessing">
            <summary>
            The job runs both the acquisition and image processing tasks.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobRunModeConstants.AcquisitionOnly">
            <summary>
            The job runs only the acquisition task.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobRunModeConstants.ImageProcessingOnly">
            <summary>
            The job runs only the image processing task.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobStartModeConstants">
            <summary>
            Describes when the job calls <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire"/>
            to issue acquisition requests.
            </summary>
            <remarks>
    	<para>
    	Used in <see cref="P:Cognex.VisionPro.QuickBuild.CogJob.StartMode"/> to specify when acquisition requests are issued.
    	</para>
    </remarks><example/><seealso/>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobStartModeConstants.IssuedAfterAcquisitionCompletes">
            <summary>
            The job issues an acquisition request
            after completing the most recent acquisition.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobStartModeConstants.IssuedAfterVisionToolRuns">
            <summary>
            The job issues an acquisition request
            after running the vision tool.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobStartModeConstants.NoneIssued">
            <summary>
            Your application is responsible for all acquisition requests.
            The job does not issue any acquisition request at all.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobStartModeConstants.IssuedAtFixedRate">
            <summary>
            Acquisition requests are issued at the rate specified by <see cref="P:Cognex.VisionPro.QuickBuild.CogJob.StartTriggerRate"/>.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobAcqFifoStateConstants">
            <summary>
            Inidcates the state of a depersisted acquisition FIFO.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobAcqFifoStateConstants.NotSet">
            <summary>
            The acquisition FIFO was not set.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobAcqFifoStateConstants.Valid">
            <summary>
            The acquisition FIFO was set and was valid for the installed hardware.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobAcqFifoStateConstants.Invalid">
            <summary>
            The acquisition FIFO was set, but it was not valid for the installed hardware.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobStateConstants">
            <summary>
            Indicates the state of a <see cref="T:Cognex.VisionPro.QuickBuild.CogJob"/>.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobStateConstants.RunningSingle">
            <summary>
            The <see cref="T:Cognex.VisionPro.QuickBuild.CogJob"/> is currently running only once.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobStateConstants.RunningContinuous">
            <summary>
            The <see cref="T:Cognex.VisionPro.QuickBuild.CogJob"/> is currently running in a loop.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobStateConstants.Stopped">
            <summary>
            The <see cref="T:Cognex.VisionPro.QuickBuild.CogJob"/> is currently stopped.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobThroughputAlgorithmConstants">
            <summary>
            The CogJobThroughputAlgorithConstants enumerated type is used to specify the throughput algorithm that is used by the Job.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobThroughputAlgorithmConstants.SimpleAverage">
            <summary>
            The CogJob is using a simple average to calculate the throughput
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobThroughputAlgorithmConstants.MovingAverage">
            <summary>
            The CogJob is using a moving average to calculate the throughput
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob">
            <summary>
            The CogJob class is the work unit of QuickBuild.  It consists of an acquisition FIFO and a collection of vision tools.  
            Each CogJob is associated with a particular camera channel which feeds images to the vision tools for processing.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfAcqFifo">
            <summary> Acq Fifo State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfRunMode">
            <summary> Run Mode State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfName">
            <summary> Name State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfStartMode">
            <summary> Start Mode State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfVisionTool">
            <summary> Vision Tool State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfVisionToolLinkAdd">
            <summary> Vision Tool Link Add State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfVisionToolLinkRemove">
            <summary> Vision Tool Link Remove State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfState">
            <summary> Run State State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfStartCount">
            <summary> Start Count State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfVisionToolRunStatus">
            <summary> VisionTool Run Status State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfImageQueueCapacity">
            <summary> Image Queue Capacity State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfRealTimeQueueCapacity">
            <summary> Image Queue Capacity State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfTotalJobIterations">
            <summary> Total Job Iterations State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfTotalVisionToolAccepts">
            <summary> Total Vision Tool Accepts State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfTotalVisionToolWarnings">
            <summary> Total Vision Tool Warnings State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfTotalVisionToolRejects">
            <summary> Total Vision Tool Rejects State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfTotalVisionToolErrors">
            <summary> Total Vision Tool Errors State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfTotalAcquisitionErrors">
            <summary> Total Acquisition Errors State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfTotalAcquisitionOverruns">
            <summary> Total Acquisition Overruns State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfTotalAcquisitions">
            <summary> Acquisition Run Status State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfAcquisitionRunStatus">
            <summary> Acquisition Run Status State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfRunStatus">
            <summary> Overall Job Run Status State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfStartTriggerRate">
            <summary> Start Trigger Rate State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfTotalJobThroughput">
            <summary> Total Job Throughput State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfTotalJobThroughputMin">
            <summary> Total Job Throughput Min State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfTotalJobThroughputMax">
            <summary> Total Job Throughput Max State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfThroughputAlgorithm">
            <summary> Total Job Throughput Algorithm State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfThroughputSampleSize">
            <summary> Total Job Throughput Sample Size State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfRunCount">
            <summary> Maximum number of job runs State Flag</summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfRunCountEnable">
            <summary> RunCountEnable State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfRemainingRuns">
            <summary> RemainingRuns State Flag</summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJob.SfTotalEncoderOverruns">
            <summary>Total Encoder Overruns State Flag </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.#ctor">
            <summary>
            Default CogJob constructor.  The newly constructed CogJob has no name.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.#ctor(System.String)">
            <summary>
            CogJob constructor with CogJob name.
            </summary>
            <param name="name">The name of the CogJob</param> 
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.#ctor(System.Boolean)">
            <summary>
            CogJob constructor that also creates an empty CogToolGroup.  The newly created CogJob can then be used with the CogJob edit control.
            </summary>
            <param name="withToolGroup">If you specify true for this boolean, then the CogJob will include a CogToolGroup.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.OnDeserialization(System.Object)">
            <summary>
            Serialization Callback. Internal use only.
            </summary>
            <param name="sender">The object which is calling this callback.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            GetObjectData override. Internal use only.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming context</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.IOValidate">
            <summary>
            This function detects all the possible I/O configuration errors and returns them in a string.
            The user must call this routine after adding a new CogJob to the CogJobManager.
            This routine enables all the I/O lines, if possible, that are used by this job.
            </summary>
            <returns>Returns Sting.Empty when no error is detected. Otherwise, retuns a string that contains a list of a device name followed by a board index followed by an output line number, e.g., "Cognex 8504 - 0, 1";"Cognex 8504 - 1, 2";"Cognex 8601 - 0, missing";"Cognex 8501 - 0, invalid IOConfig"</returns>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.xml" path="//member[@name=&quot;M:Cognex.VisionPro.QuickBuild.CogJob.IOValidate&quot;]/*"/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.Run">
            <summary>
            Run the CogJob just once.  This Run method uses the RunMode of the CogJob determines which parts (acquisition and/or image processing) actually run.
            </summary>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJob.Running">Fires when the CogJob starts running.</event>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJob.Ran">Fires when the CogJob has finished an iteration.</event>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJob.Stopped">Fires when the CogJob has completely stopped.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotRunnableException">Thrown if the CogJob cannot be run, usually because it has been already shutdown or EStop is asserted.</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogJobNoManagerException">Thrown if the CogJob does not have a CogJobManager.</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogMissingAcqFifoException">Thrown if the CogJob does not have an acq fifo and its RunMode is AcquisitionOnly or AcquisitionAndImageProcessing.</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogInvalidSetupException">Thrown if the CogJob is in AcquisitionOnly RunMode and the <see cref="P:Cognex.VisionPro.QuickBuild.CogJob.StartMode"/> is IssuedAfterVisionToolRuns.</exception>
            <remarks>
    	<para><see cref="M:Cognex.VisionPro.QuickBuild.CogJob.Run"/> flushes any outstanding acquisition requests.
    	If <see cref="P:Cognex.VisionPro.QuickBuild.CogJob.StartMode"/> is <see cref="F:Cognex.VisionPro.QuickBuild.CogJobStartModeConstants.NoneIssued"/>,
    	you must issue your acquisition requests <i>after</i> you call this method.
    	</para>
    </remarks><example/><seealso cref="M:Cognex.VisionPro.QuickBuild.CogJob.RunContinuous"/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.RunContinuous">
            <summary>
            Run the CogJob in a continuous loop. The CogJob will not stop running until Stop() is called. This Run method uses the the RunMode of the CogJob determines which parts (acquisition and/or image processing) actually run.
            </summary>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJob.Running">Fires when the CogJob starts running.</event>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJob.Ran">Fires when the CogJob has finished an iteration.</event>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJob.Stopped">Fires when the CogJob has completely stopped.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotRunnableException">Thrown if the CogJob cannot be run, usually because it has been already shutdown.</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogJobNoManagerException">Thrown if the CogJob does not have a CogJobManager.</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogMissingAcqFifoException">Thrown if the CogJob does not have an acq fifo and its RunMode is AcquisitionOnly or AcquisitionAndImageProcessing.</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogInvalidSetupException">Thrown if the CogJob is in AcquisitionOnly RunMode and the <see cref="P:Cognex.VisionPro.QuickBuild.CogJob.StartMode"/> is IssuedAfterVisionToolRuns.</exception>
            <remarks>
        	<para><see cref="M:Cognex.VisionPro.QuickBuild.CogJob.RunContinuous"/> flushes any outstanding acquisition requests.
    	If <see cref="P:Cognex.VisionPro.QuickBuild.CogJob.StartMode"/> is <see cref="F:Cognex.VisionPro.QuickBuild.CogJobStartModeConstants.NoneIssued"/>,
    	you must issue your acquisition requests <i>after</i> you call this method.
    	</para>
    </remarks><example/><seealso cref="M:Cognex.VisionPro.QuickBuild.CogJob.Run"/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.Stop">
            <summary>
            Stop forces the CogJob to stop running.  Only CogJobs running continuously can be stopped. This method returns immediately and does not wait for the CogJob to stop.  Once the CogJob has completely stopped, the Stopped event will be fired.
            If the CogJob is not running, this method has no effect. 
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.Reset">
            <summary>
            Reset puts the CogJob into its initial state.
            </summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fired once with all the accumulated changes.</event>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJob.ResetComplete">Fires when the CogJob has been fully reset.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.Shutdown">
            <summary>
            Shutdown terminates all internal threads inside the CogJob.  Shutdown also disposes of any contained acquisition fifo and vision tools.  Shutdown must be called to allow the CogJob to cleanly terminate.
            After the CogJob has shutdown, it cannot be run again.  Do not persist (save) a shutdown CogJob, since it cannot be run again, even after de-persisting it.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.OnStopped(System.Boolean)">
            <summary> 
            Method responsible for notifiying registered objects of the event. 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.OnAcquisitionRunStatusChanged">
            OnAcquisitionRunStatusChanged. Internal use only.
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.OnVisionToolError">
            <summary> 
            Method responsible for notifiying registered objects of the event. 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.Image">
            <summary>
            Image() remvoes and returns the oldest image in the image queue.  Image() will return null if the image queue is empty.  Care must be taken to not remove images from the image queue if the CogJob is running image processing.
            </summary>
            <returns>A reference to an ICogImage</returns>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJob.ImageRemoved">Fires when an image is removed from the image queue.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.Image(System.Int32,System.Boolean)">
            <summary>
            Image(int,bool) allows any image to be looked at and/or removed from the image queue.  Care must be taken to not remove images from the image queue if the CogJob is running image processing.
            </summary>
            <param name="index">The index of the image to be retrieved from the image queue.  The oldest image is at index 0.</param>
            <param name="removeImage">If this boolean is true, then the specified image will be removed from the image queue.  If false, then just a reference to the image is returned without removing it from the image queue.</param>
            <returns>A reference to an ICogImage</returns>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJob.ImageRemoved">Fires when an image is removed from the image queue.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogQueueEmptyException">Thrown if the image queue is empty.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.ImageQueueFlush">
            <summary>
            Flush/clear the image queue of all images.  This method cannot be called while the CogJob is running.
            </summary>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJob.ImageQueueFlushed">Fires when the queue is flushed.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.OnImageQueueOverflowed">
            Method responsible for notifiying registered objects of the event. Internal use only.
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.VisionToolLinkAdd(Cognex.VisionPro.QuickBuild.Implementation.CogVTLink)">
            <summary>
            Add a new CogVTLink object to the CogJob.  A CogVTLink object represents either an input (an image) or output (results collection) to or from the CogJob.
            </summary>
            <param name="newLink">A new CogVTLink object to add.</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <exception cref="T:System.Exceptions.ArgumentException">Thrown if a duplicate named CogVTLink object is added.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.VisionToolLinkRemove(Cognex.VisionPro.QuickBuild.Implementation.CogVTLink)">
            <summary>
            Remove a CogVTLink object by its reference.
            </summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <exception cref="T:System.Exceptions.ArgumentException">Thrown if the specified CogVTLink object was not found.</exception>
            <param name="removeLink">The CogVTLink object to remove.</param>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.xml" path="//member[@name=&quot;M:Cognex.VisionPro.QuickBuild.VisionToolLinkRemove(Cognex.VisionPro.QuickBuild.Implementation.CogVTLink)&quot;]/*"/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.VisionToolLinkRemove(System.String)">
            <summary>
            Remove a CogVTLink object by its link name.
            </summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <exception cref="T:System.Exceptions.ArgumentException">Thrown if the specified CogVTLink object was not found.</exception>
            <param name="linkName">The name of the CogVTLink object to remove.</param>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.xml" path="//member[@name=&quot;M:Cognex.VisionPro.QuickBuild.VisionToolLinkRemove(System.String)&quot;]/*"/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.VisionToolLink(System.Int32)">
            <summary>
            Returns the stored CogVTLink object using a integer index.
            </summary>
            <param name="index">The index of the CogVTLink object that this method should return.</param>
            <returns>A reference to the CogVTLink object at the index position.</returns>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.VisionToolLink(System.String)">
            <summary>
            Returns the stored CogVTLink object using a link name.
            </summary>
            <param name="linkName">The link name of the wanted CogVTLink object.</param>
            <returns>A reference of the requested CogVTLink object.</returns>
            <exception cref="T:System.Exceptions.ArgumentException">Thrown if the specified CogVTLink object was not found.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.VisionToolLink(System.String,Cognex.VisionPro.QuickBuild.CogDestinationQueueConstants)">
            <summary>
            Returns the stored CogVTLink object using a link name and its type.
            </summary>
            <param name="linkName">The link name of the wanted CogVTLink object.</param>
            <param name="destination">The destination of the link</param>
            <returns>A reference of the requested CogVTLink object.</returns>
            <exception cref="T:System.Exceptions.ArgumentException">Thrown if the specified CogVTLink object was not found.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.ResetAllStatistics">
            <summary>
            Reset all statistics to their default states.
            </summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires onces when all statistics have been reset.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.RestartThroughputCalculation">
            <summary>
            Restart the calculation of the throughput calculations.
            </summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires onces when all statistics have been reset.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.CloneParameters">
            <summary>
            CloneParamters. Internal use only.
            </summary>
            <returns>A new CogJob</returns>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.CopyParameters(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary>
            CopyParameters. Internal use only.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.xml" path="//member[@name=&quot;M:Cognex.VisionPro.QuickBuild.CogJob.CopyParameters&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.IOInfoList">
            <summary>
            Returns the CogIOInfoList, which is used to map I/O signals to physical
            devices in the system. Cognex internal use only
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.IOError">
            <summary>
            Raised when any I/O error occurs.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.ProcessedIOResultAvailable">
            <summary>
            Raised after the record is removed from the realtime queue and the job 
            internally processes the record for I/O.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.Manager">
            <summary>
            Get or set the CogJob's CogJobManager.  Internal use only.
            </summary>
            <value>Get or set the CogJobManager associated with this job.  The job must be stopped before the manager can be set.</value>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogJobNoManagerException">Thrown if the CogJob has no CogJobManager.</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped and this property is being set.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.HasManager">
            <summary>
            Read-only property to check if the CogJob has a CogJobManager.  Internal use only.
            </summary>
            <value>True if the CogJob has a CogJobManager, else false.</value>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJob.HasManager&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.Name">
            <summary>
            Gets or sets the name of the <see cref="T:Cognex.VisionPro.QuickBuild.CogJob"/>.
            </summary>
            <value>The name of the <see cref="T:Cognex.VisionPro.QuickBuild.CogJob"/></value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the name changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <exception cref="T:System.Exceptions.ArgumentException">Thrown if the CogJob has a manager and the name is not unique.</exception>
            <remarks>
    	<para>The name of the <see cref="T:Cognex.VisionPro.QuickBuild.CogJob"/> must be unique once the <see cref="T:Cognex.VisionPro.QuickBuild.CogJob"/> 
    	is added to a <see cref="T:Cognex.VisionPro.QuickBuild.CogJobManager"/>.</para>
    </remarks><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.State">
            <summary>
            Gets the running state of the CogJob.
            </summary>
            <value>The state of the job.</value>
            <remarks>
    	<para>This property gives you the state  of the job at a particular instant and may change at any time.</para>
    </remarks><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.RunStatus">
            <summary>
            Gets the last <see cref="P:Cognex.VisionPro.QuickBuild.CogJob.RunStatus"/> of the job.
            </summary>
            <value>The run status of the job.</value>
            <remarks>
    	<para>The run status of a job is the combination of 
    		<see cref="P:Cognex.VisionPro.QuickBuild.CogJob.AcquisitionRunStatus"/>  (if the job uses acquisition) and
    		<see cref="P:Cognex.VisionPro.QuickBuild.CogJob.VisionToolRunStatus"/> (if the job does image processing).
	</para>
    </remarks><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.JobRunStopSyncRoot">
            <summary>
            Read-only property to get the JobRunStopSyncRoot.  Internal use only.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.RunMode">
            <summary>
            Get or set the CogJob's RunMode.  
            </summary>
            <value>The RunMode determines which parts (acquisition and/or image processing) of the CogJob are run.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the RunMode changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.Running">
            <summary>
            Raised when the CogJob has started running.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.Ran">
            <summary>
            Raised when the CogJob has ran one iteration.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.Stopped">
            <summary>
            Raised when the CogJob has completely stopped.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.ResetComplete">
            <summary>
            Raised when the CogJob has been fully reset.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.RunningSyncBoolean">
            <summary>
            Gets an interface to a synchronization boolean.  This boolean will be
            true if the threads of this job have been told to run and have not
            yet stopped.  Otherwise it will be false.
            </summary>
            <value>
            An ICogSyncBoolean interface that indicates whether the job threads
            are running, and signals when this boolean value is changed.
            </value>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJob.RunningSyncBoolean&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.VisionToolSyncPulse">
            <summary>
            Gets an interface to a synchronization pulse.  This pulse will be
            fired from the thread that runs the vision tools, just before each
            run of the tools, allowing you to synchronize with that thread.
            </summary>
            <value>
            An ICogSyncPulse interface that fires an event before each run
            of the vision tools.
            </value>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJob.VisionToolSyncPulse&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.AcqFifoSyncPulse">
            <summary>
            Gets an interface to a synchronization pulse.  This pulse will be
            fired from the thread that acquires images, just before each
            acquisition attempt, allowing you to synchronize with that thread.
            </summary>
            <value>
            An ICogSyncPulse interface that fires an event before each image
            acquisition is started.
            </value>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJob.AcqFifoSyncPulse&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.ScriptObj">
            <summary>
            Cognex Internal Use Only.
            </summary>
            <value>Cognex Internal Use Only.</value>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.JobScript">
            <summary>
            Cognex Internal Use Only.
            </summary>
            <value>Cognex Internal Use Only.</value>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.ScriptError">
            <summary>
            Cognex Internal Use Only.
            </summary>
            <value>Cognex Internal Use Only.</value>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.AcqFifo">
            <summary>
            Get or set the acquisition fifo.
            </summary>
            <value>Get or set the acquisition fifo for use in the CogJob.  The acq fifo must be set if the RunMode is AcquisitionOnly or AcquisitionAndImageProcessing.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when a new acq fifo is set.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.AcqFifoSyncRoot">
            <summary>
            Read-only property to get the AcqFifoSyncRoot.  Internal use only.
            </summary>
            <value>Gets the acq fifo sync root object.  Internal use only.</value>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.AcqFifoState">
            <summary>
            Read-only property to get the state of the acq fifo.  Internal use only.
            </summary>
            <value>Get the acq fifo state (usually after de-persisting a CogJob). Internal use only.</value>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.StartMode">
            <summary>
            Get or set when StartAcquires are put into the acq fifo's queue.
            </summary>
            <value>The StartMode determines at which point during the running of the CogJob StartAcquires are added to the acquisition fifo.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the StartMode changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.RunCountEnable">
            <summary>
            Enable or disable RunCount
            </summary>
            <value>If true and the job is in continuous mode then the job will stop after it ran as many time as defined by RunCount.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the RunCountEnable changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJob.AcquisitionCountEnable&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.RunCount">
            <summary>
            Get or set the maximum number of job runs.
            </summary>
            <value>RunCount defines the maximum number of job run if RunCountEnable is true and the job is in continuous mode.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when RunCount changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJob.AcquisitionCount&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.StartCount">
            <summary>
            Get or set the number of StartAcquires in the acq fifo's queue.
            </summary>
            <value>The StartCount is the number of StartAcquires which are put into the acq fifo's queue when the CogJob starts running.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the StartCount changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.StartTriggerRate">
            <summary>
            Get or set the trigger rate when the CogJob's StartMode is IssuedAtFixedRate.
            </summary>
            <value>This property determines the rate at which software triggers are issued when the CogJob is in the IssuedAtFixedRate StartMode.  The units are triggers per second.  On some machines the maximum trigger rate is 30.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the StartTriggerRate changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.AcquisitionRunStatus">
            <summary>
            Read-only property which returns the AcquisitionRunStatus of the CogJob.
            </summary>
            <value>This property returns the acquisition RunStatus only (if acq is being used).  The only property of ICogRunStatus that is set and valid is Exception.</value>
            <remarks/><example/><seealso/>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.AcquisitionError">
            <summary>
            Raised when an acquisition error occurs.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.AcquisitionTimeout">
            <summary>
            Raised when an acquisition timeout occurs.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.VisionTool">
            <summary>
            Get or set the CogJob's VisionTool.  
            </summary>
            <value>The vision tool is run if the CogJob's RunMode is either ImageProcessingOnly or AcquisitionAndImageProcessing.  A single vision tool or CogToolGroup can be passed to this property.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the name changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.VisionToolSyncRoot">
            <summary>
            Read-only property to get the VisionToolSyncRoot.  Internal use only.
            </summary>
            <value>Gets the vision tool sync root object.  Internal use only.</value>
            <remarks/><example/><seealso/>   
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.VisionToolRunStatus">
            <summary>
            Read-only property which returns the RunStatus of the vision tool.
            </summary>
            <value>This property returns the vision tool RunStatus if the CogJob's RunMode is either ImageProcessingOnly or AcquisitionAndImageProcessing.</value>
            <remarks/><example/><seealso/>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.VisionToolError">
            <summary>
            Raised when a vision tool error occurs.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.ImageQueueCapacity">
            <summary>
            Get or set the image queue capacity.
            </summary>
            <value>The capacity of the image queue is the number of images which can be queued up when the job is running and acquiring images.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the ImageQueueCapacity changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped or if any other CogJobs are not stopped when the ProcessingModel is set to Balanced.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.ImageQueueCount">
            <summary>
            Read-only property which returns the number of images in the image queue.
            </summary>
            <value>This property returns the number of images in the image queue at this instant.</value>
            <remarks/><example/><seealso/>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.ImageAvailable">
            <summary>
            Raised when a new image is available in the image queue.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.ImageQueueOverflowed">
            <summary>
            Raised when the image queue overflows.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.ImageQueueFlushed">
            <summary>
            Raised when the image queue is flushed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.ImageRemoved">
            <summary>
            Raised when an image is removed from the image queue.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.OwnedIndependent">
            <summary>
            Read-only property to retrieve the CogJobIndependent object.  
            </summary>
            <value>The CogJobIndependent contains all methods/properties/events which are related to Independent mode.  This object cannot be retrieved in Dependent mode.</value>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatingModeMismatchException">Thrown if the OperatingMode is set to Dependent mode.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.VisionToolLinkCount">
            <summary>
            Read-only property which returns the number of link objects contained within the CogJob.
            </summary>
            <value>The number of CogVTLink objects contained inside of the CogJob is returned by this property.</value>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.VisionToolLinkArray">
            VisionToolLinkArray. Internal use only.
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.VisionToolLinkAdded">
            <summary>
            Raised when a vision tool link is added.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.VisionToolLinkRemoved">
            <summary>
            Raised when vision tool link is removed.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.TotalJobIterations">
            <summary>
            Get or set the total number of job iterations.
            </summary>
            <value>Every time a job completes a complete iteration, this statistic is incremented by one.  Generally, the only reason to write to this statistic is to reset it to zero.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this statistic changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.TotalVisionToolAccepts">
            <summary>
            Get or set the total number of vision tool runs that had an accept result.
            </summary>
            <value>Every time a vision tool completes with an accept result, this statistic is incremented by one.  Generally, the only reason to write to this statistic is to reset it to zero.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this statistic changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.TotalVisionToolWarnings">
            <summary>
            Get or set the total number of vision tool runs that had a warning result.
            </summary>
            <value>Every time a vision tool completes with a warning result, this statistic is incremented by one.  Generally, the only reason to write to this statistic is to reset it to zero.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this statistic changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.TotalVisionToolRejects">
            <summary>
            Get or set the total number of vision tool runs that had a reject result.
            </summary>
            <value>Every time a vision tool completes with a reject result, this statistic is incremented by one.  Generally, the only reason to write to this statistic is to reset it to zero.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this statistic changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.TotalVisionToolErrors">
            <summary>
            Get or set the total number of vision tool runs that had an error result.
            </summary>
            <value>Every time a vision tool completes with an error result, this statistic is incremented by one.  Generally, the only reason to write to this statistic is to reset it to zero.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this statistic changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.TotalAcquisitionErrors">
            <summary>
            Get or set the total number of acquisition errors.
            </summary>
            <value>Every time an acquisition generates an error, this statistic is incremented by one.  Generally, the only reason to write to this statistic is to reset it to zero.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this statistic changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.TotalAcquisitionOverruns">
            <summary>
            Get or set the total number of acquisition overruns.
            </summary>
            <value>Every time an acquisition overruns, this statistic is incremented by one.  Generally, the only reason to write to this statistic is to reset it to zero.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this statistic changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.TotalEncoderOverruns">
            <summary>
            Get or set the total number of encoder overruns.
            </summary>
            <value>Every time an encoder overruns, this statistic is incremented by one.  Generally, the only reason to write to this statistic is to reset it to zero.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this statistic changes.</event>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJob.TotalEncoderOverruns&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.TotalAcquisitions">
            <summary>
            Get or set the total number of acquisition completed.
            </summary>
            <value>Every time an acquisition completes, this statistic is incremented by one.  Generally, the only reason to write to this statistic is to reset it to zero.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this statistic changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.TotalJobThroughput">
            <summary>
            Get or set the CogJob throughput at a particular instant.
            </summary>
            <value>This throughput statistics is the number of jobs completed over the total time the job has been running.  The unit for this statistic is jobs per scond. This statistics is only updated when running in continuous mode. Resetting this statistic is only possible by using RestartThroughputCalculation().</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this statistic changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.TotalJobThroughputMin">
            <summary>
            Get or set the mininum CogJob throughput.
            </summary>
            <value>This statistic keeps track of the minimum throughput value seen.  This statistics is only updated when running in continuous mode.  The initial value of this statistic is 10000.  Resetting this statistic is only possible by using RestartThroughputCalculation().</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this statistic changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.TotalJobThroughputMax">
            <summary>
            Get or set the maximum CogJob throughput.
            </summary>
            <value>This statistic keeps track of the maximum throughput value seen.  This statistics is only updated when running in continuous mode.  The initial value of this statistic is 0.  This statistic is not updated until the job has been running for a settling time.  This settling time depends on the throughput algorithm.  The settling time is either 10 seconds when using the SimpleAverage algorithm or until at least ThroughputSampleSize job cycles have executed when using the MovingAverage algorithm.  Resetting this statistic is only possible by using RestartThroughputCalculation().</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this statistic changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.RemainingRuns">
            <summary>
            Get or set the number of remaining job runs.
            </summary>
            <value> RemainingRuns is the number of job runs left if JobRunCountEnable is enabled and the job is in continuous mode.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this statistic changes.</event>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJob.RemainingAcquisitions&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.ThroughputAlgorithm">
            <summary>
            Get or set the CogJob throughput algorithm.
            </summary>
            <value> ThroughputAlgorithm determines which algorithm is used to calculate the throughput when the job is in run continuous mode.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.ThroughputSampleSize">
            <summary>
            Get or set the CogJob throughput sample size.
            </summary>
            <value> ThroughputSampleSize is the number of samples that considered when calculating the throughput when the job is running in continuous mode.  This property only applies when the ThroughputAlgorithm is set to Moving.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.UserData">
            <summary>
            UserData. Internal use only.
            </summary>
            <value>Get the CogDictionary associated with this Job.</value>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJob.GarbageCollectionRequested">
            <summary>
            Raised whenever garbage collection is requested. Internal use only.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.AcquisitionProcessThread">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.IndependentProcessThread">
            <summary>
            Internal use only. 
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogIOErrorEventHandler">
            <summary>
            Delegate for the IOError event.
            </summary>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.CogIOErrorEventHandler.xml" path="//member[@name=&quot;T:Cognex.VisionPro.QuickBuild.CogJob.CogIOErrorEventHandler&quot;]/*"/> 
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogProcessedIOResultAvailableEventHandler">
            <summary>
            Delegate for the ProcessedIOResultAvailable event.
            This event is fire
            </summary>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJob.CogProcessedIOResultAvailableEventHandler.xml" path="//member[@name=&quot;T:Cognex.VisionPro.QuickBuild.CogJob.CogProcessedIOResultAvailableEventHandler&quot;]/*"/> 
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogProcessedIOResultEventArgs">
            <summary>
            Event args object for processed I/O results.
            </summary>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogProcessedIOResultEventArgs.xml" path="//member[@name=&quot;T:Cognex.VisionPro.QuickBuild.CogProcessedIOResultEventArgs&quot;]/*"/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJob.CogProcessedIOResultEventArgs.#ctor(Cognex.VisionPro.ICogRecord)">
            <summary>
            Constructor
            </summary>
            <param name="record">ICogRecord to which this event args object applies to.</param>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogProcessedIOResultEventArgs.xml" path="//member[@name=&quot;M:Cognex.VisionPro.QuickBuild.CogProcessedIOResultEventArgs.#ctor(System.String)&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJob.CogProcessedIOResultEventArgs.Record">
            <summary>
            Returns ICogRecord that is processed by the internal Cognex I/O operation.
            </summary>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogProcessedIOResultEventArgs.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogProcessedIOResultEventArgs.Name&quot;]/*"/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogJobRunningEventHandler">
            <summary>
            Delegate for the Running event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogJobRanEventHandler">
            <summary>
            Delegate for the Ran event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogJobStoppedEventHandler">
            <summary>
            Delegate for the Stopped event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogJobResetCompleteEventHandler">
            <summary>
            Delegate for the ResetComplete event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogAcquisitionErrorEventHandler">
            <summary>
            Delegate for the AcqError event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogAcquisitionTimeoutEventHandler">
            <summary>
            Delegate for the AcqTimeout event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogVisionToolErrorEventHandler">
            <summary>
            Delegate for the VisionToolError event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/> 
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogImageAvailableEventHandler">
            <summary>
            Delegate for the ImageAvailable event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/> 
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogImageQueueOverflowedEventHandler">
            <summary>
            Delegate for the ImageQueueOverflowed event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/> 
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogImageQueueFlushedEventHandler">
            <summary>
            Delegate for the ImageQueueFlushed event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/> 
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogImageRemovedEventHandler">
            <summary>
            Delegate for the ImageRemoved event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/> 
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogVisionToolLinkAddedEventHandler">
            <summary>
            Delegate for the VisionToolLinkAdded event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/> 
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogVisionToolLinkRemovedEventHandler">
            <summary>
            Delegate for the VisionToolLinkRemoved event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/> 
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJob.CogGCRequestedEventHandler">
            <summary>
            Delegate for the GarbageCollectionRequested event.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobIndependent">
            <summary>
            CogJobIndependent contains all Independent mode only properties, methods, and events.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobIndependent.#ctor(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary>
            CogJobIndependent. Internal use only.
            </summary>
            <param name="parent">Parent job. Internal use only.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobIndependent.RealTimeResult">
            <summary>
            RealTimeResult() removes and returns the oldest result packet from the real-time result queue. RealTimeResult() will return null if the real-time result queue is empty.  This method may be called while the CogJob is running.
            </summary>
            <returns>A reference to an ICogRecord which contains results.</returns>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobIndependent.RealTimeResultRemoved">Fires when a result packet is removed from the real-time result queue.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobIndependent.RealTimeResult(System.Int32,System.Boolean)">
            <summary>
            RealTimeResult(int,bool) allows any result packet to be looked at and/or removed from the real-time result queue.  
            </summary>
            <returns>A reference to an ICogRecord which contains results.</returns>
            <param name="index">The index of the result packet to be retrieved from the real-time result queue.  The oldest packet is at index 0.</param>
            <param name="removeResult">If this boolean is true, then the specified result packet is removed from the real-time result queue.  If false, then just a reference to the result packet is returned without removing it from the real-time result queue.</param>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobIndependent.RealTimeResultRemoved">Fires when a result package is removed from the real-time result queue.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogQueueEmptyException">Thrown if the real-time result queue is empty.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobIndependent.RealTimeQueueFlush">
            <summary>
            Flush/clear the real-time result queue of all packets.  This method cannot be called while the CogJob is running.
            </summary>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobIndependent.RealTimeQueueFlushed">Fires when the queue is flushed.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobIndependent.ParentJob">
            <summary>
            Read-only property to get this object's parent job.
            </summary>
            <value>Get the CogJob associated with this object.</value>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobIndependent.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJobIndependent.ParentJob&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobIndependent.RealTimeQueueCapacity">
            <summary>
            Get or set the real-time result queue capacity.  This method is deprecated.  Use CogJobManager.IOQueueCapacity to set the capacity of both the real-time queue and the I/O queue.
            </summary>
            <value>The capacity of the real-time result queue is the number of result packets which can be queued up when the job is running and collecting results.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the RealTimeCapacity changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJob is not stopped</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobIndependent.RealTimeQueueCount">
            <summary>
            Read-only property which returns the number of result packets in the real-time result queue.
            </summary>
            <value>This property returns the number of result packets in the real-time result queue at this instant.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the RealTimeQueueCount changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobIndependent.RealTimeResultAvailable">
            <summary>
            Raised when a new result is available in the Result Queue.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobIndependent.RealTimeResultRemoved">
            <summary>
            Raised when a result is removed from the real-time queue.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobIndependent.RealTimeQueueOverflowed">
            <summary>
            Raised when the real-time queue overflows.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobIndependent.RealTimeQueueFlushed">
            <summary>
            Raised when the real-time queue is flushed.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobIndependent.CogRealTimeResultAvailableEventHandler">
            <summary>
            Delegate for the RealTimeResultAvailable event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobIndependent.CogRealTimeResultRemovedEventHandler">
            <summary>
            Delegate for the RealTimeResultRemoved event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobIndependent.CogRealTimeQueueOverflowedEventHandler">
            <summary>
            Delegate for the RealTimeQueueOverflowed event.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobIndependent.CogRealTimeQueueFlushedEventHandler">
            <summary>
            Delegate for the RealTimeQueueFlushed event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.ICogJobScript">
            <summary>
            Defines the interface to be implemented by user script, so that it can be called from
            VisionPro at the appropriate time.  Normally the user script will inherit the
            CogJobBaseScript class rather than implement ICogJobScript directly.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.ICogJobScript.Initialize(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary>
            Called when the script is initialized by VisionPro.  Any one-time initialization should
            be performed here.
            </summary>
            <param name="host">A reference to the CogJob hosting this script.</param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.ICogJobScript.AcqFifoConstruction(Cognex.VisionPro.ICogAcqFifo)">
            <summary>
            Called when a new fifo is assigned to the job.  This will typically occur either
            when the "Initialize Acquisition" button is pressed on the "Image Source" control,
            or when restoring from a .VPP file.  This function can be used to register for
            events on the fifo, or to perform custom configuration for the fifo.
            </summary>
            <param name="fifo">A reference to the new fifo.</param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.ICogJobScript.PreAcquisition">
            <summary>
            Called just before a new acquisition begins, and allows custom setup to be performed
            on a per acquisition basis.  This function is not called for auto or free
            run trigger models.  To ensure no acquisitions are in progress when this function is
            called, the "Number of Software Acquisitions Pre-queued" setting in the Job
            Configuration should be set to one.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.ICogJobScript.PostAcquisitionRefInfo(Cognex.VisionPro.ICogImage@,Cognex.VisionPro.ICogAcqInfo)">
            <summary>
            Called immediately after an acquisition has been completed.
            </summary>
            <param name="image">A reference to the image just acquired, can be modified by script.</param>
            <param name="info">Additional informaiton about the acquisition that produced the image.</param>
            <returns>True if VisionPro should inspect the image,
            false to skip the inspection and acquire another image</returns>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobBaseScript">
            <summary>
            Base class which user script will override.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobBaseScript.Initialize(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary>
            Called when the script is initialized by VisionPro.  If you override this function, you
            must make sure to call the base class' Initialize function.  Any one-time initialization
            should be performed here.
            </summary>
            <param name="jobParam">A reference to the CogJob hosting this script.  This parameter
            should be passed to the base class' initialize function.</param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobBaseScript.AcqFifoConstruction(Cognex.VisionPro.ICogAcqFifo)">
            <summary>
            Called when a new fifo is assigned to the job.  This will typically occur either
            when the "Initialize Acquisition" button is pressed on the "Image Source" control,
            or when restoring from a .VPP file.  This function can be used to register for
            events on the fifo, or to perform custom configuration for the fifo.
            </summary>
            <param name="fifo">A reference to the new fifo.</param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobBaseScript.PreAcquisition">
            <summary>
            Called just before a new acquisition begins, and allows custom setup to be performed
            on a per acquisition basis.  This function is not called for auto or free
            run trigger models.  To ensure no acquisitions are in progress when this function is
            called, the "Number of Software Acquisitions Pre-queued" setting in the Job
            Configuration should be set to one.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobBaseScript.PostAcquisition(Cognex.VisionPro.ICogImage)">
            <summary>
            Called immediately after an acquisition has been completed.
            </summary>
            <param name="image">A reference to the image just acquired.</param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobBaseScript.PostAcquisitionRef(Cognex.VisionPro.ICogImage@)">
            <summary>
            Called immediately after an acquisition has been completed.
            </summary>
            <param name="image">A reference to the image just acquired, can be modified by script.</param>
            <returns>True if VisionPro should inspect the image,
            false to skip the inspection and acquire another image</returns>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobBaseScript.PostAcquisitionRefInfo(Cognex.VisionPro.ICogImage@,Cognex.VisionPro.ICogAcqInfo)">
            <summary>
            Called immediately after an acquisition has been completed.
            </summary>
            <param name="image">A reference to the image just acquired, can be modified by script.</param>
            <param name="info">Additional informaiton about the acquisition that produced the image.</param>
            <returns>True if VisionPro should inspect the image,
            false to skip the inspection and acquire another image</returns>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobBaseScript.job">
            <summary>
            A stored reference to the CogJob which is hosting this script.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">
            <summary> 
            CogNotStoppedException 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNotStoppedException.#ctor">
            <summary> 
            CogException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNotStoppedException.#ctor(System.String)">
            <summary> 
            CogException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNotStoppedException.#ctor(System.String,System.String)">
            <summary> 
            CogException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNotStoppedException.#ctor(System.String,System.Exception)">
            <summary> 
            CogException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNotStoppedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            CogException constructor 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Exceptions.CogNotStoppedException.JobName">
            <summary>
            JobName property
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogJobNoManagerException">
            <summary> 
            CogJobNoManagerException 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogJobNoManagerException.#ctor">
            <summary> 
            CogJobNoManagerException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogJobNoManagerException.#ctor(System.String)">
            <summary> 
            CogJobNoManagerException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogJobNoManagerException.#ctor(System.String,System.String)">
            <summary> 
            CogJobNoManagerException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogJobNoManagerException.#ctor(System.String,System.Exception)">
            <summary> 
            CogJobNoManagerException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogJobNoManagerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            CogJobNoManagerException constructor 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Exceptions.CogJobNoManagerException.JobName">
            <summary>
            JobName property
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOperatingModeMismatchException">
            <summary> 
            CogOperatingModeMismatchException 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogOperatingModeMismatchException.#ctor">
            <summary> 
            CogOperatingModeMismatchException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogOperatingModeMismatchException.#ctor(System.String)">
            <summary> 
            CogOperatingModeMismatchException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogOperatingModeMismatchException.#ctor(System.String,System.Exception)">
            <summary> 
            CogOperatingModeMismatchException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogOperatingModeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            CogOperatingModeMismatchException constructor 
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogNotRunnableException">
            <summary> 
            CogNotRunnableException 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNotRunnableException.#ctor">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNotRunnableException.#ctor(System.String)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNotRunnableException.#ctor(System.String,System.String)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNotRunnableException.#ctor(System.String,System.Exception)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNotRunnableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Exceptions.CogNotRunnableException.JobName">
            <summary>
            JobName property
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogQueueEmptyException">
            <summary> 
            CogQueueEmptyException 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogQueueEmptyException.#ctor">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogQueueEmptyException.#ctor(System.String)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogQueueEmptyException.#ctor(System.String,System.Exception)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogQueueEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogMissingAcqFifoException">
            <summary> 
            CogMissingAcqFifoException 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogMissingAcqFifoException.#ctor">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogMissingAcqFifoException.#ctor(System.String)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogMissingAcqFifoException.#ctor(System.String,System.String)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogMissingAcqFifoException.#ctor(System.String,System.Exception)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogMissingAcqFifoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Exceptions.CogMissingAcqFifoException.JobName">
            <summary>
            JobName property
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogInvalidTimeoutException">
            <summary> 
            CogInvalidTimeoutException 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogInvalidTimeoutException.#ctor">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogInvalidTimeoutException.#ctor(System.String)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogInvalidTimeoutException.#ctor(System.String,System.String)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogInvalidTimeoutException.#ctor(System.String,System.Exception)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogInvalidTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Exceptions.CogInvalidTimeoutException.JobName">
            <summary>
            JobName property
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogCouldNotStopException">
            <summary> 
            CogCouldNotStopException 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogCouldNotStopException.#ctor">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogCouldNotStopException.#ctor(System.String)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogCouldNotStopException.#ctor(System.String,System.String)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogCouldNotStopException.#ctor(System.String,System.Exception)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogCouldNotStopException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            CogJobException constructor 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Exceptions.CogCouldNotStopException.JobName">
            <summary>
            JobName property
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogFoundAcqFifoToolException">
            <summary> 
            CogFoundAcqFifoToolException 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogFoundAcqFifoToolException.#ctor">
            <summary> 
            CogFoundAcqFifoToolException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogFoundAcqFifoToolException.#ctor(System.String)">
            <summary> 
            CogFoundAcqFifoToolException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogFoundAcqFifoToolException.#ctor(System.String,System.String)">
            <summary> 
            CogFoundAcqFifoToolException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogFoundAcqFifoToolException.#ctor(System.String,System.Exception)">
            <summary> 
            CogFoundAcqFifoToolException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogFoundAcqFifoToolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            CogFoundAcqFifoToolException constructor 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Exceptions.CogFoundAcqFifoToolException.JobName">
            <summary>
            JobName property
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogInvalidSetupException">
            <summary> 
            CogInvalidSetupException 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogInvalidSetupException.#ctor">
            <summary> 
            CogInvalidSetupException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogInvalidSetupException.#ctor(System.String)">
            <summary> 
            CogInvalidSetupException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogInvalidSetupException.#ctor(System.String,System.String)">
            <summary> 
            CogInvalidSetupException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogInvalidSetupException.#ctor(System.String,System.Exception)">
            <summary> 
            CogInvalidSetupException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogInvalidSetupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            CogInvalidSetupException constructor 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Exceptions.CogInvalidSetupException.JobName">
            <summary>
            JobName property
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogNoDataReadySignalException">
            <summary> 
            Used when a data ready signal output is missing. 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNoDataReadySignalException.#ctor">
            <summary> 
            CogNoDataReadySignalException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNoDataReadySignalException.#ctor(System.String)">
            <summary> 
            CogInvalidSetupException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNoDataReadySignalException.#ctor(System.String,System.Exception)">
            <summary> 
            CogInvalidSetupException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogNoDataReadySignalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            CogInvalidSetupException constructor 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Exceptions.CogNoDataReadySignalException.JobName">
            <summary>
            JobName property
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogJobManagerOnlineException">
            <summary> 
            Used when the user tries to add or remove a job while CogJobManager is online. 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogJobManagerOnlineException.#ctor">
            <summary> 
            CogJobManagerOnlineException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogJobManagerOnlineException.#ctor(System.String)">
            <summary> 
            CogInvalidSetupException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogJobManagerOnlineException.#ctor(System.String,System.String)">
            <summary> 
            CogJobManagerOnlineException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogJobManagerOnlineException.#ctor(System.String,System.Exception)">
            <summary> 
            CogInvalidSetupException constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogJobManagerOnlineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            CogInvalidSetupException constructor 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Exceptions.CogJobManagerOnlineException.JobName">
            <summary>
            JobName property
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue">
            <summary>
            CogRandomAccessQueue
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.#ctor">
            <summary>
            ctor (default capacity is 32)
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.#ctor(System.Int32)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.Clear">
            <summary>
            Remove all items in the queue 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.Enqueue(System.Object)">
            <summary>
            Adds object to the back of the queue.
            If the queue is full, just overwrite the tail item 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.Dequeue">
            <summary>
            Remove the item from head of the queue 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.Dequeue(System.Int32)">
            <summary>
            Remove and return the item at index
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.Peek(System.Int32)">
            <summary>
            Just return the item at the index 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.Resize(System.Int32)">
            <summary>
            Do the work necessary to resize the capacity of the queue
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.OnEnqueued">
            <summary> 
            Method responsible for notifiying registered objects of the event 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.OrderList">
            <summary>
            Return internal orderList for testing purpose only
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.FreeList">
            <summary>
            Return internal freeList for testing purpose only
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.Data">
            <summary>
            Return internal data for testing purpose only
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.Capacity">
            <summary>
            Capacity of the queue 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.Count">
            <summary>
            Number of items in the queue
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.AvailableCount">
            <summary>
            Number of available spaces in the queue
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.IsOverflowing">
            <summary>
            Is the queue currently overflowing
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.IsFull">
            <summary>
            Is the queue currently full
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.Enqueued">
            <summary>
            This event is raised when an item is enqueued
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRandomAccessQueue.EnqueuedEventHandler">
            <summary>
            A delegate for the Enqueue event.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogVTLinkInputImage">
            <summary>
            CogVTLink object which is used to setup the input input for the VisionTool
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.CogVTLink">
            <summary>
            CogVTLink. Internal use only. 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.CogVTLink.#ctor(Cognex.VisionPro.QuickBuild.Implementation.CogLinkTypeConstants,System.String,System.Object,System.Object,Cognex.VisionPro.QuickBuild.CogJob,System.String,System.String,Cognex.VisionPro.QuickBuild.CogDestinationQueueConstants)">
            <summary>
            CogVTLink constructor.  Internal use only.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.CogVTLink.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor. Internal use only.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.CogVTLink.LinkName">
            <summary>
            LinkName. Internal use only.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.CogVTLink.SourceTool">
            <summary>
            SourceTool. Internal use only.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.CogVTLink.DestinationTool">
            <summary>
            DestinationTool. Internal use only. 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.CogVTLink.SourceJob">
            <summary>
            SourceJob. Internal use only.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.CogVTLink.SourcePath">
            <summary>
            SourcePath. Internal use only.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.CogVTLink.DestinationPath">
            <summary>
            DestinationPath. Internal use only.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.CogVTLink.DestinationQueue">
            <summary>
            DestinationQueue. Internal use only.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.CogVTLink.Type">
            <summary>
            Type. Internal use only.  
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkInputImage.#ctor(System.String,System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="linkName">Name of this link object.  This is an arbitrary name.</param>
            <param name="destinationTool">The vision tool or toolgroup object which will receive the input image.</param>
            <param name="destinationPath">The full path to the property on the vision tool that will receive input image.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkInputImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor. Internal use only.
            </summary>
            <param name="info">Serialization info. Internal use only.</param>
            <param name="context">Streaming context. Internal use only.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogVTLinkResult">
            <summary>
            CogVTLink object for collecting vision tool results to be stored in the result packets.
            </summary>
            <remarks/><example/><seealso/>  
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkResult.#ctor(System.String,System.Object,System.String,Cognex.VisionPro.QuickBuild.CogDestinationQueueConstants)">
            <summary>
            Constructor.
            </summary>
            <param name="linkName">Name of this link object.  This name is used as the key for the result into the CogRecord result packet.</param>
            <param name="sourceTool">The vision tool that has the result that needs to be put into the result packet.</param>
            <param name="sourcePath">The full path to the property or method that should be stored into the result packet..</param>
            <param name="destinationQueue">The queue or queues where the result will be stored.  This parameter can be an OR'ed value of the queue destinations.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info. Internal use only.</param>
            <param name="context">Streaming context. Internal use only.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogVTLinkLastRunRecords">
            <summary>
            CogVTLink object for collecting vision tool's last run records.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkLastRunRecords.#ctor(System.String,System.Object,Cognex.VisionPro.QuickBuild.CogDestinationQueueConstants)">
            <summary>
            Constructor.
            </summary>
            <param name="linkName">Name of this link object.  This name is used as the key for the result into the CogRecord result packet.</param>
            <param name="sourceTool">The vision tool that has the last run records that needs to be put into the result packet.</param>
            <param name="destinationQueue">The queue or queues where the result will be stored.  This parameter can be an OR'ed value of the queue destinations.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkLastRunRecords.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor. Internal use only.
            </summary>
            <param name="info">Serialization info. Internal use only.</param>
            <param name="context">Streaming context. Internal use only.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogVTLinkLastRunRecordsFromJob">
            <summary>
            CogVTLinkLastRunRecordsFromJob. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkLastRunRecordsFromJob.#ctor(System.String,Cognex.VisionPro.QuickBuild.CogJob,Cognex.VisionPro.QuickBuild.CogDestinationQueueConstants)">
            <summary>
            Constructor. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkLastRunRecordsFromJob.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogVTLinkProcessedImage">
            <summary>
            CogVTLink object for collecting the image that was processed by the vision tools.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkProcessedImage.#ctor(System.String,Cognex.VisionPro.QuickBuild.CogDestinationQueueConstants)">
            <summary>
            Constructor.
            </summary>
            <param name="linkName">Name of this link object.  This name is used as the key for the result into the CogRecord result packet.</param>
            <param name="destinationQueue">The queue or queues where the result will be stored.  This parameter can be an OR'ed value of the queue destinations.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkProcessedImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor. Internal use only.
            </summary>
            
            <param name="info">Serialization info. Internal use only.</param>
            <param name="context">Streaming context. Internal use only.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogVTLinkProcessedImageFromJob">
            <summary>
            CogVTLinkProcessedImageFromJob. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkProcessedImageFromJob.#ctor(System.String,Cognex.VisionPro.QuickBuild.CogJob,Cognex.VisionPro.QuickBuild.CogDestinationQueueConstants)">
            <summary>
            Constructor. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkProcessedImageFromJob.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogVTLinkToolsTogether">
            <summary>
            CogVTLinkLastRunRecordsFromJob. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkToolsTogether.#ctor(System.String,System.Object,System.String,System.Object,System.String)">
            <summary>
            Constructor. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVTLinkToolsTogether.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.CogLinkTypeConstants">
            <summary>
            CogLinkTypeConstants. Internal use only.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.CogLinkTypeConstants.InputImage">
            <summary>
            Specifies that the input image property
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.CogLinkTypeConstants.OutputResult">
            <summary>
            Specifies an output from a tool
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.CogLinkTypeConstants.OutputLastRunRecords">
            <summary>
            Specifies an output is the last run records from a tool
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.CogLinkTypeConstants.OutputLastRunRecordsFromJob">
            <summary>
            Specifies an output is the last run records from a job (namely the
            job's vision tool)
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.CogLinkTypeConstants.OutputProcessedImage">
            <summary>
            Specifies an output is the acquired image which was processed
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.CogLinkTypeConstants.OutputProcessedImageFromJob">
            <summary>
            Specifies an output is the acquired image from a different job
            only applies in dependent mode
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.CogLinkTypeConstants.ToolsTogether">
            <summary>
            Specifies that a tool should be linked to another tool
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternal">
            <summary>
            CogVTLinkInternal. Internal use only.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternal.#ctor(Cognex.VisionPro.QuickBuild.Implementation.CogVTLink,Cognex.VisionPro.CogDataBinding,Cognex.VisionPro.QuickBuild.Implementation.Internal.CogProxyObject)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternal.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternal.Link">
            <summary>
            Link
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternal.Binding">
            <summary>
            Binding
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternal.ProxyObject">
            <summary>
            ProxyObject
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogProxyObject">
            <summary>
            ProxyObject. Internal use only.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogProxyObject.SfInput">
            <summary> Input State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogProxyObject.SfOutput">
            <summary> Output State Flag </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogProxyObject.Input">
            <summary>
            Input
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogProxyObject.Output">
            <summary>
            Output
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternals">
            <summary>
            CogVTLinkInternals. Internal use only.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternals.Add(Cognex.VisionPro.QuickBuild.Implementation.CogVTLink,Cognex.VisionPro.CogDataBinding,Cognex.VisionPro.QuickBuild.Implementation.Internal.CogProxyObject)">
            <summary>
            Add
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternals.LinkInternal(System.Int32)">
            <summary>
            LinkInternal (for testing purposes really)
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternals.RemoveAll">
            <summary>
            RemoveAll
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternals.ValidatePrepare(System.Collections.ArrayList)">
            <summary>
            ValidatePrepare
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternals.CollectResults(Cognex.VisionPro.ICogRecord,Cognex.VisionPro.ICogTool,Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRecord@)">
            <summary>
            CollectResults
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternals.SetupInputImage(System.Object,Cognex.VisionPro.ICogImage)">
            <summary>
            SetupInputImage
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternals.InternalClass(System.Int32)">
            <summary>
            InternalClass
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogVTLinkInternals.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogActionConstants">
            <summary>
            The CogActionConstants enumerated type is used by all custom EventArg objects to indicate what caused the event.
            </summary>
            <remarks/><example/><seealso/>  
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.JobAdded">
            <summary>
            A job has been added to a JobManager
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.JobRemoved">
            <summary>
            A job has been removed from a JobManager
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.RunningSingle">
            <summary>
            A job has started running once
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.RunningContinuous">
            <summary>
            A job has started running continuously
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.RanSingle">
            <summary>
            A job has ran in single mode
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.RanContinuous">
            <summary>
            A job has ran in continuous mode
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.StoppedSingle">
            <summary>
            A job has stopped after being run in single mode
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.StoppedContinuous">
            <summary>
            A job has stopped after being run in continuous mode
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.Abort">
            <summary>
            A job has aborted
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.Reset">
            <summary>
            A job has reset
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.ImageQueueFlushed">
            <summary>
            The Job's image queue has been flushed
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.ImageAvailable">
            <summary>
            An Image is available in the image queue
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.ImageQueueOverflowed">
            <summary>
            The Job's image queue has overflowed
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.ImageRemoved">
            <summary>
            An image has been removed from the image queue
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.RealTimeQueueFlushed">
            <summary>
            The Job's real-time queue has been flushed
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.RealTimeResultAvailable">
            <summary>
            A result is available in the real-time queue
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.RealTimeQueueOverflowed">
            <summary>
            The Job's real-time queue has overflowed
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.RealTimeResultRemoved">
            <summary>
            An realt-time result has been removed from the real-time queue
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.UserQueueFlushed">
            <summary>
            The user queue has been flushed
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.UserResultAvailable">
            <summary>
            An Result available in the user queue
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.UserQueueOverflowed">
            <summary>
            The user queue has overflowed
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.UserResultRemoved">
            <summary>
            A result has been removed from the user queue
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.FailureQueueFlushed">
            <summary>
            The failure queue has been flushed
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.FailureItemAvailable">
            <summary>
            An item available in the failure queue
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.FailureQueueOverflowed">
            <summary>
            The failure queue has overflowed
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.FailureItemRemoved">
            <summary>
            An item has been removed from the failure queue
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogActionConstants.GarbageCollectionRequested">
            <summary>
            Garbage collection has been requested
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManagerActionEventArgs">
            <summary>
            Event args object for CogJobManager actions.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManagerActionEventArgs.#ctor(Cognex.VisionPro.QuickBuild.CogJob,Cognex.VisionPro.QuickBuild.CogActionConstants)">
            <summary>
            Constructor
            </summary>
            <param name="job">The CogJob which caused this event.</param>
            <param name="action">The action which caused this event.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerActionEventArgs.Job">
            <summary>
            The job to which this action applies to.  This property might be null 
            if action does not apply to a specific job.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerActionEventArgs.Action">
            <summary>
            The action which caused the event to fire.
            </summary>
            <value>The action which caused the event to fire.</value>
            <remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobActionEventArgs">
            <summary>
            Event args object for CogJob actions.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobActionEventArgs.#ctor(Cognex.VisionPro.QuickBuild.CogActionConstants)">
            <summary>
            Constructor
            </summary>
            <param name="action">The action which caused this event.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobActionEventArgs.Action">
            <summary>
            The action which caused the event to fire.
            </summary>
            <value>The action which caused the event to fire.</value>
            <remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogVisionToolLinkEventArgs">
            <summary>
            Event args object for vision tool link actions.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogVisionToolLinkEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the CogVTLink object to which the event applies to.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogVisionToolLinkEventArgs.Name">
            <summary>
            Name of the vision tool link which this event args object applies to.
            </summary>
            <value>The name of the vision tool link which caused this event to fire.</value>
            <remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobErrorEventArgs">
            <summary>
            Event args object for job errors.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobErrorEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the CogJob which fired the error event.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobErrorEventArgs.Name">
            <summary>
            Name of the CogJob or CogJobManager to which this event args object applies to.
            </summary>
            <value>The name of the CogJob or CogJobManager link which caused this event to fire.</value>
            <remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogIOErrorConstants">
            <summary>
            The CogIOErrorConstants enumerated type is used by all I/O operations to indicate what caused the error event.
            </summary>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogIOErrorConstants.xml" path="//member[@name=&quot;T:Cognex.VisionPro.QuickBuild.CogIOErrorConstants&quot;]/*"/>  
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorConstants.IOQueueOverflowError">
            <summary>
            An I/O Queue overflow has occurred.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorConstants.IOResultProcessingError">
            <summary>
            An error has occurred while processing a I/O queue record.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorConstants.IODiscreteQueueOverflowError">
            <summary>
            An internal discrete I/O queue overflow has occurred.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorConstants.IODiscreteWriteError">
            <summary>
            An error has occurred while sending output signals.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorConstants.IOAcquisitionCompleteError">
            <summary>
            An error has occurred while sending output signals.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorConstants.IOMovePartError">
            <summary>
            An error has occurred while sending output signals.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorConstants.IORunOnceError">
            <summary>
            An error has occurred while executing the Run Once input signal.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorConstants.IORunContinuousError">
            <summary>
            An error has occurred while executing the Run Continuously input signal.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorConstants.IOEmergencyStopError">
            <summary>
            The Emergency Stop input signal is asserted while trying to run or go online.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorConstants.IOStreamQueueOverflowError">
            <summary>
            An internal stream I/O queue overflow has occurred.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorConstants.IOStreamDeviceWriteError">
            <summary>
            An error has occurred while sending output.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorConstants.IOStreamDeviceReadError">
            <summary>
            An error has occurred while reading input.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorConstants.IOStreamDeviceLostConnectionError">
            <summary>
            An error has occurred due to lost connection.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobIOErrorEventArgs">
            <summary>
            Event args object for I/O errors.
            </summary>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobIOErrorEventArgs.xml" path="//member[@name=&quot;T:Cognex.VisionPro.QuickBuild.CogJobIOErrorEventArgs&quot;]/*"/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobIOErrorEventArgs.#ctor(System.String,System.String,Cognex.VisionPro.QuickBuild.CogIOErrorConstants)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the CogJob which fired the I/O error event.</param>
            <param name="message">The message that contains the description of an I/O error.</param>
            <param name="errorCode">The I/O error code.</param>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobIOErrorEventArgs.xml" path="//member[@name=&quot;M:Cognex.VisionPro.QuickBuild.CogJobIOErrorEventArgs.#ctor(System.String, System.String, Cognex.VisionPro.QuickBuild.CogIOErrorConstants)&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobIOErrorEventArgs.Name">
            <summary>
            Name of the CogJob or CogJobManager to which this event args object applies to.
            </summary>
            <value>The name of the CogJob or CogJobManager link which caused this event to fire.</value>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobIOErrorEventArgs.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJobIOErrorEventArgs.Name&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobIOErrorEventArgs.ErrorMessage">
            <summary>
            An error message to which this event args object applies to.
            </summary>
            <value>The error message that caused this event to fire.</value>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobIOErrorEventArgs.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJobIOErrorEventArgs.ErrorMessage&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobIOErrorEventArgs.ErrorCode">
            <summary>
            The action which caused the event to fire.
            </summary>
            <value>The action which caused the event to fire.</value>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobIOErrorEventArgs.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJobIOErrorEventArgs.ErrorCode&quot;]/*"/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogCountingSemaphore">
            <summary>
            Internal Semaphore class
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogCountingSemaphore.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogCountingSemaphore.#ctor(System.Int32)">
            <summary>
            MaxCount constructor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogCountingSemaphore.#ctor(System.Int32,System.Int32)">
            <summary>
            Count constructor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogCountingSemaphore.Acquire">
            <summary>
            Acquire an unit (if available) waiting around forever
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogCountingSemaphore.Acquire(System.Int32)">
            <summary>
            Acquire an unit (if available) waiting only for milliseconds
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogCountingSemaphore.Release">
            <summary>
            Release a unit of the semaphore
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogCountingSemaphore.Reset">
            <summary>
            Reset, sets the count back to the initial value
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogCountingSemaphore.Count">
            <summary>
            Get the current count
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogCountingSemaphore.MaxCount">
            <summary>
            Returns the max count
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogCountingSemaphore.InitialCount">
            <summary>
            Returns the initial count 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogCountingSemaphore.CountUnsafe">
            <summary>
            Get the current count (unsafely, used for testing ONLY)
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.CogJobResult">
            <summary>
            CogJobResult
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.CogJobResult.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.CogJobResult.ToString">
            <summary>
            Override ToString 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.CogJobResult.Value">
            <summary>
            Value getter
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.CogJobResults">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.CogJobResults.SystemContentsSetter(Cognex.VisionPro.QuickBuild.Implementation.CogJobResult[])">
            <summary>
            Internal setter
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.CogJobResults.UserContentsSetter(Cognex.VisionPro.QuickBuild.Implementation.CogJobResult[])">
            <summary>
            Internal setter
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.CogJobResults.SystemProvided">
            <summary>
            System Provided Results 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.CogJobResults.UserSpecified">
            <summary>
            User Specified Results 
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.CogJobResultsHelper">
            <summary>
            CogJobResultsHelper
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.CogJobResultsHelper.#ctor">
            <summary>
            Private constructor since this class only contains static members.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.CogJobResultsHelper.ConvertToResults(Cognex.VisionPro.ICogRecord)">
            <summary>
            CreateResults
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogTagGenerator">
            <summary>
            CogTagGenerator
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogTagGenerator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogTagGenerator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogTagGenerator.Tag">
            <summary>
            Create and return the next unique tag
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogImageInfo">
            <summary>
            CogAcquiredImage
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogImageInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogImageInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogImageInfo.ImageTag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogImageInfo.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogImageInfo.AcquisitionRunStatus">
            <summary>
            AcquisitionRunStatus
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogThreadsState">
            <summary>
            Internal class which represents the current state of the threads in a job
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogThreadsState.#ctor">
            <summary>
            Default constructor (internal only)
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogThreadsState.#ctor(System.Boolean)">
            <summary>
            Manager Default constructor (internal only)
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogThreadsState.IsRunning">
            <summary>
            IsRunning (internal only)
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogThreadCommand">
            <summary>
            Internal class which commands a thread what to do
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOStreamDeviceHandler">
            <summary>
            Stream I/O devices need to queue the incoming output data. This class
            manipulates the state of each stream I/O device used by a job.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIODeviceHandlerBase">
            <summary>
            This class synchronizes and monitors the activity of a job and its job manager.
            Based on the current activity of job and job manager, it sends output,
            disables output, flushes the output queue contents, terminates all the threads, etc.
            
            This class is not thread safe, and can only attach to a single job.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.ICogIODeviceHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.ICogIODeviceHandler.Shutdown">
            Call only when the job is going away
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOStreamDeviceHandler.Shutdown">
            <summary>
            Called only when the job is going away
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManagerStateConstants">
            <summary>
            The CogJobManagerStateConstants enumerated type is used to indicate the state of a CogJobManager in dependent mode.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManagerStateConstants.Stopped">
            <summary>
            The manager and all dependent jobs have stopped
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManagerStateConstants.RunningSingle">
            <summary>
            The manager is running in dependent mode just once.  All jobs will also
            run at the appropriate time.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManagerStateConstants.RunningContinuous">
            <summary>
            The manager is running in dependent mode continuously.  All jobs will
            also run at the appropriate time.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobsRunningStateConstants">
            <summary>
            The CogJobsRunningStateConstants enumerated type is used to indicate the state all CogJobs associated with a CogJobManager.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobsRunningStateConstants.None">
            <summary>
            There are no running jobs associated with this manager.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobsRunningStateConstants.SomeIndependentJobs">
            <summary>
            At least one job is running in independent mode. 
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobsRunningStateConstants.AllIndependentJobs">
            <summary>
            All jobs are running in independent mode.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobsRunningStateConstants.SomeDependentJobs">
            <summary>
            At least one job is running in dependent mode.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobsRunningStateConstants.AllDependentJobs">
            <summary>
            All jobs are running in dependent mode.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogDestinationQueueConstants">
            <summary>
            The CogQueueDestinationConstants enumerated type is used to indicate into which queue result packets are stored.  The values of this type can be OR'ed together.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogDestinationQueueConstants.NotApplicable">
            <summary>
            The result does not go into any queue (used in input specification)
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogDestinationQueueConstants.RealTime">
            <summary>
            Result will go the Real-time queue
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogDestinationQueueConstants.User">
            <summary>
            Result will go into the User queue
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogOperatingModeConstants">
            <summary>
            The CogOperatingModeConstants enumerated type is used set the operating mode of the CogJobManager.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogOperatingModeConstants.Independent">
            <summary>
            Results from jobs are completely independent
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogOperatingModeConstants.Dependent">
            <summary>
            Results from jobs are dependent on other jobs.
            Currently not supported. 
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogProcessingModelConstants">
            <summary>
            The CogProcessingModel enumerated type is used to set the processing model of the CogJobManager. 
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogProcessingModelConstants.Shared">
            <summary>
            Jobs are operating in the shared model
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogProcessingModelConstants.Balanced">
            <summary>
            Jobs are operating in the balanced model.  This value can only be used in Independent mode.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogFailureLogModeConstants">
            <summary>
            The CogFailureLogModeConstants enumerated type is used to indicate which of the vision tool run status result codes cause images to be stored into the failure queue.  The values of this type can be OR'ed together.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogFailureLogModeConstants.None">
            <summary>
            Images are not saved regardless of the Vision Tool RunStatus
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogFailureLogModeConstants.Error">
            <summary>
            Images should be saved when Vision Tools generate Error RunStatus
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogFailureLogModeConstants.Reject">
            <summary>
            Images should be saved when Vision Tools generate Reject RunStatus
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogFailureLogModeConstants.Warning">
            <summary>
            Images should be saved when Vision Tools generate Warning RunStatus
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogFailureLogModeConstants.Accept">
            <summary>
            Images should be saved when Vision Tools generate Accept RunStatus
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogUserQueueResultCreationConstants">
            <summary>
            The CogUserQueueResultCreationConstants enumerated type is used to
            indicate when user result records should be created.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogUserQueueResultCreationConstants.Auto">
            <summary>
            Automatically decide when to create user result records.  In this
            case, a user result record is only created when items have been added
            to the user queue.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogUserQueueResultCreationConstants.Always">
            <summary>
            Create a user result record each time a job runs.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogImageQueueOverflowActionConstants">
            <summary>
            The CogImageQueueOverflowActionConstants enumerated type is used to control the running state of the job or CogJobManager.
            </summary>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogImageQueueOverflowActionConstants.xml" path="//member[@name=&quot;T:Cognex.VisionPro.QuickBuild.CogImageQueueOverflowActionConstants&quot;]/*"/>  
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogImageQueueOverflowActionConstants.None">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogImageQueueOverflowActionConstants.StopJob">
            <summary>
            Stops the job that fired the image queue overflowed event
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogImageQueueOverflowActionConstants.StopJobManager">
            <summary>
            Stops CogJobManager when a job fires the image queue overflowed event.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogIOErrorActionConstants">
            <summary>
            The CogIOErrorActionConstants enumerated type is used to control the running state of the job or CogJobManager.
            Discrete and TCP/IP error actions can be OR'ed together.
            </summary>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogIOErrorActionConstants.xml" path="//member[@name=&quot;T:Cognex.VisionPro.QuickBuild.CogIOErrorActionConstants&quot;]/*"/>  
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorActionConstants.None">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorActionConstants.StopJob">
            <summary>
            Stops the job that caused the Discrete Device error and flushes its realtime and I/O queues.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorActionConstants.StopJobManager">
            <summary>
            Stops CogJobManager when the Discrete Device error occurs and flushes all realtime and I/O queues
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorActionConstants.TCPIPErrorIgnore">
            <summary>
            Ignore all TCP/IP errors
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorActionConstants.TCPIPErrorStopJob">
            <summary>
            Stops the job that caused the TCP/IP error and flushes its realtime and I/O queues.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOErrorActionConstants.TCPIPErrorStopJobManager">
            <summary>
            Stops CogJobManager when the TCP/IP error occurs and flushes all realtime and I/O queues
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogIOClearQueueOnStop">
            <summary>
            The CogIOClearQueueOnStop enumerated type is used to clear I/O queues when each job stops.
            </summary>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogIOClearQueueOnStop.xml" path="//member[@name=&quot;T:Cognex.VisionPro.QuickBuild.CogIOClearQueueOnStop&quot;]/*"/>  
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOClearQueueOnStop.None">
            <summary>
            Process all the items in the queue before stopping the job.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogIOClearQueueOnStop.Discrete">
            <summary>
            Clear all I/O queues.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager">
            <summary>
            The CogJobManager class is the toplevel class of QuickBuild.  It is responsible for managing and providing global information to CogJobs.
            </summary>
            <remarks/><example>
      <code lang="C#">
        using System;
        using System.Threading;

        using Cognex.VisionPro;
        using Cognex.VisionPro.QuickBuild;

        public class ImplementCJM
        {
          private CogJobManager myJobManager;
          private static Semaphore semaphore;

          private void myJobManager_Stopped(object sender, EventArgs e)
          {
            // Signal the main thread that the CogJobManager has now stopped
            semaphore.Release();
          }

          private void myJobManager_UserResultAvailable(object sender, EventArgs e)
          {
             // Add code here to handle UserResultAvailable Event.
          }

          // Add Stop and UserResultAvailable Event Handlers.
          private void addEventHandler()
          {
            myJobManager.Stopped += new CogJobManager.CogJobManagerStoppedEventHandler(myJobManager_Stopped);
            myJobManager.UserResultAvailable += new CogJobManager.CogUserResultAvailableEventHandler(myJobManager_UserResultAvailable);
          }

          // Remove Stop and UserResultAvailable Event Handlers.
          private void removeEventHandler()
          {
            myJobManager.Stopped -= new CogJobManager.CogJobManagerStoppedEventHandler(myJobManager_Stopped);
            myJobManager.UserResultAvailable -= new CogJobManager.CogUserResultAvailableEventHandler(myJobManager_UserResultAvailable);
          }

          public static void Main()
          {
            // Create a semaphore that can satisfy one concurrent request.
            // Use an initial count of zero, so that the entire semaphore count is initially
            // owned by the main program thread.
            semaphore = new Semaphore(0, 1);
            ImplementCJM implementCJM = new ImplementCJM();

            // Create a CogJobManager object from a saved application vpp file.
            implementCJM.myJobManager = (CogJobManager)CogSerializer.LoadObjectFromFile(@"C:\Program Files\Cognex\VisionPro\Samples\Programming\QuickBuild\advancedAppOne.vpp");

            // Flush queues.
            implementCJM.myJobManager.UserQueueFlush();
            implementCJM.myJobManager.FailureQueueFlush();

            implementCJM.addEventHandler();

            // Run CogJobManager once.
            implementCJM.myJobManager.Run();

            // Wait for the CogJobManager to stop
            semaphore.WaitOne();

            System.Console.WriteLine("The CogJobManager has stopped");

            // Remove handlers, and shut down the CogJobManager.
            implementCJM.removeEventHandler();
            implementCJM.myJobManager.Shutdown();
            }
          }
        }
      </code>
      <code lang="Visual Basic">
        Imports System.Threading

        Imports Cognex.VisionPro
        Imports Cognex.VisionPro.QuickBuild

        Module ImplementCJM

          Dim myJobManager As CogJobManager
          Dim semaphore As Semaphore

          Private Sub myCogJobManager_Stopped(ByVal sender As System.Object, ByVal e As CogJobManagerActionEventArgs)
            ' Signal the main thread that the CogJobManager has now stopped
            semaphore.Release()
          End Sub

          Private Sub myCogJobManager_UserResultAvailable(ByVal sender As System.Object, ByVal e As CogJobManagerActionEventArgs)
            ' Add code here to handle UserResultAvailable Event.
          End Sub

          Private Sub addEventHandler()
            AddHandler myJobManager.Stopped, AddressOf myCogJobManager_Stopped
            AddHandler myJobManager.UserResultAvailable, AddressOf myCogJobManager_UserResultAvailable
          End Sub

          Private Sub removeEventHandler()
            RemoveHandler myJobManager.Stopped, AddressOf myCogJobManager_Stopped
            RemoveHandler myJobManager.UserResultAvailable, AddressOf myCogJobManager_UserResultAvailable
          End Sub

          Sub Main()
            semaphore = New Semaphore(0, 1)

            ' Create a CogJobManager object from a saved application vpp file.
            myJobManager = CType(CogSerializer.LoadObjectFromFile("C:\Program Files\Cognex\VisionPro\Samples\Programming\QuickBuild\advancedAppOne.vpp"), CogJobManager)

            ' Flush queues.
            myJobManager.UserQueueFlush()
            myJobManager.FailureQueueFlush()

            addEventHandler()

            ' Run CogJobManager once.
            myJobManager.Run()

            ' Wait for the CogJobManager to stop
            semaphore.WaitOne()

            System.Console.WriteLine("The CogJobManager has stopped")

            ' Remove handlers, and shut down the CogJobManager.
            removeEventHandler()
            myJobManager.Shutdown()

            ' Shutdown the CogJobManager.
            myJobManager.Shutdown()
          End Sub

        End Module
      </code>
    </example><seealso/>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfOperatingMode">
            <summary> Operating Mode State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfGarbageCollection">
            <summary> Garbage Collection State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfGarbageCollectionInterval">
            <summary> Garbage Collection Interval State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfProcessingModel">
            <summary> Processing Model State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfProcessorCount">
            <summary> Processor Count State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfVisionTool">
            <summary> Vision Tool State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfVisionToolRunStatus">
            <summary> Vision Tool Run Status State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfFailureLogModes">
            <summary> Failure Log Modes State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfState">
            <summary> State State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfUserQueueCapacity">
            <summary> UserQueueCapacity State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfFailureQueueCapacity">
            <summary> FailureQueueCapacity State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfRealTimeQueueCapacity">
            <summary> RealTimeQueueCapacity State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfTotalDependentIterations">
            <summary> Total Dependent Iterations State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfTotalVisionToolAccepts">
            <summary> Total Vision Tool Accepts State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfTotalVisionToolWarnings">
            <summary> Total Vision Tool Warnings State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfTotalVisionToolRejects">
            <summary> Total Vision Tool Rejects State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfTotalVisionToolErrors">
            <summary> Total Vision Tool Errors State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfName">
            <summary> Name State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfJobsRunningState">
            <summary> Jobs Running State State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfImageQueueOverflowAction">
            <summary> Handle Image Queue Overflow State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfIOErrorAction">
            <summary> Handle I/O Error State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfIOClearQueueOnStop">
            <summary> Clear I/O Queue When Stop State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfIOEnable">
            <summary> IOEnable State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfDiscreteQueueCapacity">
            <summary> IOQueueCapacity State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfUserQueueResultCreation">
            <summary> UserQueueResultCreation State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfIOHeartbeat">
            <summary> IOHeartbeat State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfIOClientAutoReconnect">
            <summary> Client auto-reconnect State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfVisionToolMTEnable">
            <summary> Vision Tool Multi-threading Enable State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfVisionToolMTThreadCount">
            <summary> Vision Tool Multi-threading Thread Count State Flag </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobManager.SfVisionToolMTThreadCountMode">
            <summary> Vision Tool Multi-threading Thread Count Mode State Flag </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.#ctor">
            <summary>
            Default CogJobManager constructor.  The newly constructed CogJobManager has a default name in the form "CogJobManager#"
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.#ctor(System.String)">
            <summary>
            CogJobManager constructor that takes a name.
            </summary>
            <param name="name">Name of the CogJobManager.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.StreamInput(System.String,System.Int32,System.Boolean)">
            <summary>
            Call this function to retrieve an interface, ICogIOTCPIP, of a QB TCP/IP device used to receive an input message.
            </summary>
            <param name="host">Either a hostname or IP address. Use "localhost" as a server hostname.</param>
            <param name="portMumber">Port number</param>
            <param name="client">True for a client device type, false for a server device type</param>
            <returns>ICogIOTCPIP interface if the device is found. Returns null otherwise.</returns>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobManager.StreamInput.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJobManager.StreamInput&quot;]/*"/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.RequestHeartbeat">
            <summary>
            The user only needs to call this routine once. Once it is called, Heartbeat is generated
            whenever the following two conditions are met--IOEnable is true and IOHeartbeat is valid.
            </summary>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobManager.RequestHeartbeat.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJobManager.RequestHeartbeat&quot;]/*"/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.IOPostLoadSetup(System.Boolean)">
            <summary>
            QuickBuild is unable to monitor Online input command after it starts up
            because the default IOEnable mode is always set to false (offline mode). 
            However, Online and Emergency Stop input signals should be still monitored 
            even if in offline mode. The user must call this routine to ask CogJobManager 
            to monitor those input signals that must be monitored in offline mode. 
            This function should also be called after the user successfully loads 
            a QuickBuild application.
            </summary>
            <param name="enabled">Monitoring is on when enabled is true. </param>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobManager.xml" path="//member[@name=&quot;M:Cognex.VisionPro.QuickBuild.CogJobManager.IOPostLoadSetup&quot;]/*"/>    
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.OnDeserialization(System.Object)">
            <summary>
            Serialization Callback. Internal use only.
            </summary>
            <param name="sender">The object which is calling this callback.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             GetObjectData override. Internal use only.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming context</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or contained CogJobs are not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.JobAdd(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary>
            JobAdd is used to add CogJobs to the CogJobManager.
            </summary>
            <param name="job">The new CogJob to add.</param>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobManager.JobAdded">Fires when the CogJob has been successfully added.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or specified CogJob or any other CogJob is not stopped.</exception>
            <exception cref="T:System.Exceptions.ArgumentException">Thrown if the specified CogJob has already been added to another CogJobManager.</exception>
            <exception cref="T:System.Exceptions.ArgumentException">Thrown if the specified CogJob has a name and it is not unique.</exception>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobManager.xml" path="//member[@name=&quot;M:Cognex.VisionPro.QuickBuild.CogJobManager.JobAdd&quot;]/*"/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.JobRemove(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary>
            JobRemove is used to remove CogJobs from the CogJobManager.  
            </summary>
            <param name="job">A reference to the CogJob to remove.</param>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobManager.JobRemoved">Fires when the CogJob has been successfully removed.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or specified CogJob or any other CogJob is not stopped.</exception>
            <exception cref="T:System.Exceptions.ArgumentException">Thrown if the specified CogJob was not found.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.JobRemove(System.String)">
            <summary>
            JobRemove is used to remove CogJobs by name from the CogJobManager.  
            </summary>
            <param name="name">The name of the CogJob to remove.</param>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobManager.JobRemoved">Fires when the CogJob has been successfully removed.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or specified CogJob or any other CogJob is not stopped.</exception>
            <exception cref="T:System.Exceptions.ArgumentException">Thrown if the specified CogJob was not found.</exception>
            <remarks/><example/><seealso/>  
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.Job(System.String)">
            <summary>
            Retrieve a references to the CogJob from the JobManager by name.
            </summary>
            <param name="name">Name of the CogJob to retrieve from the CogJobManager.</param>
            <returns>A references to the requested CogJob.</returns>
            <exception cref="T:System.Exceptions.ArgumentException">Thrown if the specified CogJob was not found.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.Job(System.Int32)">
            <summary>
            Retrieve a references to the CogJob from the JobManager by name index.
            </summary>
            <param name="index">Index of the CogJob to retrieve from the CogJobManager.</param>
            <returns>A references to the requested CogJob.</returns>
            <exception cref="T:System.Exceptions.ArgumentException">Thrown if the specified CogJob was not found.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.Run">
            <summary>
            Run the CogJobManager and any contained CogJobs just once.  See CogJob.Run() for additional information regarding the running of CogJobs.
            </summary>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobManager.Stopped">Fires when the CogJobManager and all contained CogJobs have completely stopped.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotRunnableException">Thrown if the CogJobManager or any contained CogJobs cannot be run, usually because it has been already shutdown or EStop is asserted.</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.RunContinuous">
            <summary>
            Run the CogJobManager and all contained CogJobs in a continuous loop. This CogJobManager will not stop running until Stop() is called.  See CogJob.RunContinuous() for additional information regarding the running of CogJobs.
            </summary>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobManager.Stopped">Fires when the CogJobManager and all contained CogJobs have completely stopped.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotRunnableException">Thrown if the CogJobManager or any contained CogJobs cannot be run, usually because it has been already shutdown.</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped.</exception>
            <remarks/><example/><seealso/>  
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.Stop">
            <summary>
            Stop forces the CogJobManager and any contained CogJobs to stop running.  Only when the CogJobManager is running continuously can it be stopped. This method returns immediately and does not wait.  Once the CogJobManager and any contained jobs have completely stopped, the Stopped event will be fired.
            If the CogJobManager is not running, this method has no effect. 
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.Reset">
            <summary>
            Reset puts the CogJobManager into its initial state.  If there are any contained CogJobs, they are shutdown and removed.
            </summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fired once with all the accumulated changes.</event>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobManager.ResetComplete">Fires when the CogJobManager has been fully reset.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or contained CogJobs are not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.Shutdown">
            <summary>
            Shutdown terminates all internal threads inside the CogJobManager and calls shutdown on all contained CogJobs. Shutdown must be called to allow the CogJobManager to cleanly terminate.
            After the CogJobManager and all contained CogJobs have shutdown, it cannot be run again.  Do not persist (save) a shutdown CogJobManager, since it cannot be run again, even after de-persisting it.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.OnStopped(System.Boolean)">
            Method responsible for notifiying registered objects of the event. Internal use only.
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.UserResult">
            <summary>
            UserResult() removes and returns the oldest result packet from the user queue. UserResult() will return null if the user queue is empty.  This method may be called while the CogJobManager or CogJobs are running.
            </summary>
            <returns>A reference to an ICogRecord which contains results.</returns>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobManager.UserResultRemoved">Fires when a result packet is removed from the user queue.</event>
            <remarks>
    	<para>
    		Returns and removes the oldest packet from the User Queue, which is called the
    		<BOLD>Posted Items List</BOLD> in the QuickBuild application.
    	</para>
    	<para>
    		A user result record contains the following subrecords:
    		
    				<TABLE>
			<CAPTION>User Result Subrecords</CAPTION>
			<HEADING>
				<ROW>
					<CELL>Subrecord Key</CELL>
					<CELL>Description</CELL>
				</ROW>
			</HEADING>
			<BODY>
				<ROW>
					<CELL>JobName</CELL>
					<CELL>
							The name of the job that provided these results.
					</CELL>
				</ROW>
				<ROW>
					<CELL>UserResultTag</CELL>
					<CELL>
							The sequence number of the result packet.
					</CELL>
				</ROW>
				<ROW>
					<CELL>RunStatus</CELL>
					<CELL>
							The run status of the tool.							
					</CELL>
				</ROW>
				<ROW>
					<CELL>ShowLastRunRecordForUserQueue</CELL>
					<CELL>
						If the <BOLD>Include LastRunRecord image and graphics</BOLD>
						option is checked in the <BOLD>Configure Posted Items</BOLD> dialog,
						this record contains a single subrecord whose key is LastRun.
						The LastRun record contains
						 subrecords  that contain the last run records
						for each of  the tools in the job.
					</CELL>
				</ROW>
				<ROW>
					<CELL><ITALIC>Posted Items</ITALIC></CELL>
					<CELL>
						One record for each of the  items you selected to be
						in the <see cref="u:QuickBuild.QuickBuild.Walkthrough.Using" cgnxAnchor="configuring_the_posted_items_list">Posted Items List</see>
						The record key for these items correspond to the pathtiy soecified when you configured the items. For example: <TT>"Tools.Item[1].CogBarcodeTool.Results.Count"</TT>
					</CELL>
				</ROW>
			</BODY>
		</TABLE>
    	</para>
    </remarks><example/><seealso/> 
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.UserResult(System.Int32,System.Boolean)">
            <summary>
            UserResult(int,bool) allows any result packet to be looked at and/or removed from the user queue.  
            </summary>
            <returns>A reference to an ICogRecord which contains results.</returns>
            <param name="index">The index of the result packet to be retrieved from the user queue.  The oldest packet is at index 0.</param>
            <param name="removeResult">If this boolean is true, then the specified result packet is removed from the user queue.  If false, then just a reference to the result packet is returned without removing it from the user queue.</param>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobIndependent.UserResultRemoved">Fires when a result package is removed from the user queue.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogQueueEmptyException">Thrown if the user queue is empty.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.UserQueueFlush">
            <summary>
            Flush/clear the user queue of all packets.  This method cannot be called while the CogJobManager or any contained CogJobs are running.
            </summary>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobManager.UserQueueFlushed">Fires when the queue is flushed.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.FailureItem">
            <summary>
            FailureItem() removes and returns the oldest failure packet from the failure queue. FailureItem() will return null if the failure queue is empty.  This method may be called while the CogJobManager or CogJobs are running.
            </summary>
            <returns>A reference to an ICogRecord which contains a failure image.</returns>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobManager.UserResultRemoved">Fires when a result packet is removed from the failure queue.</event>
            <remarks/><example/><seealso/> 
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.FailureItem(System.Int32,System.Boolean)">
            <summary>
            FailureItem(int,bool) allows any failure packet to be looked at and/or removed from the failure queue.  
            </summary>
            <returns>A reference to an ICogRecord which contains a failure image.</returns>
            <param name="index">The index of the failure packet to be retrieved from the failure queue.  The oldest packet is at index 0.</param>
            <param name="removeItem">If this boolean is true, then the specified result packet is removed from the failure queue.  If false, then just a reference to the failure packet is returned without removing it from the failure queue.</param>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobIndependent.FailureItemRemoved">Fires when a result package is removed from the failure queue.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogQueueEmptyException">Thrown if the failure queue is empty.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.FailureQueueFlush">
            <summary>
            Flush/clear the failure queue of all packets.  This method cannot be called while the CogJobManager or any contained CogJobs are running.
            </summary>
            <event cref="E:Cognex.VisionPro.QuickBuild.CogJobManager.FailureQueueFlush">Fires when the queue is flushed.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.CloneParameters">
            <summary>
            CloneParamters. Internal use only.
            </summary>
            <returns>A new CogJobManager</returns>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManager.CopyParameters(Cognex.VisionPro.QuickBuild.CogJobManager)">
            <summary>
            CopyParameters. Internal use only.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobManager.xml" path="//member[@name=&quot;M:Cognex.VisionPro.QuickBuild.CogJobManager.CopyParameters&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.JobManagerRunStopSyncRoot">
            <summary>
            Read-only property to get the JobManagerRunStopSyncRoot.  Internal use only.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.IOInfoList">
            <summary>
            Returns the CogIOInfoList, which is used to map I/O signals to physical
            devices in the system. Cognex internal use only
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.IODeviceList">
            <summary>
            Returns CogIODeviceList. The user can use this class to retrieve
            a reference to a CogIODevice derived object, which is created by CogJobManager initially.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.ImageQueueOverflowAction">
            <summary>
            Get or set the running state of the CogJob or CogJobManager when the image queue overflowed event is fired by a job.
            </summary>
            <value>One of the CogImageQueueOverflowActionConstants enum value.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the ImageQueueOverflowAction changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager is not stopped</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.IOErrorAction">
            <summary>
            Get or set the running state of the CogJob or CogJobManager when an I/O error occurs.
            </summary>
            <value>One of the CogIOErrorActionConstants enum value.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the IOErrorAction changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager is not stopped</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.IOClearQueueOnStop">
            <summary>
            Determines whether or not the I/O queue contents must be cleared when the job stops.
            </summary>
            <value>One of the CogIOClearQueueOnStop enum value.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the IOClearQueueOnStop changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager is not stopped</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.IOEnable">
            <summary>
            When this property is set to true, Cognex handles all I/O operations.
            Otherwise, the user is responsible for fetching results from the real-time queue
            and processing I/O operations. 
            Note: The user must not modify input line commands when IOEnable is true.
            </summary>
            <value>True when Cognex handles I/O operations.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the IOEnable changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager is not stopped</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogInvalidSetupException">Thrown if the Emergency Stop signal is asserted and the user tries to go Online</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.IOClientAutoReconnect">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.IOHeartbeat">
            <summary>
            The CogJobManager generates the heartbeat signal while it is running
            using the data provided by IOHeartbeat. The caller must enable the output line
            before running any of the jobs.
            </summary>
            <value>The description of the device name, its board index, and an output line number.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the IOHeartbeat changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager is not stopped</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.IOQueueCapacity">
            <summary>
            Get or set the discrete queue capacity.
            </summary>
            <value>The capacity of the discrete queue is the number of discrete queue items which can be queued up when the job is processing discrete output results.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the IOQueueCapacity changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager is not stopped</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.IOErrorLog">
            <summary>
            This property returns a collection of I/O runtime errors.
            Cognex Internal Use Only.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManager.IOError">
            <summary>
            Raised when any I/O error occurs.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.Name">
            <summary>
            Get or set the name of the CogJobManager.
            </summary>
            <value>The name (a string) of the CogJobManager.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the name changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager is not stopped.</exception>
            <remarks/><example/><seealso/>    
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.JobCount">
            <summary>
            Get the number of CogJobs contained within the CogJobManager.
            </summary>
            <value> Returns the number CogJobs which have been added to this CogJobManager. </value>
            <remarks/><example/><seealso/>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManager.JobAdded">
            <summary>
            Raised when a job is added to the JobManager
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManager.JobRemoved">
            <summary>
            Raised when a job is removed from the JobManager
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.JobsRunningState">
            <summary>
            Read-only property to get the state of all CogJobs in the CogJobManager.
            </summary>
            <value>The JobsRunningState property indicates the state all the jobs in the CogJobManager.</value>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.OperatingMode">
            <summary>
            Get or set the operating mode of the CogJobManager.
            </summary>
            <value>The operating mode of the CogJobManager is either Independent or Dependent.  When the CogJobManager is operating in either mode, then all contained jobs are also operating in the same mode.  Depending on the mode, you may not be able to access certain properties and methods.  Currently only Independent mode is supported.</value>
            <remarks/><example/><seealso/>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManager.ResetComplete">
            <summary>
            Raised when a job is reset.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManager.Stopped">
            <summary>
            Raised when all jobs are completely stopped.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.UserQueueCapacity">
            <summary>
            Get or set the user queue capacity.
            </summary>
            <value>The capacity of the user queue is the number of result packets which can be queued up when the job is running and collecting results.  Setting this value to something smaller than the number of contained CogJobs in this CogJobManager may cause user results to be dropped or lost from the user queue.  This error condition will manifest itself as: a UserResultAvailable event will be fired, but the user queue will be empty (a null value will be returned from the UserResult method).  The capacity of the user queue should always be equal to or greater than the the number of contained CogJobs in this CogJobManager.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the UserQueueCapacity changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.UserQueueCount">
            <summary>
            Read-only property which returns the number of result packets in the user queue.
            </summary>
            <value>This property returns the number of result packets in the user queue at this instant.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the UserQueueCount changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.UserQueueResultCreation">
            <summary>
            Get or set the user queue result creation behavior.
            </summary>
            <value>The desired result creation behavior.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the UserQueueResultCreation property changes.</event>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManager.UserResultAvailable">
            <summary>
            Raised when a new result is available in the User Queue.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManager.UserQueueFlushed">
            <summary>
            Raised when the user queue is flushed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManager.UserQueueOverflowed">
            <summary>
            Raised when the user queue overflows.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManager.UserResultRemoved">
            <summary>
            Raised when a result is removed from the User Queue.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.FailureLogModes">
            <summary>
            Get or set the vision tool run status result code which will cause an image to be placed into the failure queue.
            </summary>
            <value>FailureLogModes takes a OR'ed value of vision tool run status result codes.  If the vision tool result code is one of the specified values, then the image will be placed into the failure queue.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the FailureLogModes changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.FailureQueueCapacity">
            <summary>
            Get or set the failure queue capacity.
            </summary>
            <value>The capacity of the failure queue is the number of failure packets which can be queued up when the job is running.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the FailureQueueCapacity changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.FailureQueueCount">
            <summary>
            Read-only property which returns the number of failure packets in the failure queue.
            </summary>
            <value>This property returns the number of failure packets in the failure queue at this instant.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the FailureQueueCount changes.</event>
            <remarks/><example/><seealso/>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManager.FailureItemAvailable">
            <summary>
            Raised when a new item is available in the Failure Queue.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManager.FailureQueueFlushed">
            <summary>
            Raised when the failure queue is flushed
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManager.FailureQueueOverflowed">
            <summary>
            Raised when the failure queue overflows.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManager.FailureItemRemoved">
            <summary>
            Raised when an item is removed from the Failure Queue.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.VisionToolMTEnable">
            <summary>
            Get or set the vision tools multi-threading enable.  
            </summary>
            <value>The default value of this property is false.  If VisionToolMTEnable is set to true, then all multi-threaded vision tools will use VisionToolMTThreadCount threads when they are run.   The value of this property is persisted in every CogJobManager.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fired when VisionToolMTTEnable changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped.</exception>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobManager.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJobManager.VisionToolMTEnable&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.VisionToolMTThreadCount">
            <summary>
            Get or set the number of threads that all multi-threaded vision tools will use if the ThreadCountMode is set to UserSpecified.  
            </summary>
            <value>The default value of this property is 0 until either the VisionToolMTEnable is set to true or the user specifies a new value.  If the VisionToolMTEnable is set to false, then this property affects nothing.  If The ThreadCountMode is set to HardwareDefined and VisionToolMTEnable is set to true, then this property will be set to the number of physical processors or cores installed.  If a user sets this value, then that value will be used instead of the number of physical processors.  The value of this property is persisted in every CogJobManager.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fired when VisionToolMTThreadCount changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped.</exception>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobManager.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJobManager.VisionToolMTThreadCount&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.VisionToolMTThreadCountMode">
            <summary>
            Get or set the thread count mode of the vision tool mult-ithreading mechanism. 
            </summary>
            <value>The default value of this property is HardwareDefined.  HardwareDefined means that that multi-threaded aware vision tools will use N threads, where N is the processors or cores.  If this property is set to UserSpecified, then multi-threaded aware vision tools will use the N threads, where N is equal to the ThreadCount property.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fired when VisionToolMTThreadCount changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped.</exception>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobManager.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJobManager.VisionToolMTThreadCountMode&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.OwnedIndependent">
            <summary>
            Read-only property to retrieve the CogJobManagerIndependent object.  
            </summary>
            <value>The CogJobManagerIndependent object contains all methods/properties/events which are related to Independent mode.  This object cannot be retrieved in Dependent mode.</value>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatingModeMismatchException">Thrown if the OperatingMode is set to Dependent mode.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.InternalIndependent">
            InternalIndependent. Internal use only.
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.OwnedDependent">
            <summary>
            Read-only property to retrieve the CogJobManagerDependent object.  
            </summary>
            <value>The CogJobManagerDependent object contains all methods/properties/events which are related to Dependent mode.  This object cannot be retrieved in Independent mode.</value>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatingModeMismatchException">Thrown if the OperatingMode is set to Independent mode.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.GarbageCollection">
            <summary>
            Get or set if the CogJobManager should do garbage collection.
            </summary>
            <value>If the value is set to true, then the CogJobManager will do garbage collection at the GarbageCollectionInterval.  If the value is false, then the CogJobManager will not do garbage collection and the user is responsible for calling GC.Collect() themselves.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fired when GarbageCollection changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.GarbageCollectionInterval">
            <summary>
            Get or set the garbage collection interval.
            </summary>
            <value>The garbage collection interval is the number of job cycles (whether this is images acquired or vision tools ran depends on the job's RunMode) before the garbage collector is run.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fired when GarbageCollectionInterval changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManager.UserData">
            <summary>
            UserData. Internal use only.
            </summary>
            <value>Get the CogDictionary associated with this JobManager.</value>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager.CogIOErrorEventHandler">
            <summary>
            Delegate for the IOError event.
            </summary>
            <!-- Failed to insert some or all of included XML --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobManager.CogIOErrorEventHandler.xml" path="//member[@name=&quot;T:Cognex.VisionPro.QuickBuild.CogJobManager.CogIOErrorEventHandler&quot;]/*"/> 
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager.CogJobAddedEventHandler">
            <summary>
            Delegate for the JobAdded event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager.CogJobRemovedEventHandler">
            <summary>
            Delegate for the JobRemoved event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager.CogJobManagerResetCompleteEventHandler">
            <summary>
            Delegate for the ResetComplete event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager.CogJobManagerStoppedEventHandler">
            <summary>
            Delegate for the Stopped event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager.CogUserResultAvailableEventHandler">
            <summary>
            Delegate for the UserResultAvailable event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager.CogUserQueueFlushedEventHandler">
            <summary>
            Delegate for the UserQueueFlushed event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager.CogUserQueueOverflowedEventHandler">
            <summary>
            Delegate for the UserQueueOverflow event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager.CogUserResultRemovedEventHandler">
            <summary>
            Delegate for the UserResultRemoved event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager.CogFailureItemAvailableEventHandler">
            <summary>
            Delegate for the FailureItemAvailable event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager.CogFailureQueueFlushedEventHandler">
            <summary>
            Delegate for the FailureQueueFlushed event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager.CogFailureQueueOverflowedEventHandler">
            <summary>
            Delegate for the FailureQueueOverflow event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManager.CogFailureItemRemovedEventHandler">
            <summary>
            Delegate for the FailureItemRemoved event.
            </summary>
            <remarks/><example/><seealso/><remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManagerIndependent">
            <summary>
            CogJobManagerIndependent contains all independent mode only properties, methods, and events.
            </summary>
            <remarks/><example/><seealso/>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManagerIndependent.#ctor(Cognex.VisionPro.QuickBuild.CogJobManager)">
            <summary>
            CogJobManagerIndependent constructor. Internal use only.
            </summary>
            <param name="parent">Parent job manager. Internal use only.</param>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerIndependent.ParentManager">
            <summary>
            Read-only property to get this object's parent manager.
            </summary>
            <value>Get the CogJobManager associated with this object.</value>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobManagerIndependent.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJobManagerIndependent.ParentManager&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerIndependent.ProcessingModel">
            <summary>
            Get or set the ProcessingModel of the CogJobManager.
            </summary>
            <value>If the ProcessingModel is set to balanced (default) then all CogJobs associated with the CogJobManager will be given an equal chance of running.  If the ProcessingModel is set to Shared, then all the CogJobs will run at the same time, all competing for CPU time.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fired when ProcessingModel changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerIndependent.ProcessorCount">
            <summary>
            Get or set the number of processors the CogJobManager will use in scheduling CogJobs in Balanced mode.  This property is not used in Shared mode.
            </summary>
            <value>The default value of this property is the number of installed processors in the computer.  This count will include both physical and logical processors.  Changing this value allows the user to control how many CPUs the CogJobManager will use.  This value is always set to the number of processors after a CogJobManager is depersisted.  If you do not want this property to match the number of installed processors after depersisting a file, you must set this property again.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fired when ProcessingCount changes.</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogNotStoppedException">Thrown if the CogJobManager or any contained CogJobs are not stopped.</exception>
            <remarks/><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManagerDependent">
            <summary>
            CogJobManagerDependent contains all dependent mode only properties, 
            methods, and events.  Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.#ctor(Cognex.VisionPro.QuickBuild.CogJobManager)">
            <summary>
            CogJobManagerDependent. Currently not supported.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionToolLinkAdd(Cognex.VisionPro.QuickBuild.Implementation.CogVTLink)">
            <summary>
            VisionToolLinkAdd, duplicates are not permitted. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionToolLinkRemove(Cognex.VisionPro.QuickBuild.Implementation.CogVTLink)">
            <summary>
            VisionToolLinkRemove (removes all links which have the same
            content). Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionToolLinkRemove(System.String)">
            <summary>
            VisionToolLinkRemove (removes all links which have the same name).
            Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionToolLink(System.Int32)">
            <summary>
            Index Getter for VisionToolLink. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionToolLink(System.String)">
            <summary>
            Name Getter for VisionToolLink. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.OnVisionToolLinkAdded(System.String)">
            <summary> 
            Method responsible for notifiying registered objects of the event.
            Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.RealTimeResult">
            <summary>
            RealTimeResult. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.RealTimeResult(System.Int32,System.Boolean)">
            <summary>
            RealTimeResult with index. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.RealTimeQueueFlush">
            <summary>
            RealTimeQueueFlush. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.ResetAllStatistics">
            <summary>
            Reset all Statistics. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.ParentManager">
            <summary>
            Read-only property to get this object's parent manager.
            </summary>
            <value>Get the CogJobManager associated with this object.</value>
            <!-- No matching elements were found for the following include tag --><include file="k:\docvob\vx\nsrc\ProgrammingReference\src\netstore\QuickBuild\CogJobManagerDependent.xml" path="//member[@name=&quot;P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.ParentManager&quot;]/*"/>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.State">
            <summary>
            State. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionToolLinkCount">
            <summary>
            VisionToolLinkCount. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionToolLinkAdded">
            <summary>
            Raised when a vision tool link is added. 
            Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionToolLinkRemoved">
            <summary>
            Raised when vision tool link is removed. 
            Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.RealTimeQueueCount">
            <summary>
            RealTimeQueueCount. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.RealTimeQueueCapacity">
            <summary>
            RealTimeQueueCapacity. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.RealTimeResultAvailable">
            <summary>
            Raised when a new result is available in the RealTime 
            Queue. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.RealTimeQueueFlushed">
            <summary>
            Raised when the realTime queue is flushed.
            Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.RealTimeQueueOverflowed">
            <summary>
            Raised when the realTime queue overflows.
            Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.RealTimeResultRemoved">
            <summary>
            Raised when a result is removed from the RealTime Queue.
            Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionTool">
            <summary>
            VisionTool. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionToolSyncRoot">
            <summary>
            VisionToolSyncRoot. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionToolRunStatus">
            <summary>
            VisionToolRunStatus. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionToolError">
            <summary>
            Raised when a vision tool error occurs.
            Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionToolRunning">
            <summary>
            Raised when the dependent vision tool has started running
            Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.VisionToolRan">
            <summary>
            Raised when the dependent vision tool has started running
            Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.TotalDependentIterations">
            <summary>
            TotalDependentIterations. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.TotalVisionToolAccepts">
            <summary>
            TotalVisionToolAccept. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.TotalVisionToolWarnings">
            <summary>
            TotalVisionToolWarn. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.TotalVisionToolRejects">
            <summary>
            TotalFinalVisionToolReject. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.TotalVisionToolErrors">
            <summary>
            TotalVisionToolErrors. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.CogVisionToolLinkAddedEventHandler">
            <summary>
            Delegate for the VisionToolLinkAdded event. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.CogVisionToolLinkRemovedEventHandler">
            <summary>
            Delegate for the VisionToolLinkRemoved event. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.CogRealTimeResultAvailableEventHandler">
            <summary>
            Delegate for the RealTimeResultAvailable event. 
            Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.CogRealTimeQueueFlushedEventHandler">
            <summary>
            Delegate for the RealTimeQueueFlushed event. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.CogRealTimeQueueOverflowedEventHandler">
            <summary>
            Delegate for the RealTimeQueueOverflowed event. 
            Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.CogRealTimeResultRemovedEventHandler">
            <summary>
            Delegate for the RealTimeResultRemoved event. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.CogVisionToolErrorEventHandler">
            <summary>
            Delegate for the VisionToolError event. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.CogVisionToolRunningEventHandler">
            <summary>
            Delegate for the VisionToolRunning event. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobManagerDependent.CogVisionToolRanEventHandler">
            <summary>
            Delegate for the VisionToolRan event. Currently not supported (Dependent mode only).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogIOJMDeviceList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogIOHeartbeatData">
            <summary>
            This class defines a heartbeat signal
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogIOHeartbeatProcess">
            <summary>
            This class is used to generate heartbeat signals for
            Heartbeat and Job Running pulsed signals.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogIOHeartbeatProcess.Terminate">
            <summary>
            Terminates the heartbeat thread.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogIOHeartbeatProcess.HeartbeatProcess">
            <summary>
            Sends a heartbeat signal for all items in _heartbeatList.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogIOHeartbeatProcess.IsAlive">
            <summary>
            Returns true if the heartbeat thread is up and running.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOErrorFormat">
            <summary>
            This class defines the format of I/O Runtime Error
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOErrorLogger">
            <summary>
            This class is used to capture all I/O runtime errors fired by a Job or job manager.
            Each job fires IOError when an unexpected I/O error occurs at runtime.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOErrorLogger.SfAdded">
            <summary>When a new error is logged </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOErrorLogger.SfRemoved">
            <summary>When an error is removed </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOErrorLogger.SfCleared">
            <summary>When all errors are cleared </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOErrorLogger.SfNextSf">
            <summary> </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOErrorLogger.AddError(System.String,System.String)">
            <summary>
            Create a CogIOErrorFormat for the newly arrived error message
            and add it to the list. This routine automatically add a long 
            format timestamp.
            </summary>
            <param name="owner">Name of a job or job manager</param>
            <param name="msg">An error description</param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOErrorLogger.RemoveError(System.Int32)">
            <summary>
            Remove the error from index position of the list
            </summary>
            <param name="index">An index into the list. Throws when an illegal index is passed.</param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOErrorLogger.GetError(System.Int32)">
            <summary>
            Retrieve an error from the list from index position of the list.
            </summary>
            <param name="index">An index into the list. Throws when an illegal index is passed.</param>
            <returns>Returns an error</returns>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOErrorLogger.Clear">
            <summary>
            Removes all errors from the list
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOErrorLogger.ErrorCount">
            <summary>
            Returns the current error counts
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl">
            <summary>
            ManagerControl
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.#ctor(Cognex.VisionPro.QuickBuild.CogJobManager)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.#ctor">
            <summary>
            Private default constructor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.Shutdown">
            <summary>
            Shutdown
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.AllJobsStopped">
            <summary>
            AllJobsStopped helper
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.CleanupRunningList">
            <summary>
            CleanupRunningList
            </summary> 
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.IsCurrentlyRunning(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary>
            IsCurrentlyRunning
            </summary> 
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.ReleaseBalancedWorkSemaphore(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary>
            ReleaseBalancedWorkSemaphore
            </summary> 
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.AddJobToBalanacedReadyQueue(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary> 
            ReadyListAddJob
            </summary> 
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.BalancedPurgeJob(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary>
            BalancedPurgeJob
            </summary> 
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.AdjustBalancedStructures(System.Int32)">
            <summary>
            AdjustBalancedStructures
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.Run(System.Boolean)">
            <summary>
            Run -- called in dependent mode.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.Stop">
            <summary>
            Stop -- called in dependent mode.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.IsRunning">
            <summary>
            IsRunning
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.BalancedThreadTerminate">
            <summary>
            False to keep running, True to stop the thread
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.RunningListEmptySlotsCount">
            <summary>
            RunningListEmptySlotsCount
            </summary> 
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobManagerControl.VisionToolRunStatus">
            <summary>
            VisionToolRunStatus
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobResultHistoryConstants.CogQueueConstants">
            <summary>
            The CogQueueConstants enumerated type is used to identify each of the available result history queues.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobResultHistoryConstants.CogQueueConstants.All">
            <summary>
            The result queue that contains all results.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobResultHistoryConstants.CogQueueConstants.Failures">
            <summary>
            The result queue that contains only failing results (results with a run status of Reject or Error).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.ICogJobResultHistory.CurrentQueueChanged">
            <summary>
            Raised when the currently selected queue changes.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.ICogJobResultHistory.QueueItemsChanged">
            <summary>
            Raised when a major change is made to the currently selected queue contents - generally
            this occurs when a new queue item is pushed on, shifting all queue items by one.
            
            Every time a new item is added, either the QueueItemsChanged or LatestQueueItemChanged
            event will be raised (not both).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.ICogJobResultHistory.LatestQueueItemChanged">
            <summary>
            Raised when only the latest item (index 0) of the currently selected queue is changed.
            
            Every time a new item is added, either the QueueItemsChanged or LatestQueueItemChanged
            event will be raised (not both).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.ICogJobResultHistory.CurrentItemChanged">
            <summary>
            Raised when the current item is changed.  Note that the current item can change as a
            side-effect of changing the CurrentQueue.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.ICogJobResultHistory.CurrentItemIndexChanged">
            <summary>
            Raised when the current item index is changed.  Note that the current item can change as a
            side-effect of changing the CurrentQueue.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobResultHistory">
            <summary>
            CogJobResultHistory is a class for accumulating and managing queues of historical
            job results.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobResultHistory.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the Job for which history will be accumulated in this object.</param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobResultHistory.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the Job for which history will be accumulated in this object.</param>
            <param name="maxLength">The initial max queue length used for both the "all results" and "failing results" queues.</param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobResultHistory.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the Job for which history will be accumulated in this object.</param>
            <param name="allMaxLength">The initial max queue length used for the "all results" queue.</param>
            <param name="failureMaxLength">The initial max queue length used for the "failing results" queue.</param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobResultHistory.ToString">
            <summary>
            Return the name of this object.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobResultHistory.AddNewUserResult(Cognex.VisionPro.ICogRecord)">
            <summary>
            Add a new user result to this history.  The result will be added to each queue, as appropriate.
            </summary>
            TBD - note on push or replace behavior depending on CurrentItem.
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobResultHistory.GetQueueViewer(Cognex.VisionPro.QuickBuild.CogJobResultHistoryConstants.CogQueueConstants)">
            <summary>
            Get access to the specified result history queue.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobResultHistory.OnCurrentQueueChanged">
            <summary>
            Raise the CurrentQueueChanged event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobResultHistory.OnQueueItemsChanged">
            <summary>
            Raise the OnQueueItemsChanged event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobResultHistory.OnLatestQueueItemChanged">
            <summary>
            Raise the OnLatestQueueItemChanged event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobResultHistory.OnCurrentItemChanged">
            <summary>
            Raise the OnCurrentItemChanged event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.CogJobResultHistory.OnCurrentItemIndexChanged">
            <summary>
            Raise the OnCurrentItemIndexChanged event.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobResultHistory.CurrentQueue">
            <summary>
            Select one of the available result history queues.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobResultHistory.CurrentItem">
            <summary>
            Get or set the currently selected item.  This item must be in the CurrentQueue.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobResultHistory.CurrentItemIndex">
            <summary>
            Get or set the currently selected item by index.  This index must be in the CurrentQueue.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobResultHistory.CurrentQueueViewer">
            <summary>
            Get access to the currently selected result history queue.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.CogJobResultHistory.Running">
            <summary>
            Get whether the queues are running or not.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobResultHistory.CurrentQueueChanged">
            <summary>
            Raised when the currently selected queue changes.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobResultHistory.QueueItemsChanged">
            <summary>
            Raised when a major change is made to the currently selected queue contents - generally
            this occurs when a new queue item is pushed on, shifting all queue items by one.
            
            Every time a new item is added, either the QueueItemsChanged or LatestQueueItemChanged
            event will be raised (not both).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobResultHistory.LatestQueueItemChanged">
            <summary>
            Raised when only the latest item (index 0) of the currently selected queue is changed.
            
            Every time a new item is added, either the QueueItemsChanged or LatestQueueItemChanged
            event will be raised (not both).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobResultHistory.CurrentItemChanged">
            <summary>
            Raised when the current item is changed.  Note that the current item can change as a
            side-effect of changing the CurrentQueue.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobResultHistory.CurrentItemIndexChanged">
            <summary>
            Raised when the current item index is changed.  Note that the current item can change as a
            side-effect of changing the CurrentQueue.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.CogJobResultHistoryCollection">
            <summary>
            CogJobResultHistoryCollection
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.CogJobResultHistoryCollection.SfNextSf">
            <summary>
            Next state flag to be used in derived classes.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobResultHistoryGated.CurrentQueueChanged">
            <summary>
            Raised when the currently selected queue changes.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobResultHistoryGated.QueueItemsChanged">
            <summary>
            Raised when a major change is made to the currently selected queue contents - generally
            this occurs when a new queue item is pushed on, shifting all queue items by one.
            
            Every time a new item is added, either the QueueItemsChanged or LatestQueueItemChanged
            event will be raised (not both).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobResultHistoryGated.LatestQueueItemChanged">
            <summary>
            Raised when only the latest item (index 0) of the currently selected queue is changed.
            
            Every time a new item is added, either the QueueItemsChanged or LatestQueueItemChanged
            event will be raised (not both).
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobResultHistoryGated.CurrentItemChanged">
            <summary>
            Raised when the current item is changed.  Note that the current item can change as a
            side-effect of changing the CurrentQueue.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.QuickBuild.CogJobResultHistoryGated.CurrentItemIndexChanged">
            <summary>
            Raised when the current item index is changed.  Note that the current item can change as a
            side-effect of changing the CurrentQueue.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEventTypeConstants">
            <summary>
             
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEventTypeConstants.Simple">
            <summary>
            
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEventTypeConstants.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEvent.#ctor(System.String,System.String,Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEventTypeConstants)">
            <summary>
            
            </summary>
            <param name="longEventName"></param>
            <param name="shortEventName"></param>
            <param name="eventType"></param>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEvent.LongEventName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEvent.ShortEventName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEvent.EventType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEvent.InternalType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEventLogger">
            <summary>
            Real=time Event Logger 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEventLogger.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEventLogger.SetupEvent(System.String,System.String,Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEventTypeConstants)">
            <summary>
            
            </summary>
            <param name="longEventName"></param>
            <param name="shortEventName"></param>
            <param name="eventType"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEventLogger.LogEvent(System.String)">
            <summary>
            
            </summary>
            <param name="shortEventName"></param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEventLogger.LogEvent(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="shortEventName"></param>
            <param name="valueInput"></param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogRTEventLogger.Dump">
            <summary>
            
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl">
            <summary>
            JobControl
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.#ctor(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.#ctor">
            <summary>
            Private default constructor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.Shutdown">
            <summary>
            Shutdown
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.ReleaseIndependentWorkSemaphore">
            <summary>
            ReleaseIndependentWorkSemaphore (internal use only)
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.Run(System.Boolean)">
            <summary>
            Run
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.RunBusy(System.Boolean)">
            <summary>
            Tell the system that a run is about to start (i.e. busy)
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.RunSetup">
            <summary>
            One time setups to start running
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.RunGo">
            <summary>
            RunGo
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.IsRunning">
            <summary>
            IsRunning
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.MaybeFireJobStopped">
            <summary>
            MaybeFireJobStopped
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.VisionToolRunStatus">
            <summary>
            VisionToolRunStatus
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.CurrentAcquisitionCount">
            <summary>
            Current number of acquisitions
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.AcquisitionRunStatus">
            <summary>
            AcquisitionRunStatus
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogJobControl.RunStatus">
            <summary>
            RunStatus
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOHandler">
            <summary>
            Summary description for CogIOHandler.
            Do not persist the instance of this class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOHandler.#ctor(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary>
            An instance of this class object is created when a new CogJob is created. 
            Normally, this newly created CogJob does not have its CogJobManager until
            it is added to CogJobManager's CogJob list.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOHandler.IOQueueFlush">
            <summary>
            Flush/clear the discrete queue of all items.  This method cannot be called while the CogJob is running.
            For Cognex internal use only.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOHandler.Run">
            <summary>
            Walk through each device and verify whether each device can be successfully opened.
            If not, throw an error. Cognex internal use only.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOHandler.Stop">
            <summary>
            This is a non-blocking function call to prevent the job from getting into a weird state.
            Cognex internal use only.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOHandler.Shutdown">
            <summary>
            Terminate all running threads. Cognex internal use only.
            This is called when the user resets a job or shutting down the CogJobManager.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOHandler.ValidateUsedIODevices">
            <summary>
            There are two code paths to here--one from CogJobManager's RunCommon and
            the other is from Job's Run or RunContinuous. When CogJobManager's RunCommon
            is called, this method is called twice.
            It treats the following cases as error.
            * Missing device is used for CTS input (post 4.2)
            * Data Ready line is defined on a missing device or on a disabled device, 
              but tool output lines are defined on a device that is working.
            * Data Ready is missing when tool output lines are defined.
            * Acq complete is defined on a missing device, but not on a disabled device.
            * Move Part is defined on a missing device, but not on a disabled device
            * Job Running is defined on a missing device, but not on a disabled device
            * An output line is defined on an input line. (IOConfig mistmatch can cause this).
            * An output line is shared among CogJobs.
            Don't check for input lines.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOHandler.ValidateIOConnections">
            <summary>
            Call this function when a job is added to the job manager.
            This function walks through each line used by itself
            and enable the line if it is possible.
            This routine should never throw an exception.
            Returns all illegal lines found with the job.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOHandler.IOQueueCapacity">
            <summary>
            Get or set the discrete queue capacity. For Cognex internal use only.
            </summary>
            <value>The capacity of the discrete queue is the number of discrete queue items which can be queued up when the job is running.</value>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOHandler.CogIOThreadsState">
            <summary>
            Internal class which represents the current state of the threads in a job
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOHandler.CogIOThreadsState.#ctor">
            <summary>
            Default constructor (internal only)
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIOHandler.CogIOThreadsState.IsRunning">
            <summary>
            IsRunning (internal only)
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIODiscreteDeviceManager.ValidateIOConnections">
            <summary>
            Call this function when a job is added to the job manager.
            This function walks through each line used by itself
            and enable the line if it is possible.
            This routine should never throw an exception.
            Returns all illegal lines found with the job.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIODiscreteDeviceManager.ValidateUsedIODevices">
            <summary>
            There are two code paths to here--one from CogJobManager's RunCommon and
            the other is from Job's Run or RunContinuous. When CogJobManager's RunCommon
            is called, this method is called twice.
            It treats the following cases as error.
            * Missing device is used for CTS input (post 4.2)
            * Data Ready line is defined on a missing device or on a disabled device, 
              but tool output lines are defined on a device that is working.
            * Data Ready is missing when tool output lines are defined.
            * Acq complete is defined on a missing device, but not on a disabled device.
            * Move Part is defined on a missing device, but not on a disabled device
            * Job Running is defined on a missing device, but not on a disabled device
            * An output line is defined on an input line. (IOConfig mistmatch can cause this).
            * An output line is shared among CogJobs.
            Don't check for input lines.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIODiscreteDeviceManager.Shutdown">
            <summary>
            Call only when the job is going away
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIODiscreteDeviceManager.CogIOThreadsState">
            <summary>
            Internal class which represents the current state of the threads in a job
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIODiscreteDeviceManager.CogIOThreadsState.#ctor">
            <summary>
            Default constructor (internal only)
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogIODiscreteDeviceManager.CogIOThreadsState.IsRunning">
            <summary>
            IsRunning (internal only)
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogInputImageTool">
            <summary>
            CogInputImageTool. Internal use only.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogInputImageTool.SfInputImage">
            <summary> SfInputImage. Internal use only.</summary>
        </member>
        <member name="F:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogInputImageTool.SfNextSf">
            <summary> SfNextSf. Internal use only.</summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogInputImageTool.#ctor">
            <summary>
            CogInputImageTool. Internal use only.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogInputImageTool.#ctor(Cognex.VisionPro.QuickBuild.Implementation.Internal.CogInputImageTool)">
            <summary>
            CogInputImageTool. Internal use only.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogInputImageTool.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            CogInputImageTool. Internal use only.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogInputImageTool.Clone">
            <summary>
            IClone. nternal use only.
            </summary>
            <returns>An object</returns>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogInputImageTool.InternalCreateCurrentRecord(Cognex.VisionPro.ICogRecord,System.Int32)">
            <summary>
            InternalCreateCurrentRecord. Internal use only.
            </summary>
            <param name="newRecord"></param>
            <param name="currentRecordEnable"></param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogInputImageTool.InternalCreateLastRunRecord(Cognex.VisionPro.ICogRecord,System.Int32,System.Int32)">
            <summary>
            InternalCreateLastRunRecord. Internal use only.
            </summary>
            <param name="newRecord"></param>
            <param name="lastRunRecordEnable"></param>
            <param name="lastRunRecordDiagEnable"></param>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogInputImageTool.InternalRun(System.String@)">
            <summary>
            InternalRun. Internal use only.
            </summary>
            <param name="message"></param>
            <returns>CogToolResultConstants</returns>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogInputImageTool.InputImage">
            <summary>
            InputImage. Internal use only.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogInputImageTool.SelectionNotification">
            <summary>
            Notify when this tool is selected by the user
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogGarbageCollector">
            <summary>
            CogGarbageCollector
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogGarbageCollector.#ctor(Cognex.VisionPro.QuickBuild.CogJobManager)">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogGarbageCollector.#ctor">
            <summary>
            Private Constructor 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogGarbageCollector.RunGarbageCollector">
            <summary>
            This is internal only because in dependent mode, the dependent 
            thread needs to call the garbage collector.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogGarbageCollector.GarbageCollection(System.Object,Cognex.VisionPro.QuickBuild.CogJobActionEventArgs)">
            <summary>
            Garbage Collection Request Event handler
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogGarbageCollector.AddJob(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary>
            AddJob (must be called by JobManager when adding jobs)
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogGarbageCollector.RemoveJob(Cognex.VisionPro.QuickBuild.CogJob)">
            <summary>
            RemoveJob (must be called by JobManager when removing jobs)
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.QuickBuild.Implementation.Internal.CogGarbageCollector.Shutdown">
            <summary>
            Shutdown the garbage collector
            </summary>
        </member>
    </members>
</doc>
