<?xml version="1.0"?>
<doc>
    <assembly>
        "Cognex.VisionPro.Blob"
    </assembly>
    <members>
        <member name="M:Cognex.VisionPro.Blob.CogBlobTool.Clone">
            <summary>
Create a duplicate of this CogBlobTool object.
</summary>
            <returns>
A newly created duplicate of this CogBlobTool object.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobTool.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogBlobTool object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobTool.Copy">
            <summary>
Returns a copy of the constructor object.
For Cognex Internal use only.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobTool.ConstructSubRecords(Cognex.VisionPro.ICogRecord,System.Int32)">
            <summary>
Constructs the record's SubRecords.
For Cognex Internal use only.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobTool.ConstructAnnotation(Cognex.VisionPro.ICogRecord,System.Int32)">
            <summary>
Constructs the record's Annotation.
For Cognex Internal use only.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobTool.ConstructContent(Cognex.VisionPro.ICogRecord,System.Int32)">
            <summary>
Constructs the record's Content.
For Cognex Internal use only.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordDiagEnable">
            <summary>
Enable creation of records by bitwise ORing the
appropriate LastRunRecordDiagConstants. These are diagnostic records
that may cause the Tool to have a longer execution time.
</summary>
            <remarks>
Enable the
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">
creation</see> of records by bitwise ORing the appropriate
<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants" />.
These are diagnostic records that may cause the tool to have a longer
execution time.
</remarks>
            <value>
The default is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants">
InputImageByReference</see>.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfLastRunRecordDiagEnable" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the
appropriate LastRunRecordConstants.
</summary>
            <remarks>
Enable the
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord">creation</see> 
of records by bitwise ORing the appropriate LastRunRecordConstants.
</remarks>
            <value>
The default is
<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants">
BlobImage</see> +
<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants">
BlobImageUnfiltered</see> +
<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants">
ResultsBoundary</see>.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfLastRunRecordEnable" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobTool.CurrentRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the
appropriate CurrentRecordConstants.
</summary>
            <remarks>
Enable the 
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> 
of records by bitwise ORing the appropriate
<see cref="T:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants" />.
</remarks>
            <value>
The default is
<see cref="T:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants">
InputImage</see> + 
<see cref="T:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants">
Region</see> +
<see cref="T:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants">
Histogram</see>.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfCurrentRecordEnable" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobTool.Results">
            <summary>
Results from the last invocation of Run.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobTool.Region">
            <summary>
Specifies the region of the InputImage that will be used
to perform blob analysis.  The ICogBlobParams.RegionMode property
specifies exactly how the ROI will be applied to the InputImage.
</summary>
            <remarks>
The blob tool region of interest.	The
<see cref="P:Cognex.VisionPro.Blob.CogBlob.RegionMode" />
determines how the input region is used to control which
pixels are analyzed. If no region is supplied, the tool
performs blob analysis on the entire 
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />.
</remarks>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfRegion" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage">
            <summary>
Image used to perform blob analysis. The Region
property can be used to specify that blob analysis will be performed
only on a portion of the InputImage. Blob analysis is performed on
the entire InputImage if Region is Nothing.
</summary>
            <value>
The default is NULL.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfInputImage" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobTool.RunParams">
            <summary>
The run parameters for this blob tool.
</summary>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfRunParams" />
                    </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobTool.Run">
            <summary>
Runs the tool using the current parameter settings.
</summary>
            <remarks>
                <para>
Performs blob analysis on the
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />
using the supplied
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.RunParams" />.
You can specify that analysis be limited to part of the input
image by supplying a value for the 
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.Region" />
property.
</para>
                <para>
Note: This method does not actually raise the exceptions
listed below. Use the
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.RunStatus" />
property to obtain a
<see cref="T:Cognex.VisionPro.ICogRunStatus" />
reference. Then use its
<see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" />
property to see if the Run method raised any exceptions.
</para>
            </remarks>
            <event cref="E:Cognex.VisionPro.ICogTool.Running">
Fires before the tool runs.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the tool runs. If the run was successful, results are
generated; if the run was not successful, no results are generated
and the previous results are cleared. Use
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.RunStatus" />
after
<see cref="T:Cognex.VisionPro.Blob.CogBlobTool" />
returns or in a
<see cref="E:Cognex.VisionPro.ICogTool.Ran">
event handler</see> to determine whether a run was successful or
unsuccessful.
</para>
                <para>
The following state flags may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobTool.SfResults" />
                    </item>
                </list>
            </event>
            <event cref="E:Cognex.VisionPro.ICogTool.Ran">
Fires after the tool runs.
</event>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">
                <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />
is NULL.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">
                <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />
is not allocated.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException">
The selected space of
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.Region" />
is not a valid space in
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException">
                <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.Region" />
is completely outside of
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobNoSubtractionImageException">
The
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">
segmentation mode</see> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see> and a NULL
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />
was supplied.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobNoSubtractionImageException">
The
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">
segmentation mode</see> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see> and the
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />
had no pixels.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobSubtractionImageAlignmentErrorException">
The
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">
segmentation mode</see> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see> and the
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />
does not completely overlap
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.Region" />
of
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />.
This is usually because the subtraction image is too small or
because incorrect offset values were supplied.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobDuplicateMeasureException">
The collection of
<see cref="P:Cognex.VisionPro.Blob.CogBlob.RunTimeMeasures">
run-time measures</see> contains a duplicate. Only one object
per measure is allowed.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException">
One or more of the following measures was specified for
whole-image blob analysis:
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
BoundaryPixelLength</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
Perimeter</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
Acircularity</see>, or
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
AcircularityRms</see>.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobDynamicThresholdNotComputedException">
The
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">
segmentation mode</see> is  
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
HardDynamicThreshold</see> but a dynamic threshold could not be
computed, probably because you specified the same value for both the
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow">
low</see> and
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh">
high</see> tail percentages.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException">
                <see cref="P:Cognex.VisionPro.Blob.CogBlobTool.RunParams" />
is NULL.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobSaveSegmentedImageErrorException">
                <see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImage" />
is set to False but 
<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants">
SegmentedImage</see> is set in
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordDiagEnable" />.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobSaveSegmentedImageBeforeMaskingErrorException">
                <see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMasking" />
is set to False but 
<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants">
SegmentedImageBeforeMasking</see> is set in
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordDiagEnable" />.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobSaveSegmentedImageBeforeMorphologyErrorException">
                <see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMorphology" />
is set to False but 
<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants">
SegmentedImageBeforeMorphology</see> is set in
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordDiagEnable" />.
</exception>
            <example>
                <code lang="C#">
        using Cognex.VisionPro;
        using Cognex.VisionPro.Blob;
        using Cognex.VisionPro.ImageFile;

        // This function finds two holes in the bracket.
        public void FindBlobs()
        {
        CogImageFileTool mCogImageFileTool = new CogImageFileTool();
        CogBlobTool mCogBlobTool = new CogBlobTool();
        CogBlobMeasure mAreaMeasure = new CogBlobMeasure();
        CogBlobMeasure mElongationMeasure = new CogBlobMeasure();
        CogBlobResultCollection mBlobResults;

        // Load the breacket image as the input image.
        mCogImageFileTool.Operator.Open(@"C:\Program Files\Cognex\VisionPro\images\bracket_std.idb",
        CogImageFileModeConstants.Read);
        mCogImageFileTool.Run();

        mCogBlobTool.InputImage = (CogImage8Grey)mCogImageFileTool.OutputImage;
        mCogBlobTool.RunParams.SegmentationParams.Polarity = CogBlobSegmentationPolarityConstants.LightBlobs;

        // Set Area Filter, select blobs whose area is between 450 and 500.
        mAreaMeasure.Measure = CogBlobMeasureConstants.Area;
        mAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
        mAreaMeasure.FilterRangeHigh = 550;
        mAreaMeasure.FilterRangeLow = 450;
        mAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

        // Set Elongation Filter from 0.8 to 1.2
        mElongationMeasure.Measure = CogBlobMeasureConstants.Elongation;
        mElongationMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
        mElongationMeasure.FilterRangeHigh = 1.2;
        mElongationMeasure.FilterRangeLow = 0.8;
        mElongationMeasure.Mode = CogBlobMeasureModeConstants.Filter;

        mCogBlobTool.RunParams.RunTimeMeasures.Add(mAreaMeasure);
        mCogBlobTool.RunParams.RunTimeMeasures.Add(mElongationMeasure);

        mCogBlobTool.Run();
        mBlobResults = mCogBlobTool.Results.GetBlobs();

        Console.WriteLine("Number of Blobs: {0}", mBlobResults.Count);

        // Print information for each blob found
        foreach (CogBlobResult blobResult in mBlobResults)
        {
        Console.WriteLine("ID: {0}, CenterX: {1}, CenterY: {2}, Area: {3}",
        blobResult.ID, blobResult.CenterOfMassX, blobResult.CenterOfMassY, blobResult.Area);
        }
        }
</code>
                <code lang="Visual Basic">
        Imports Cognex.VisionPro
        Imports Cognex.VisionPro.Blob
        Imports Cognex.VisionPro.ImageFile

        Public Sub FindBlobs()
        ' This function finds two holes in the bracket.
        Dim myCogImageFileTool As CogImageFileTool = New CogImageFileTool()
        Dim myCogBlobTool As CogBlobTool = New CogBlobTool()
        Dim myAreaMeasure As CogBlobMeasure = New CogBlobMeasure()
        Dim myElongationMeasure As CogBlobMeasure = New CogBlobMeasure()
        Dim myBlobResults As CogBlobResultCollection

        ' Load the breacket image as the input image.
        myCogImageFileTool.Operator.Open("C:\Program Files\Cognex\VisionPro\images\bracket_std.idb", CogImageFileModeConstants.Read)
        myCogImageFileTool.Run()

        myCogBlobTool.InputImage = CType(myCogImageFileTool.OutputImage, CogImage8Grey)
        myCogBlobTool.RunParams.SegmentationParams.Polarity = CogBlobSegmentationPolarityConstants.LightBlobs

        ' Set Area Filter
        myAreaMeasure.Measure = CogBlobMeasureConstants.Area
        myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
        myAreaMeasure.FilterRangeHigh = 550
        myAreaMeasure.FilterRangeLow = 450
        myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

        ' Set Elongation Filter
        myElongationMeasure.Measure = CogBlobMeasureConstants.Elongation
        myElongationMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
        myElongationMeasure.FilterRangeHigh = 1.2
        myElongationMeasure.FilterRangeLow = 0.8
        myElongationMeasure.Mode = CogBlobMeasureModeConstants.Filter

        myCogBlobTool.RunParams.RunTimeMeasures.Add(myAreaMeasure)
        myCogBlobTool.RunParams.RunTimeMeasures.Add(myElongationMeasure)

        myCogBlobTool.Run()
        myBlobResults = myCogBlobTool.Results.GetBlobs()

        Console.WriteLine("Number of Blobs: {0}", myBlobResults.Count)

        ' Print information for each blob found
        For Each blobResult As CogBlobResult In myBlobResults
        Console.WriteLine("ID: {0}, CenterX: {1}, CenterY: {2}, Area: {3}", _
        blobResult.ID, blobResult.CenterOfMassX, blobResult.CenterOfMassY, blobResult.Area)
        Next
        End Sub
</code>
            </example>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobTool.OnDeserialization(System.Object)">
            <summary>
Perform post-deserialization setup.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobTool.Finalize">
            <summary>
Finalize this CogBlobTool.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobTool.Dispose">
            <summary>
Destruct this CogBlobTool.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobTool.#ctor(Cognex.VisionPro.Blob.CogBlobTool)">
            <summary>
Constructs a new instance of this class as a deep copy of the
given instance.
</summary>
            <param name="Other">
The CogBlob object to be copied. May not be null.
</param>
            <exception cref="System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobTool.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfResults">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Results may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfRunParams">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by RunParams may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfInputImage">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by InputImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfRegion">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Region may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfCurrentRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CurrentRecordEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfLastRunRecordDiagEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by LastRunRecordDiagEnable may
have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobTool.SfLastRunRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by LastRunRecordEnable may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobTool">
            <summary>
This is the class for the CogBlobTool. The CogBlobTool
encapsulates all of the classes required to perform a blob
analysis inspection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlob.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion)">
            <summary>
Performs blob analysis on the provided InputImage and
optional Region, creating a CogBlobResults object which provides the
results of the analysis. If Region is nothing then blob analysis will
be performed on the entire InputImage.
</summary>
            <param name="inputImage">
The input image to analyze. May be either a CogImage8Grey
or a CogImage16Grey.
</param>
            <param name="region">
An optional <see cref="T:Cognex.VisionPro.CogRegion" />. If supplied,
only the pixels which lie within this region (subject to the
value of <see cref="P:Cognex.VisionPro.Blob.CogBlob.RegionMode" />)
will be analyzed.
</param>
            <returns>
A
<see cref="T:Cognex.VisionPro.Blob.CogBlobResults" />
containing the results of the analysis.
</returns>
            <remarks>
                <para>
Performs blob analysis on the supplied
<paramref name="inputImage" /> and optional 
<paramref name="region" />, creating a
<see cref="T:Cognex.VisionPro.Blob.CogBlobResults" />
object which provides the results of the analysis. If
<paramref name="region" /> is nothing then blob analysis
will be performed on the entire input image.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">
                <paramref name="inputImage" /> is NULL.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">
                <paramref name="inputImage" /> is not allocated.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException">
The selected space of <paramref name="region" /> is not
a valid space in <paramref name="inputImage" />.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException">
                <paramref name="region" /> is completely outside of
<paramref name="inputImage" />.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobNoSubtractionImageException">
The
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">
segmentation mode</see> is
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see> and the
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />
was NULL.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobNoSubtractionImagePixelsException">
The
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">
segmentation mode</see> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see> and the
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />
has no pixels.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobSubtractionImageAlignmentErrorException">
The
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">
segmentation mode</see>  is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see> and the
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />
does not completely overlap <paramref name="region" /> of
<paramref name="inputImage" />. This is usually because the subtraction
image is too small or because incorrect offset values were supplied.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobDuplicateMeasureException">
The collection of
<see cref="P:Cognex.VisionPro.Blob.CogBlob.RunTimeMeasures">
run-time measures</see> contains a duplicate. Only one object
per measure is allowed.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException">
One or more of the following measures was specified for whole-image blob
analysis:
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
BoundaryPixelLength</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
Perimeter</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
Acircularity</see>, or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
AcircularityRms</see>.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobDynamicThresholdNotComputedException">
The
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">
segmentation mode</see> is  
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
HardDynamicThreshold</see> but a dynamic threshold could not be
computed, probably because you specified the same value for both the
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow">
low</see> and
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh">
high</see> tail percentages.
</exception>
            <example>
                <code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image' txtUtil is a text box
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
</code>
                <code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image' txtUtil is a text box
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.ComputeBlobRLE">
            <summary>
If false then improve blob processing speed by not saving the
run lengths of regions. This will make blob boundaries, blob
perimeters, and blob images unavailable.
</summary>
            <value>
Whether or not run lengths of regions should be saved during blob
processing. Default is True.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfComputeBlobRLE" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.ComputeTopology">
            <summary>
If false then improve blob processing speed by not computing the
parent - child relationships between regions.
</summary>
            <value>
Whether or not parent - child relationships should be computed
during blob processing. Default is True.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfComputeTopology" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.ComputeInertia">
            <summary>
If false then improve blob processing speed by not computing the
inertia, principal inertia, angle, and elongation.
</summary>
            <value>
Whether or not inertia, principal inertia, angle, and elongation
should be computed during blob processing. Default is True.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfComputeInertia" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.InputImageMask">
            <summary>
Mask indicating areas of Care (Non-Zero Mask Pixels) and
Don't Care (Zero). Don't Care areas are treated as background/holes
when performing grey scale connectivity. The mask is aligned to the
InputImage using the InputImageMaskOffsetX &amp; Y values.
</summary>
            <remarks>
                <para>
A mask <see cref="T:Cognex.VisionPro.CogImage8Grey" />
indicating areas of "Care" and "Don't Care". 
Pixels with nonzero values are interpreted as "Care"
pixels: image pixels that correspond to "Care" pixels
in the mask are treated normally. Pixels with zero values
are interpreted as "Don't Care" pixels: image pixels that
correspond to "Don't Care" pixels in the mask are always treated
as background pixels (or assigned a label of 0 if you are
using labeled connectivity).
</para>
                <para>
The mask is aligned to the input image using the 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.InputImageMaskOffsetX" />
and
<see cref="P:Cognex.VisionPro.Blob.CogBlob.InputImageMaskOffsetY" />
functions.
</para>
            </remarks>
            <value>
The default is a NULL image.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfInputImageMask" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.RunTimeMeasures">
            <summary>
A collection indicating how the specified measures will
be used during execution of blob analysis. Blob measures can either
be used as filter criteria or precomputed such that the time
required to calculate the measure is part of the blob execution time.
</summary>
            <remarks>
                <para>
A collection of
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" />
objects indicating how the specified measures will be used during
execution of blob analysis. Blob measures can either be used as
filter criteria or precomputed such that the time required to
calculate the measure is part of the blob execution time.
</para>
                <para>
You must sink change events from the <italic>collection</italic>
to be notified when the measures change. This function only
generates an event when the reference to the collection changes.
</para>
            </remarks>
            <value>
The default is an empty collection.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfRunTimeMeasures" />
                    </item>
                </list>
            </event>
            <example>
                <code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
</code>
                <code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.SegmentationParams">
            <summary>
Interface which allows the user to select and configure
the desired method of image segmentation.
</summary>
            <remarks>
                <para>
An
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" />
that determines how the image is segmented into object and background
pixels.
</para>
            </remarks>
            <value>
The default is a default-constructed
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" />
object.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSegmentationParams" />
                    </item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
The supplied value is NULL.
</exception>
            <example>
                <code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
</code>
                <code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.MorphologyOperations">
            <summary>
A collection of CogBlobMorphologyConstants indicating
which morphology operations are to be performed on the segmented image.
The operations are performed in the order in which they are added to
the collection. Operations can be added multiple times.
</summary>
            <remarks>
                <para>
A collection of
<see cref="T:Cognex.VisionPro.Blob.CogBlobMorphologyConstants" />
indicating which morphology operations are to be performed on the
segmented image. The operations are performed in the order in which
they are added to the collection. Operations can be added multiple
times.
</para>
            </remarks>
            <value>
The default is an empty collection.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfMorphologyOperations" />
                    </item>
                </list>
            </event>
            <example>
                <code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim myImage As CogImage8Grey
    myBlob.SaveSegmentedImage = True
    myBlob.SaveSegmentedImageBeforeMorphology = True
    myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.DilateSquare)
    myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.OpenSquare)
    myBlobResults = myBlob.Execute(mobjImage, r)
    TextBox1.Text = myBlobResults.GetBlobs.Count
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.BeforeMorphology, True)
    cdDisp.Image = myImage
    MsgBox("next")
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.cogBlobSegmentedImage, True)
    cdDisp.Image = myImage
    End Sub
</code>
                <code lang="C#">
   using Cognex.VisionPro; 
   using Cognex.VisionPro.Blob;
   
      private void doBlob()
    {
    CogBlob myBlob=new CogBlob(); 
    CogBlobResults myBlobResults; 
    CogImage8Grey myImage; 
    myBlob.SaveSegmentedImage = true;
    myBlob.SaveSegmentedImageBeforeMorphology = true;
    myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.DilateSquare);
    myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.OpenSquare);
    myBlobResults = myBlob.Execute(mobjImage, r);
    textBox1.Text =  myBlobResults.GetBlobs(true).Count.ToString();
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.BeforeMorphology, true);
    cdDisp.Image = myImage;
    MessageBox.Show("next");
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.cogBlobSegmentedImage, true);
    cdDisp.Image = myImage;
    }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.SortMeasure">
            <summary>
The blob measure that will be used for sorting the
filtered collection of blobs. SortMeasure is only used if SortEnabled
is true.
</summary>
            <remarks>
                <para>
The <see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
blob measure</see> that will be used for sorting the filtered
collection of blobs.
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SortMeasure" />
is only used if
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SortEnabled" /> is true.
</para>
            </remarks>
            <value>
The default is
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
Area</see></value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSortMeasure" />
                    </item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
The supplied value is not a member of
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants" /></exception>
            <example>
                <code lang="Visual Basic">
   Imports Cognex.VisionPro
   Imports Cognex.VisionPro.Blob
   
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim smallestPerimeter As Double
    Dim largestPerimeter As Double

    myBlob.SortEnabled = True
    myBlob.SortMeasure = CogBlobMeasureConstants.Perimeter
    myBlob.SortAscending = False
    myBlobResults = myBlob.Execute(mobjImage, r)

    TextBox1.Text = myBlobResults.GetBlobs.Count

    largestPerimeter = myBlobResults.GetBlobs.Item(0).Perimeter
    smallestPerimeter = myBlobResults.GetBlobs.Item(myBlobResults.GetBlobs.Count - 1).Perimeter

    MsgBox("Largest Perimeter: " + largestPerimeter + vbCr + " Smallest Perimeter: " + smallestPerimeter)
  End Sub
</code>
                <code lang="C#">
     using Cognex.VisionPro; 
     using Cognex.VisionPro.Blob;
     
      private void doBlob()
    {
    CogBlob myBlob=new CogBlob();  
    CogBlobResults myBlobResults; 
    double smallestPerimeter; 
    double largestPerimeter; 
    myBlob.SortEnabled = true;
    myBlob.SortMeasure = CogBlobMeasureConstants.Perimeter;
    myBlob.SortAscending = false;
    myBlobResults = myBlob.Execute(mobjImage, r);
    textBox1.Text = myBlobResults.GetBlobs().Count.ToString();
    largestPerimeter = myBlobResults.GetBlobs()[0].Perimeter;
    smallestPerimeter = myBlobResults.GetBlobs()[myBlobResults.GetBlobs().Count - 1].Perimeter;
    MessageBox.Show ("Largest Perimeter: " + largestPerimeter + "  Smallest Perimeter: " + smallestPerimeter);
    }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.SortAscending">
            <summary>
A value of True will sort the blobs in ascending order.
SortAscending is only used if SortEnabled is true.
</summary>
            <remarks>
                <para>
A value of True will sort the blobs in ascending order.
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SortAscending" />
is only used if
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SortEnabled" /> is true.
</para>
            </remarks>
            <value>
The default is False.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSortAscending" />
                    </item>
                </list>
            </event>
            <example>
                <code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim smallestPerimeter As Double
    Dim largestPerimeter As Double

    myBlob.SortEnabled = True
    myBlob.SortMeasure = CogBlobMeasureConstants.Perimeter
    myBlob.SortAscending = False
    myBlobResults = myBlob.Execute(mobjImage, r)

    TextBox1.Text = myBlobResults.GetBlobs.Count

    largestPerimeter = myBlobResults.GetBlobs.Item(0).Perimeter
    smallestPerimeter = myBlobResults.GetBlobs.Item(myBlobResults.GetBlobs.Count - 1).Perimeter

    MsgBox("Largest Perimeter: " + largestPerimeter + vbCr + " Smallest Perimeter: " + smallestPerimeter)
  End Sub
</code>
                <code lang="C#">
     using Cognex.VisionPro; 
     using Cognex.VisionPro.Blob;

      private void doBlob()
    {
    CogBlob myBlob=new CogBlob();  
    CogBlobResults myBlobResults; 
    double smallestPerimeter; 
    double largestPerimeter; 
    myBlob.SortEnabled = true;
    myBlob.SortMeasure = CogBlobMeasureConstants.Perimeter;
    myBlob.SortAscending = false;
    myBlobResults = myBlob.Execute(mobjImage, r);
    textBox1.Text = myBlobResults.GetBlobs().Count.ToString();
    largestPerimeter = myBlobResults.GetBlobs()[0].Perimeter;
    smallestPerimeter = myBlobResults.GetBlobs()[myBlobResults.GetBlobs().Count - 1].Perimeter;
    MessageBox.Show ("Largest Perimeter: " + largestPerimeter + "  Smallest Perimeter: " + smallestPerimeter);
    }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.SortEnabled">
            <summary>
Enables the sorting of the filtered collection of blobs.
The SortMeasure and SortAscending properties indicate how the blobs
will be sorted.
</summary>
            <remarks>
                <para>
Enables the sorting of the filtered collection of blobs.  The 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SortMeasure" /> and 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SortAscending" />
properties indicate how the blobs will be sorted.
</para>
            </remarks>
            <value>
The default is True.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSortEnabled" />
                    </item>
                </list>
            </event>
            <example>
                <code lang="Visual Basic">
   Imports Cognex.VisionPro
   Imports Cognex.VisionPro.Blob
   
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim smallestPerimeter As Double
    Dim largestPerimeter As Double

    myBlob.SortEnabled = True
    myBlob.SortMeasure = CogBlobMeasureConstants.Perimeter
    myBlob.SortAscending = False
    myBlobResults = myBlob.Execute(mobjImage, r)

    TextBox1.Text = myBlobResults.GetBlobs.Count

    largestPerimeter = myBlobResults.GetBlobs.Item(0).Perimeter
    smallestPerimeter = myBlobResults.GetBlobs.Item(myBlobResults.GetBlobs.Count - 1).Perimeter

    MsgBox("Largest Perimeter: " + largestPerimeter + vbCr + " Smallest Perimeter: " + smallestPerimeter)
  End Sub
</code>
                <code lang="C#">
     using Cognex.VisionPro; 
     using Cognex.VisionPro.Blob;
     
      private void doBlob()
    {
    CogBlob myBlob=new CogBlob();  
    CogBlobResults myBlobResults; 
    double smallestPerimeter; 
    double largestPerimeter; 
    myBlob.SortEnabled = true;
    myBlob.SortMeasure = CogBlobMeasureConstants.Perimeter;
    myBlob.SortAscending = false;
    myBlobResults = myBlob.Execute(mobjImage, r);
    textBox1.Text = myBlobResults.GetBlobs().Count.ToString();
    largestPerimeter = myBlobResults.GetBlobs()[0].Perimeter;
    smallestPerimeter = myBlobResults.GetBlobs()[myBlobResults.GetBlobs().Count - 1].Perimeter;
    MessageBox.Show ("Largest Perimeter: " + largestPerimeter + "  Smallest Perimeter: " + smallestPerimeter);
    }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.RegionMode">
            <summary>
Specifies whether blob analysis will be performed
strictly within the confines of the region specified or whether blob
analysis will be performed within the image aligned bounding box of
the region.
</summary>
            <remarks>
                <para>
Specifies whether blob analysis will be performed strictly within
the confines of the region specified or whether blob analysis
will be performed within the image aligned bounding box of
the region.
</para>
                <para>
This property may only be set to one of the following values:
<see cref="T:Cognex.VisionPro.CogRegionModeConstants">
PixelAlignedBoundingBoxAdjustMask</see> or 
<see cref="T:Cognex.VisionPro.CogRegionModeConstants">
PixelAlignedBoundingBox</see>.
</para>
                <para>
If no Region argument is supplied to the
<see cref="M:Cognex.VisionPro.Blob.CogBlob.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion)" />
function, then this property is ignored.
</para>
            </remarks>
            <value>
The default is
<see cref="T:Cognex.VisionPro.CogRegionModeConstants">
PixelAlignedBoundingBoxAdjustMask</see></value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfRegionMode" />
                    </item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
The property is set to a value other than those specified above.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.InputImageMaskOffsetY">
            <summary>
Y offset value in pixels. The X &amp; Y offset values
measure the offset from the upper-left corner of the InputImage to the
upper-left corner of the InputImageMask, in image coordinates of the
InputImage.
</summary>
            <value>
The default is 0.0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfInputImageMaskOffsetY" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.InputImageMaskOffsetX">
            <summary>
X offset value in pixels. The X &amp; Y offset values
measure the offset from the upper-left corner of the InputImage to the
upper-left corner of the InputImageMask, in image coordinates of the
InputImage.
</summary>
            <value>
The default is 0.0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfInputImageMaskOffsetX" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMorphology">
            <summary>
Save the segmented image, after masking but before
morphology, as part of the blob results. Otherwise, the image will be
released once blob analysis has completed and the CreateSegmentedImage
method will return Nothing when requesting this image.
</summary>
            <remarks>
Save the segmented image, after masking but before morphology, as part
of the blob results. Otherwise, the image will be released once
blob analysis has completed and the
<see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" />
method will return Nothing when requesting this image.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSaveSegmentedImageBeforeMorphology" />
                    </item>
                </list>
            </event>
            <example>
                <code lang="Visual Basic">
   Imports Cognex.VisionPro
   Imports Cognex.VisionPro.Blob
   
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim myImage As CogImage8Grey
    myBlob.SaveSegmentedImageBeforeMorphology = True
    myBlobResults = myBlob.Execute(mobjImage, r)
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.BeforeMorphology, True)
    cdDisp.Image = myImage
    End Sub
</code>
                <code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
       private void doBlob()
    {
      CogBlob myBlob=new CogBlob();
      CogBlobResults myBlobResults;
      CogImage8Grey myImage; 
      myBlob.SaveSegmentedImageBeforeMorphology = true;
      myBlobResults = myBlob.Execute(mobjImage,r);
      myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.BeforeMorphology, true);
      cdDisp.Image = myImage;
     }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMasking">
            <summary>
Save the segmented image, before masking and morphology,
as part of the blob results. Otherwise, the image will be released
once blob analysis has completed and the CreateSegmentedImage method
will return Nothing when requesting this image.
</summary>
            <remarks>
Save the segmented image, before masking and morphology, as part
of the blob results. Otherwise, the image will be released once
blob analysis has completed and the
<see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" />
method will return Nothing when requesting this image.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSaveSegmentedImageBeforeMasking" />
                    </item>
                </list>
            </event>
            <example>
                <code lang="Visual Basic">
   Imports Cognex.VisionPro
   Imports Cognex.VisionPro.Blob
   
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim myImage As CogImage8Grey
    myBlob.SaveSegmentedImageBeforeMasking = True
    myBlobResults = myBlob.Execute(mobjImage, r)
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.BeforeMasking, True)
    cdDisp.Image = myImage
    End Sub
</code>
                <code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
       private void doBlob()
    {
      CogBlob myBlob=new CogBlob();
      CogBlobResults myBlobResults;
      CogImage8Grey myImage; 
      myBlob.SaveSegmentedImageBeforeMasking = true;
      myBlobResults = myBlob.Execute(mobjImage,r);
      myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.BeforeMasking, true);
      cdDisp.Image = myImage;
     }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImage">
            <summary>
Save the segmented image as part of the blob results. 
Otherwise, the image will be released once blob analysis has completed
and the CreateSegmentedImage method will return
Nothing when requesting this image.
</summary>
            <remarks>
                <para>
Save the segmented image as part of the blob results. You must set
this property to True if you wish to call
<see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" />
If you do not set this property to true, 
<see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" />
returns a NULL image.
</para>
            </remarks>
            <value>
The default is False.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfSaveSegmentedImage" />
                    </item>
                </list>
            </event>
            <example>
                <code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Private Sub doBlob()
    Dim myBlob As New CogBlob
    Dim myBlobResults As CogBlobResults
    Dim myImage As CogImage8Grey
    myBlob.SaveSegmentedImage = True
    myBlobResults = myBlob.Execute(mobjImage, r)
    myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.cogBlobSegmentedImage, True)
    cdDisp.Image = myImage
    End Sub
</code>
                <code lang="C#">
   using Cognex.VisionPro; 
   using Cognex.VisionPro.Blob;
   
       private void doBlob()
    {
      CogBlob myBlob=new CogBlob();
      CogBlobResults myBlobResults;
      CogImage8Grey myImage; 
      myBlob.SaveSegmentedImage = true;
      myBlobResults = myBlob.Execute(mobjImage,r);
      myImage = myBlobResults.CreateSegmentedImage(CogBlobSegmentedImageConstants.cogBlobSegmentedImage, true);
      cdDisp.Image = myImage;
     }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle">
            <summary>
The angle (in radians) at which the bounding box or median
point is computed when the axis argument of MedianX, MedianY, or
GetBoundingBox is ExtremaAngle. The extrema angle is
specified in the selected space of the input image.
</summary>
            <remarks>
The angle (in radians) at which the bounding box or median point is
computed when the axis argument of
<see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetMedianX(Cognex.VisionPro.Blob.CogBlobAxisConstants)" />,
<see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetMedianY(Cognex.VisionPro.Blob.CogBlobAxisConstants)" />, or 
<see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetBoundingBox(Cognex.VisionPro.Blob.CogBlobAxisConstants)" /> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">ExtremaAngle</see>. 
The extrema angle is specified in the selected space of the input image.
</remarks>
            <value>
The default is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaAngle" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeAreaPercent">
            <summary>
The amount of area to exclude when computing either a
bounding box or median point, only used when the ExtremaExcludeMode is
set to AreaPercent. The area is specified in
terms of percentage of pixels to exclude.
</summary>
            <remarks>
The amount of area to exclude when computing either a bounding box or
median point, only used when the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" />
is set to
<see cref="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants">
AreaPercent</see>. The area is specified in terms of percentage
of pixels to exclude.
</remarks>
            <value>
The default is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeAreaPercent" />
                    </item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
The supplied value is less than zero or greater than or equal to 50.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeAreaPixels">
            <summary>
The amount of area to exclude when computing either a
bounding box or median point, only used when the ExtremaExcludeMode is
set to AreaPixels. The area is specified in
image pixel units.
</summary>
            <remarks>
The amount of area to exclude when computing either a bounding box or
median point, only used when the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" />
is set to
<see cref="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants">
AreaPixels</see>. The area is specified in image pixel units.
</remarks>
            <value>
The default is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeAreaPixels" />
                    </item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
The supplied value is less than zero.
</exception>  [CogFilterThresholdAttribute(CogFilterThresholdConstants::Expanded)]
</member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeArea">
            <summary>
The amount of area to exclude when computing either a
bounding box or median point, only used when the ExtremaExcludeMode is
set to Area. The area is specified in units of
the selected space of the InputImage.
</summary>
            <remarks>
The amount of area to exclude when computing either a bounding box or
median point, only used when the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" />
is set to
<see cref="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants">
Area</see>. The area is specified in units of the selected space of
the InputImage.
</remarks>
            <value>
The default is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeArea" />
                    </item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
The supplied value is less than zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode">
            <summary>
Indicates if some of the feature's area should be
excluded when making the median and bounding box measures. If area
should be excluded, the mode also indicates which property specifies
the area to be excluded.
</summary>
            <remarks>
                <para>
A value from
<see cref="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants" />
that determines what, if any, part of the feature's area should be
excluded when making the median and bounding box measures. If area
should be excluded, the mode also indicates which property specifies
the area to be excluded.
</para>
            </remarks>
            <value>
The default is
<see cref="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants">
None</see></value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeMode" />
                    </item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
The supplied value is not a member of
<see cref="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants" />.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.ConnectivityMinPixels">
            <summary>
The minimum size, in pixels, of features that will not
be cleaned up during connectivity cleanup. ConnectivityCleanup is not
available when connectivity mode is set to whole image, in which case
the cleanup and minimum pixels settings are simply ignored.
</summary>
            <remarks />
            <value>
The default is 10.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfConnectivityMinPixels" />
                    </item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
The supplied value is less than zero.
</exception>
            <example>
                <code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Blob

myBlob = New CogBlob
myBlobResults = New CogBlobResults

Private Sub doBlob()
    myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Prune
    myBlob.ConnectivityMinPixels = 100
    myBlob.ConnectivityMode = CogBlobConnectivityModeConstants.Labeled
    myBlobResults = myBlob.Execute(anImage, Nothing)
    debug.WriteLine("Count is:" + myBlobResults.GetBlobs.Count.ToString)
End Sub
</code>
                <code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Blob;

private CogBlob myBlob;
private CogBlobResults myBlobResults;

myBlob = new CogBlob();
myBlobResults = new CogBlobResults();

private void doBlob()
{
	myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Prune;
	myBlob.ConnectivityMinPixels = 100;
	myBlob.ConnectivityMode = CogBlobConnectivityModeConstants.Labeled;
	myBlob.Execute(anImage, NULL);
	debug.WriteLine("Count is:" + myBlobResults.GetBlobs.Count.ToString);
}
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.ConnectivityCleanup">
            <summary>
Determines the cleanup method to use after performing
connectivity analysis of the blobs. ConnectivityCleanup is not
available when connectivity mode is set to whole image, in which case
the cleanup and minimum pixels settings are simply ignored.
</summary>
            <remarks>
Determines the 
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants">
cleanup method</see> to use after performing connectivity analysis of
the blobs. Connectivity cleanup is not available when connectivity mode
is set to whole image, in which case the cleanup and minimum pixels
settings are simply ignored.
</remarks>
            <value>
The default is
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants">
Fill</see>.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfConnectivityCleanup" />
                    </item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
The supplied value is not a member of
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants" />.
</exception>
            <example>
                <code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.Blob

myBlob = New CogBlob
myBlobResults = New CogBlobResults

Private Sub doBlob()
    myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Prune
    myBlob.ConnectivityMinPixels = 100
    myBlob.ConnectivityMode = CogBlobConnectivityModeConstants.Labeled
    myBlobResults = myBlob.Execute(anImage, Nothing)
    debug.WriteLine("Count is:" + myBlobResults.GetBlobs.Count.ToString)
End Sub
</code>
                <code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.Blob;

private CogBlob myBlob;
private CogBlobResults myBlobResults;

myBlob = new CogBlob();
myBlobResults = new CogBlobResults();

private void doBlob()
{
	myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Prune;
	myBlob.ConnectivityMinPixels = 100;
	myBlob.ConnectivityMode = CogBlobConnectivityModeConstants.Labeled;
	myBlob.Execute(anImage, NULL);
	debug.WriteLine("Count is:" + myBlobResults.GetBlobs.Count.ToString);
}
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlob.ConnectivityMode">
            <summary>
Determines the connectivity to be used when
analyzing blobs.
</summary>
            <remarks>
A value from
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants" />
that determines what connectivity mode is used to connect object pixels
into blobs.
</remarks>
            <value>
The default is
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants">
GreyScale</see>.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlob.SfConnectivityMode" />
                    </item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
The supplied value is not a member of
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants" /></exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlob.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogBlob object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlob.Clone">
            <summary>
Returns a deep copy of this class instance. Derived classes that
implement Clone should override this method. Other clients who wish
to clone this instance should call ICloneable::Clone.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlob.Finalize">
            <summary>
Finalize this CogBlob.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlob.Dispose">
            <summary>
Destruct this CogBlob.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlob.#ctor(Cognex.VisionPro.Blob.CogBlob)">
            <summary>
Constructs a new instance of this class as a deep copy of the
given instance.
</summary>
            <param name="Other">
The CogBlob object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlob.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfComputeBlobRLE">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by ComputeBlobRLE may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfComputeTopology">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by ComputeTopology may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfComputeInertia">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by ComputeInertia may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfSortAscending">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by SortAscending may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfSortMeasure">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by SortMeasure may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfSortEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by SortEnabled may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfRegionMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by RegionMode may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfInputImageMaskOffsetY">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by InputImageMaskOffsetY may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfInputImageMaskOffsetX">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by InputImageMaskOffsetX may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfInputImageMask">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by InputImageMask may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfSaveSegmentedImageBeforeMorphology">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by SaveSegmentedImageBeforeMorphology may
have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfSaveSegmentedImageBeforeMasking">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by SaveSegmentedImageBeforeMasking may
have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfSaveSegmentedImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by SaveSegmentedImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfRunTimeMeasures">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by RunTimeMeasures may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfMorphologyOperations">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by MorphologyOperations may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaAngle">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by ExtremaAngle may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeAreaPercent">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by ExtremaExcludeAreaPercent may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeAreaPixels">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by ExtremaExcludeAreaPixels may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeArea">
            <summary>
This bit will be set in the EventArgs of a Changed event every
time the value returned by ExtremaExcludeArea may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfExtremaExcludeMode">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by ExtremaExcludeMode may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfConnectivityMinPixels">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by ConnectivityMinPixels may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfConnectivityCleanup">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by ConnectivityCleanup may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfConnectivityMode">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by ConnectivityMode may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlob.SfSegmentationParams">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by SegmentationParams may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlob">
            <summary>
Class for configuring and performing blob analysis. The
blob run-time parameters include, but are not limited to, settings for
segmentation, connectivity, morphology, masking, filtering,
and sorting.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.Copy">
            <summary>
Returns a copy of the constructor object.
For Cognex Internal use only.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.ConstructSubRecords(Cognex.VisionPro.ICogRecord,System.Int32)">
            <summary>
Constructs the record's SubRecords.
For Cognex Internal use only.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.ConstructAnnotation(Cognex.VisionPro.ICogRecord,System.Int32)">
            <summary>
Constructs the record's Annotation.
For Cognex Internal use only.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.ConstructContent(Cognex.VisionPro.ICogRecord,System.Int32)">
            <summary>
Constructs the record's Content.
For Cognex Internal use only.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetBlobMeasures(Cognex.VisionPro.Blob.CogBlobMeasureConstants,System.Int32[])">
            <summary>
Gets an array of blob measures for the specified
measure and the specified IDs. Note that
this method does not force the creation of any
individual blob results.
</summary>
            <param name="measure">
The
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
measure</see> to return.
</param>
            <param name="blobIDs">
An array of integer blob IDs indicating which blobs
are of interest.
</param>
            <exception cref="T:System.ArgumentException">
The supplied blob ID array is NULL.
</exception>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetBlobMeasure(Cognex.VisionPro.Blob.CogBlobMeasureConstants,System.Int32)">
            <summary>
Gets an individual measure for a single blob result. Note that
this method does not force the creation of any individual
blob results.
</summary>
            <param name="measure">
The
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
measure</see> to return.
</param>
            <param name="blobID">
The ID of the blob whose measure is being requested.
</param>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetBlobIDs(System.Boolean)">
            <summary>
Gets an array of integer blob IDs. Note that this method
does not force the creation of indvidual blob results.
</summary>
            <param name="filtered">
If true, the blobs are filtered according to the defined
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" /> objects.
If false, blobs are not filtered.
</param>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetTopLevelBlobs(System.Boolean)">
            <summary>
Gets all of the top level blobs, which are the blobs that do not
have an enclosing parent blob. The Filtered argument indicates to
get the blobs after filtering and sorting have been applied, or
blobs without any filtering and sorting applied.
</summary>
            <remarks>
Returns a
<see cref="T:Cognex.VisionPro.Blob.CogBlobResultCollection" />
containing a 
<see cref="T:Cognex.VisionPro.Blob.CogBlobResult" />
object for each top-level blob produced in the tool run that
produced this object. (A top-level blob is one that is not
contained within another feature.  You use the
<paramref name="filtered" /> argument to control whether or not
filtered blobs are included.
</remarks>
            <param name="filtered">
If true, the blobs are filtered according to the defined
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" /> objects.
If false, blobs are not filtered.
</param>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetSiblings(System.Int32,System.Boolean)">
            <summary>
Get either a filtered or unfiltered collection of the siblings of
the blob specified by ID. The filtered blobs will also be sorted
if sorting was enabled.
</summary>
            <remarks>
Get the siblings of the blob specified by the supplied
<see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" />.
A blob's siblings are all of the features that have the
same parent as the blob. The returned collection includes both
the blob you supply and all of its siblings.
</remarks>
            <returns>
The returned
<see cref="T:Cognex.VisionPro.Blob.CogBlobResultCollection" />.
</returns>
            <param name="blobID">
The <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" />
of the blob the siblings of which are returned.
</param>
            <param name="filtered">
If true, the blobs are filtered according to the defined
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" /> objects.
If false, blobs are not filtered.
</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="blobID" /> is less than 1 or greater than the number
of unfiltered blobs in this
<see cref="T:Cognex.VisionPro.Blob.CogBlobResults" />.
</exception>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetParent(System.Int32)">
            <summary>
Get the parent of the blob specified by ID.  Returns
Nothing for top level blobs which do not have parents.
</summary>
            <remarks>
Get the parent of the blob specified by the supplied 
<see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" />.
</remarks>
            <param name="blobID">
The <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" />
of the blob the parent of which is returned.
</param>
            <returns>
The returned
<see cref="T:Cognex.VisionPro.Blob.CogBlobResult" />.
</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="blobID" /> is less than 1 or greater than
the number of unfiltered blobs in this
<see cref="T:Cognex.VisionPro.Blob.CogBlobResults" />.
</exception>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetChildren(System.Int32,System.Boolean)">
            <summary>
Get either a filtered or unfiltered collection of
children of the blob specified by ID. The filtered blobs will also be
sorted if sorting was enabled.
</summary>
            <remarks>
Returns a <see cref="T:Cognex.VisionPro.Blob.CogBlobResultCollection" />
containing a 
<see cref="T:Cognex.VisionPro.Blob.CogBlobResult" /> object for each
child blob contained within the blob whose
<see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" />
you supply. You use the <paramref name="filtered" /> argument to control
whether or not filtered blobs are included.
</remarks>
            <returns>
The returned
<see cref="T:Cognex.VisionPro.Blob.CogBlobResultCollection" />.
</returns>
            <param name="blobID">
The <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" />
of the blob the children of which are returned.
</param>
            <param name="filtered">
If true, the blobs are filtered according to the defined
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" /> objects.
If false, blobs are not filtered.
</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="blobID" /> is less than 1 or greater than the
number of unfiltered blobs in this
<see cref="T:Cognex.VisionPro.Blob.CogBlobResults" />.
</exception>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetBlobs">
            <summary>
Gets all of the blobs from the blob analysis after
filtering and sorting have been applied.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetBlobs(System.Boolean)">
            <summary>
Gets all of the blobs from the blob analysis.  The
Filtered argument indicates to get the blobs after filtering and
sorting have been applied, or blobs without any filtering
and sorting applied.
</summary>
            <remarks>
Returns a
<see cref="T:Cognex.VisionPro.Blob.CogBlobResultCollection" />
containing all of the individual
<see cref="T:Cognex.VisionPro.Blob.CogBlobResult" /> objects
produced in the tool run that produced this object. You use the
<paramref name="filtered" /> argument to control whether or not
filtered blobs are included.
</remarks>
            <param name="filtered">
If true, the blobs are filtered and sorted according to the defined
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" /> objects.
If false, blobs are not filtered and sorted.
</param>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.GetBlobByID(System.Int32)">
            <summary>
Given a blob ID, return its blob result.
</summary>
            <remarks>
Given a blob <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" />,
return a
<see cref="T:Cognex.VisionPro.Blob.CogBlobResult" />
describing the blob's properties.
</remarks>
            <param name="blobID">
The <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" />
of the blob to return.
</param>
            <returns>
The returned <see cref="T:Cognex.VisionPro.Blob.CogBlobResult" />.
</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="blobID" /> is less than 1 or greater than the
number of unfiltered blobs in this
<see cref="T:Cognex.VisionPro.Blob.CogBlobResults" />.
</exception>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage">
            <summary>
Gets the specified segmented image. The image will be
stretched for maximum viewing contrast.
</summary>
            <returns>
The returned <see cref="T:Cognex.VisionPro.CogImage8Grey" />.
</returns>
            <remarks>
                <para>
Gets a
<see cref="T:Cognex.VisionPro.CogImage8Grey" />
containing the segmented image. 
</para>
                <para>
You must set
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImage" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMasking" />, or
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMorphology" />
to True or
<see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" />
will return Nothing for the corresponding image.
</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)">
            <summary>
Gets the specified segmented image. The image will be
stretched for maximum viewing contrast if stretchIt is true,
otherwise, the image will contain the actual segmented image data.
</summary>
            <param name="whichImage" />
            <param name="stretchIt" />
            <returns>
The returned <see cref="T:Cognex.VisionPro.CogImage8Grey" />.
</returns>
            <remarks>
                <para>
Gets a
<see cref="T:Cognex.VisionPro.CogImage8Grey" />
containing the segmented image. 
</para>
                <para>
You must set
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImage" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMasking" />, or
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMorphology" />
to True or
<see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" />
will return Nothing for the corresponding image.
</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
                <paramref name="whichImage" /> is not a member of
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants" /></exception>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.CreateBlobImage">
            <summary>
Create an image of the blobs &amp; holes in this collection.
Blobs &amp; holes are painted for maximum viewable contrast.
</summary>
            <returns>
The returned
<see cref="T:Cognex.VisionPro.CogImage8Grey" />.
</returns>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.CreateBlobImage(System.Boolean,System.Boolean,System.Int32)">
            <summary>
Create an image of the blobs &amp; holes in this collection.
Blobs &amp; holes will be painted using their segmentation values in an
image pre-filled with Background. If Viewable, Background is ignored,
blobs &amp; holes are painted for maximum viewable contrast.
</summary>
            <remarks>
Create an image of the blobs and holes in this collection.
Blobs and holes will be painted using their segmentation
values in an image pre-filled with a supplied
background color. You can also specify that a viewable image
(one that maximizes contrast between features) be created.
</remarks>
            <returns>
The returned
<see cref="T:Cognex.VisionPro.CogImage8Grey" />.
</returns>
            <param name="filtered">
If true, the blobs placed in the image are filtered according
to the defined
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" />
objects. If false, blobs are not filtered.
</param>
            <param name="viewable">
                <para>
If False, then the image background pixels are set to
<paramref name="background" />, and feature pixels are
set to their segmentation values (between 1 and
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />
+ 1 for soft threshold grey  scale connectivity, the feature label
for labeled connectivity).
</para>
                <para>
If True, then the image background pixels are set to 128, hole
pixels are set to 0, and feature pixels are set to values from
192 through 255. If hard thresholding is used, then feature pixels
are set to 255. If soft thresholding is used, the segmentation values
are mapped to a range of values from 255 through 192, with a maximum
step of 10 pixel values between segmentation values. For example, if
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />
is set to 3, then object pixels will be displayed using pixel values
of 255, 245, 235, and 225.
</para>
                <para>
If labeled blob analysis is being used, blobs have their label values
mapped to a range of values between 96 and 255. The values are evenly
distributed across the range. For example, if the minimum label value
is 1 and the maximum label value is 3, then the blobs would be displayed
using pixel values of 96, 175, and 255.
</para>
            </param>
            <param name="background">
The pixel value to use for the image background. If
<paramref name="viewable" /> is True, then this parameter
is ignored.
</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="background" /> is less than 0 or greater than 255
(only if <paramref name="viewable" /> is False).
</exception>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogBlobResults object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.Clone">
            <summary>
Create a duplicate of this CogBlobResults object.
</summary>
            <returns>
A newly created duplicate of this CogBlobResults object.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.Finalize">
            <summary>
Finalize this CogBlobResults.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.Dispose">
            <summary>
Destruct this CogBlobResults.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.#ctor(Cognex.VisionPro.Blob.CogBlobResults)">
            <summary>
Constructs a new instance of this class as a deep copy
of the given instance.
</summary>
            <param name="other">
The instance to copy from.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResults.#ctor">
            <summary>
For Cognex internal use only.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobResults">
            <summary>
Class which provides access to all of the results of a blob
analysis. Includes access to filtered and unfiltered collections
of CogBlobResult objects. Also provides access to intermediate
and result images of the blob analysis.
</summary>
            <remarks>
The blob results interface. This interface provides information
about the overall results of blob analysis; use
<see cref="T:Cognex.VisionPro.Blob.CogBlobResult" />
for information about individual blobs.
</remarks>
            <example>
                <code lang="C#">
        CogBlobResultCollection mBlobResults;

        mBlobResults = mCogBlobTool.Results.GetBlobs();

        Console.WriteLine("Number of Blobs: {0}", mBlobResults.Count);

        // Print information for each blob found
        foreach (CogBlobResult blobResult in mBlobResults)
        {
          Console.WriteLine("ID: {0}, CenterX: {1}, CenterY: {2}, Area: {3}",
          blobResult.ID, blobResult.CenterOfMassX, blobResult.CenterOfMassY, blobResult.Area);
        }
</code>
                <code lang="Visual Basic">
        Dim myBlobResults As CogBlobResultCollection

        myBlobResults = myCogBlobTool.Results.GetBlobs()

        Console.WriteLine("Number of Blobs: {0}", myBlobResults.Count)

        ' Print information for each blob found
        For Each blobResult As CogBlobResult In myBlobResults
          Console.WriteLine("ID: {0}, CenterX: {1}, CenterY: {2}, Area: {3}", _
          blobResult.ID, blobResult.CenterOfMassX, blobResult.CenterOfMassY, blobResult.Area)
        Next
</code>
            </example>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.IndexOf(Cognex.VisionPro.Blob.CogBlobResult)">
            <summary>
Get the index of the given item. If the item cannot be
found -1 is returned.
</summary>
            <param name="value">
The item whose index is desired.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.CopyTo(System.Array,System.Int32)">
            <summary>
Copies the contents of this collection to an array.
</summary>
            <param name="array">
The array into which to copy.
</param>
            <param name="index">
The index from which to start copying.
</param>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResultCollection.Item(System.Int32)">
            <summary>
Gets the item at the specified index. In C#, this property
is the indexer for the collection.
</summary>
            <param name="index">
The index of the item to get.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied index parameter is not valid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.GetEnumerator">
            <summary>
Gets an enumerator for this collection.
</summary>
            <returns>
An enumerator for this collection.
</returns>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResultCollection.SyncRoot">
            <summary>
Gets an object that can be used to synchronize access to this
collection.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResultCollection.IsSynchronized">
            <summary>
Gets a value indicating whether access to this collection
is synchronized (thread-safe).
</summary>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResultCollection.Count">
            <summary>
Gets the number of items contained in this collection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogBlobResultCollection object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.Clone">
            <summary>
Returns a deep copy of this class instance. Derived classes that
implement Clone should override this method. Other clients who
wish to clone this instance should call ICloneable.Clone.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.Finalize">
            <summary>
Finalize this CogBlobResultCollection object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.Dispose">
            <summary>
Destruct this CogBlobResultCollection object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.#ctor(Cognex.VisionPro.Blob.CogBlobResultCollection)">
            <summary>
Constructs a new instance of this class as a deep copy
</summary>
            <param name="other">
The instance to copy from.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResultCollection.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobResultCollection">
            <summary>
A collection of blob results.
</summary>
            <remarks>
The interface to a collection of
<see cref="T:Cognex.VisionPro.Blob.CogBlobResult" />.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResult.GetMedianY(Cognex.VisionPro.Blob.CogBlobAxisConstants)">
            <summary>
The y-coordinate of the point through which two
orthogonal lines each divide the blob's area in half.  The orthogonal
lines are aligned with the Axis specified.  MedianY is specified in
units of the input image's selected space.
</summary>
            <remarks>
                <para>
The y-coordinate of the point through which two orthogonal lines
each divide the blob's area in half. The orthogonal lines are
aligned with the
<see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">Axis</see>
specified. MedianY is specified in units of the input image's selected
space.
</para>
                <para>
This measure <i>always</i> makes use of the current 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" />;
you cannot specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">
PixelAlignedNoExclude</see> for <paramref name="axis" />.
</para>
                <para>
Note that this measure is only cached for the most recently requested
axis; if you request this measure for a different axis, it is
recomputed.
</para>
            </remarks>
            <param name="axis">
A value defined in
<see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants" />
which determines the axis to which the median is aligned.
</param>
            <value>
The default is
<see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">Principal</see>.
</value>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResult.GetMedianX(Cognex.VisionPro.Blob.CogBlobAxisConstants)">
            <summary>
The x-coordinate of the point through which two
orthogonal lines each divide the blob's area in half.  The orthogonal
lines are aligned with the Axis specified.  MedianX is specified in
units of the input image's selected space.
</summary>
            <remarks>
                <para>
The x-coordinate of the point through which two orthogonal lines
each divide the blob's area in half. The orthogonal lines are
aligned with the
<see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">Axis</see>
specified. MedianX is specified in units of the input image's selected
space.
</para>
                <para>
This measure <i>always</i> makes use of the current 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" />;
you cannot specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">
PixelAlignedNoExclude</see> for <paramref name="axis" />.
</para>
                <para>
Note that this measure is only cached for the most recently requested
axis; if you request this measure for a different axis, it is
recomputed.
</para>
            </remarks>
            <param name="axis">
A value defined in
<see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants" />
which determines the axis to which the median is aligned.
</param>
            <value>
The default is
<see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">Principal</see>.
</value>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResult.GetMeasure(Cognex.VisionPro.Blob.CogBlobMeasureConstants)">
            <summary>
Returns the value of the blob
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants" />
requested.
</summary>
            <param name="measure">
The
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
measure</see> to return.
</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="measure" /> is not a member of
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants" />.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException">
The connectivity mode is
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants">
WholeImageGreyScale</see> 
and <paramref name="measure" /> is one of the following: 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
BoundaryPixelLength</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">Acircularity</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">AcircularityRms</see>, or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">Perimeter</see>.
</exception>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResult.GetBoundingBoxAtAngle(System.Double)">
            <summary>
Gets a bounding box of the blob that is aligned with the
specified angle. The exclude extrema properties of the
run parameters are used when calculating the bounding box.
</summary>
            <returns>
The returned bounding box: a
<see cref="T:Cognex.VisionPro.CogRectangleAffine" />.
</returns>
            <param name="angle">
The angle, specified in the selected space of the input image.
</param>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResult.GetBoundingBox(Cognex.VisionPro.Blob.CogBlobAxisConstants)">
            <summary>
Gets a bounding box of the blob that is aligned with the
specified axis. The exclude extrema properties of the run parameters
are used when calculating the bounding box, except when Axis is set to
CogBlobAxisConstants::PixelAlignedNoExclude.
</summary>
            <remarks>
                <para>
Gets a bounding box of the blob that is aligned with the
specified axis. The run-time
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" />
settings are used when calculating the bounding box, except when
<paramref name="axis" /> is set to
<see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">
PixelAlignedNoExclude</see>.
</para>
                <para>
The returned bounding box is in the selected space of the 
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.InputImage" />.
</para>
                <b>Note</b>: If you specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">
PixelAlignedNoExclude</see> for <paramref name="axis" />, the tool
ignores the extrema exclusion settings and returns a graphic that is
in the pixel space of the input image. This option requires less
time than the other options to execute.
</remarks>
            <returns>
The returned bounding box: a
<see cref="T:Cognex.VisionPro.CogRectangleAffine" />.
</returns>
            <param name="axis" />
            <exception cref="T:System.ArgumentException">
                <paramref name="axis" /> is not a member of
<see cref="T:Cognex.VisionPro.Blob.CogBlobAxisConstants" />.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobEntireBlobExcludedException">
The entire blob has been excluded because you specified an extrema
exclusion setting greater than or equal to the area of the blob.
</exception>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResult.GetBoundary">
            <summary>
Creates a closed polygon representing the boundary of
the blob which completely encloses all pixels that are part of this
blob, regardless of the blob weight associated with each pixel. The
boundary always falls directly between the edges of pixels.
</summary>
            <returns>
The returned boundary: a <see cref="T:Cognex.VisionPro.CogPolygon" />.
</returns>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException">
The connectivity mode is
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants">
WholeImageGreyScale</see>.
</exception>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResult.CreateResultGraphics(Cognex.VisionPro.Blob.CogBlobResultGraphicConstants)">
            <summary>
Creates a composite result graphic containing child
graphics specified by the GraphicOptions which is a bitwise
combination of CogBlobResultGraphicConstants.
</summary>
            <remarks>
                <para>
Creates a
<see cref="T:Cognex.VisionPro.CogCompositeShape" /> 
result graphic containing child graphics specified by 
<paramref name="graphicOptions" />, a bitwise combination of
values defined in
<see cref="T:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants" />.
</para>
                <para>
The
<see cref="P:Cognex.VisionPro.CogCompositeShape.ID" />
property of the returned graphic is set to the
<see cref="P:Cognex.VisionPro.Blob.CogBlobResult.ID" />
of this blob.
</para>
                <para>
The returned graphic and it's children have their 
<see cref="P:Cognex.VisionPro.CogCompositeShape.Interactive" />
property set to True.
</para>
                <para>
The graphic's color is set to green for members of the filtered
results, red for blobs that were filtered out.
</para>
            </remarks>
            <param name="graphicOptions">
A value created by ORing together one or more values from
<see cref="T:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants" />.
</param>
            <returns>
The returned graphics: a
<see cref="T:Cognex.VisionPro.CogCompositeShape" /></returns>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.SelectedSpaceName">
            <summary>
Returns the name of the selected space of the input
image at run-time. All relevant blob measures are specified in units
of the selected space.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.Perimeter">
            <summary>
The perimeter of the blob specified in units of the
input image's selected space at run-time.  Formula corrects for the
tendency of the pixel aligned boundary of the blob to overstate the
true blob perimeter. Not available for whole-image connectivity.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.NumUnfilteredChildren">
            <summary>
The number of children of this blob before any filter
criteria are applied.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.NumChildren">
            <summary>
The number of children of this blob after all filter
criteria are applied.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.NotClipped">
            <summary>
This measure will be 1.0 if the blob was not clipped during
processing. It will be zero if the blob touches the edge of
the region of interest, or the edge of the run-time image,
or any Don't Care pixel in the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.InputImageMask" />.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.Label">
            <summary>
The connectivity label. For grey scale connectivity, the label
will be 1 for blobs and 0 for holes. For labeled connectivity,
this is the blob's label.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaY">
            <summary>
The 
<see cgnxAnchor="second_moments_of_inertia_about_the_principal_axe" cref="u:Search.Blob.Theory.ToolTheory">
second moment of inertia</see> 
of the blob about an axis drawn through the blob's center of mass
and parallel to the X-axis of selected space of the input image.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaX">
            <summary>
The 
<see cgnxAnchor="second_moments_of_inertia_about_the_principal_axe" cref="u:Search.Blob.Theory.ToolTheory">
second moment of inertia</see> 
of the blob about an axis drawn through the blob's center
of mass and parallel to the Y-axis of selected space of the
input image.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaMin">
            <summary>
The blob's 
<see cgnxAnchor="second_moments_of_inertia_about_the_principal_axe" cref="u:Search.Blob.Theory.ToolTheory">
second moment of inertia</see> about the principal axis of the blob.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaMax">
            <summary>
The blob's
<see cgnxAnchor="second_moments_of_inertia_about_the_principal_axe" cref="u:Search.Blob.Theory.ToolTheory">
second moment of inertia</see> about the second principal axis
of the blob.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.ID">
            <summary>
A unique ID used to identify this blob within the
context of the
<see cref="T:Cognex.VisionPro.Blob.CogBlobResults" />
object that contains this result.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.FilteredOut">
            <summary>
True if this blob was filtered out based on any of filter criteria
specified in the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.RunTimeMeasures" />.
False, otherwise.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.Elongation">
            <summary>
The ratio of
<see cref="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaMax" />
to
<see cref="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaMin" />.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.CenterOfMassY">
            <summary>
The y-coordinate of the center of mass of the blob
specified in units of the input image's selected space at run-time.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.CenterOfMassX">
            <summary>
The x-coordinate of the center of mass of the blob
specified in units of the input image's selected space at run-time.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.Area">
            <summary>
The area of the blob specified in units of the input image's
selected space at run-time. The area measure takes into account
the blob weight of each pixel. Weighting is accomplished by
assigning values between 0 and 255 to each pixel, then normalizing
the total of the values of the pixels that make up the blob using the 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" />.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.Angle">
            <summary>
The angle of the principal axis of the blob, specified in units
of the input image's selected space at run-time.
</summary>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.AcircularityRms">
            <summary>
The acircularity of this blob as defined by the
normalized RMS deviation of the boundary point radius values from r0,
where r0 is the square root of the blob's area divided by Π. This
measure is not available when using whole-image connectivity.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException">
The connectivity mode is
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants">
WholeImageGreyScale</see>.
</exception>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobResult.Acircularity">
            <summary>
The acircularity of this blob as defined by the formula:
perimeter^2 / (4 x Π x Area).  This measure is not available
when using whole-image connectivity.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException">
The connectivity mode is
<see cref="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants">
WholeImageGreyScale</see>.
</exception>
            <exception cref="T:System.InvalidOperationException">
If no result data is available.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogBlobResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResult.Clone">
            <summary>
Returns a deep copy of this class instance. Derived classes
that implement Clone should override this method. Other
clients who wish to clone this instance should call
ICloneable.Clone.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResult.Finalize">
            <summary>
Finalize this CogBlobResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResult.Dispose">
            <summary>
Destruct this CogBlobResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResult.#ctor(Cognex.VisionPro.Blob.CogBlobResult)">
            <summary>
Constructs a new instance of this class as a deep copy
of the given instance.
</summary>
            <param name="other">
The instance to copy from.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobResult.#ctor">
            <summary>
For Cognex internal use only.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobResult">
            <summary>
Class for a single blob result. Provides information for
an individual feature found during blob analysis. Features include both
blobs and holes within blobs.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobScene.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serializer for CogBlobScene object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobScene.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogBlobScene object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobScene.Clone">
            <summary>
Create a duplicate of this CogBlobScene object.
</summary>
            <returns>
A newly created duplicate of this CogBlobScene object.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobScene.Finalize">
            <summary>
Finalize this CogBlobScene.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobScene.Dispose">
            <summary>
Destruct this CogBlobScene.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobScene.#ctor(Cognex.VisionPro.Blob.CogBlobScene)">
            <summary>
Constructs a new instance of this class as
a deep copy of the given instance.
</summary>
            <param name="Other">
The instance to copy from.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobScene.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobScene">
            <summary>
For Cognex Internal use only.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationSubtractionImage(System.Byte[],Cognex.VisionPro.CogImage8Grey,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
Sets the segmentation Mode to SubtractionImage and sets the PreMap,
SubtractionImage, PostMap, ScalingValue, SubtractionImageOffsetX,
&amp; SubtractionImageOffsetY properties to the values supplied.
</summary>
            <param name="preMap">
Pixel map that is to be applied to the input image before subtracting
the subtraction image. Each pixel in the input image is used as an
index into the supplied map. The input pixel value is replaced with
the value from the map.
</param>
            <param name="subtractionImage">
The subtraction image. The pixels in this image are subtracted
from those in the input image to produce the segmented image.
</param>
            <param name="postMap">
Pixel map that is to be applied to the image that resulted from
subtracting the subtraction image from the input image. Each
pixel in the subtracted image is used as an index into the
supplied map. The input pixel value is replaced with the value
from the map.
</param>
            <param name="scalingValue">
Pixel value that represents a blob weight of 1.0, all other
pixel values are interpreted on a linear scale relative to this
value.
</param>
            <param name="subtractionImageOffsetX">
The X offset value in pixels of the <paramref name="subtractionImage" />. 
The X and Y offset values measure the offset from the upper-left
corner of the run-time input image to the upper-left corner of the 
<paramref name="subtractionImage" /> in image coordinates of the
input image.
</param>
            <param name="subtractionImageOffsetY">
The Y offset value in pixels of the <paramref name="subtractionImage" />.
The X and Y offset values measure the offset from the upper-left
corner of the run-time input image to the upper-left corner of the 
<paramref name="subtractionImage" /> in image coordinates of the
input image.
</param>
            <remarks>
                <para>
Sets the segmentation
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see> and sets
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow" />,
<see cref="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetPreMap(System.Byte[])" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />,
<see cref="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetPostMap(System.Byte[])" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImageOffsetX" />,
and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImageOffsetY" />
to the values supplied.
</para>
                <para>
This function suspends event delivery, then sets the public properties of
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" />
with the supplied values. A single event that includes all of the
affected functional area is typically generated.
</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
                <paramref name="scalingValue" /> is less than 0 or greater than 255.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="preMap" /> or <paramref name="postMap" /> is NULL or
is not a 1-dimensional array with a size of 256.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="subtractionImage" /> is NULL or unallocated.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationSoftRelativeThreshold(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants)">
            <summary>
Sets the segmentation Mode to SoftRelativeThreshold and sets the TailLow,
TailHigh, SoftRelativeThresholdLow, SoftRelativeThresholdHigh, Softness,
&amp; Polarity properties to the values supplied.
</summary>
            <param name="tailLow">
The percentage of high tail pixels to discard before computing the threshold.
</param>
            <param name="tailHigh">
The percentage of high tail pixels to discard before computing the threshold.
</param>
            <param name="softRelativeThresholdLow">
Soft relative thresholding computes a low soft threshold value by 
determining the pixel value which lies at the supplied percentage 
of the distance between the low tail pixel value and the high tail
pixel value. Pixel values that are less than the computed low
threshold are assigned a blob weight of 0 when
<paramref name="polarity" /> indicates light blobs. Pixel values
that are less than the computed low threshold are assigned a blob
weight of 1 when <paramref name="polarity" /> indicates dark blobs.
</param>
            <param name="softRelativeThresholdHigh">
                <para>
Soft relative thresholding computes a high soft threshold value by 
determining the pixel value which lies at the specified percentage 
of the distance between the low tail pixel value and the high tail
pixel value. When <paramref name="polarity" /> indicates light blobs,
pixel values that are greater than the computed high threshold are
assigned a blob weight equal to 1. The range of pixel values
between the computed low and high threshold is divided into
<paramref name="softness" /> equally sized ranges. Pixels with
values in each of these ranges are assigned values between 1 and
<paramref name="softness" />. A segmentation value of 
<paramref name="softness" />+1 corresponds to a blob weight of
one while all other segmentation values are interpreted on a linear
scale relative to <paramref name="softness" />+1.
</para>
                <para>
Pixel values that are greater than or equal to the computed high
threshold are assigned a blob weight of 0 when 
<paramref name="polarity" /> indicates dark blobs.
</para>
            </param>
            <param name="softness">
The number of intermediate weights separating blobs(1) an
 background(0). Pixel values between the low and high threshold
are assigned a blob weight between 0.0 and 1.0, exclusive.
</param>
            <param name="polarity">
Specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
DarkBlobs</see> for dark blobs on a light background or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
LightBlobs</see> for light blobs on a dark background.
</param>
            <remarks>
                <para>
Sets the segmentation
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SoftRelativeThreshold </see> and sets
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftRelativeThresholdLow" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftRelativeThresholdHigh" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />,
 and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
to the values supplied.
</para>
                <para>
This function suspends event delivery, then sets the public properties of
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" />
with the supplied values. A single event that includes all of the
affected functional area is typically generated.
</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
                <paramref name="tailLow" />, <paramref name="tailHigh" />, 
<paramref name="softRelativeThresholdLow" />, or
<paramref name="softRelativeThresholdHigh" /> is less than 0 or greater than 100.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="tailLow" /> plus <paramref name="tailHigh" /> is greater than 100.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="softRelativeThresholdLow" /> is greater than 
<paramref name="softRelativeThresholdHigh" />.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="softness" /> is less than 0 or greater than 254.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="polarity" /> is neither 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
DarkBlobs</see> nor 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
LightBlobs</see>.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationSoftFixedThreshold(System.Int32,System.Int32,System.Int32,Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants)">
            <summary>
Sets the segmentation Mode to SoftFixedThreshold and sets the
SoftRelativeThresholdLow, SoftRelativeThresholdHigh, Softness,
&amp; Polarity properties to the values supplied.
</summary>
            <param name="softFixedThresholdLow">
Pixel values that are less than the low threshold are assigned
a blob weight of 0 when <paramref name="polarity" /> indicates
light blobs. Pixel values that are less than the low threshold
are assigned a blob weight of 1 when <paramref name="polarity" />
indicates dark blobs.
</param>
            <param name="softFixedThresholdHigh">
                <para>
When <paramref name="polarity" /> indicates light blobs, pixel
values that are greater than the high threshold are assigned a
blob weight equal to 1. The range of pixel values between the low
and high threshold is divided into <paramref name="softness" />
equally sized ranges. Pixels with values in each of these ranges
are assigned values between 1 and <paramref name="softness" />.
A segmentation value of <paramref name="softness" />+1 corresponds
to a blob weight of one while all other segmentation values are
interpreted on a linear scale relative to <paramref name="softness" />+1.
</para>
                <para>
Pixel values that are greater than the high threshold are assigned
a blob weight of 0 when <paramref name="polarity" /> indicates dark
blobs. 
</para>
            </param>
            <param name="softness">
The number of intermediate weights separating blobs(1) and
background(0). Pixel values between the low and high threshold
are assigned a blob weight between 0.0 and 1.0, exclusive.
</param>
            <param name="polarity">
Specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
DarkBlobs</see> for dark blobs on a light background or
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
LightBlobs</see> for light blobs on a dark background.
</param>
            <remarks>
                <para>
Sets the segmentation
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SoftFixedThreshold </see> and sets
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftFixedThresholdLow" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftFixedThresholdHigh" />,
and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
to the values supplied.
</para>
                <para>
This function suspends event delivery, then sets the public properties of
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" />
with the supplied values. A single event that includes all of the
affected functional area is typically generated.
</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
                <paramref name="softFixedThresholdLow" /> is less than 0 or greater than 65534.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="softFixedThresholdHigh" /> is less than 1 or greater than 65535.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="softFixedThresholdLow" /> is greater than or equal to
<paramref name="softFixedThresholdHigh" />.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="softness" /> is less than 0 or greater than 254.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="polarity" /> is neither 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
DarkBlobs</see> nor 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
LightBlobs</see>.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationHardDynamicThreshold(System.Int32,System.Int32,Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants)">
            <summary>
Sets the segmentation Mode to HardDynamicThreshold and sets the TailLow,
TailHigh, and Polarity properties to the values supplied.
</summary>
            <param name="tailLow">
The percentage of low tail pixels to discard before computing the
hard relative threshold.
</param>
            <param name="tailHigh">
The percentage of high tail pixels to discard before computing the
hard relative threshold.
</param>
            <param name="polarity">
Specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
DarkBlobs</see> for dark blobs on a light background or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
LightBlobs</see> for light blobs on a dark background.
</param>
            <remarks>
                <para>
Sets the segmentation
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
HardDynamicThreshold</see> and sets
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.HardRelativeThreshold" />
and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
to the values supplied.
</para>
                <para>
This function suspends event delivery, then sets the public properties of
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" />
with the supplied values. A single event that includes all of the
affected functional area is typically generated.
</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
                <paramref name="tailLow" /> or <paramref name="tailHigh" /> is
less than 0 or greater than 100.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="tailLow" /> plus <paramref name="tailHigh" />
is greater than 100.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="polarity" /> is neither 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
DarkBlobs</see> nor 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
LightBlobs</see>.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationHardRelativeThreshold(System.Int32,System.Int32,System.Int32,Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants)">
            <summary>
Sets the segmentation Mode to HardRelativeThreshold and sets the TailLow,
TailHigh, HardRelativeThreshold, &amp; Polarity properties to
the values supplied.
</summary>
            <param name="tailLow">
The percentage of low tail pixels to discard before computing
the hard relative threshold.
</param>
            <param name="tailHigh">
The percentage of high tail pixels to discard before computing
the hard relative threshold.
</param>
            <param name="hardRelativeThreshold">
A hard threshold is computed by determining the pixel value which
lies at the supplied percentage of the distance between the low
tail pixel value and the high tail pixel value. This computed
threshold is then used to perform Hard-Fixed segmentation.
</param>
            <param name="polarity">
Specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
DarkBlobs</see> for dark blobs on a light background or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
LightBlobs</see> for light blobs on a dark background.
</param>
            <remarks>
                <para>
Sets the segmentation
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
HardRelativeThreshold </see> and sets
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh" />, 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.HardRelativeThreshold" />
and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
to the values supplied.
</para>
                <para>
This function suspends event delivery, then sets the public properties of
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" />
with the supplied values. A single event that includes all of the
affected functional area is typically generated.
</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
                <paramref name="tailLow" />, <paramref name="tailHigh" />, or
<paramref name="hardRelativeThreshold" /> is less than 0 or greater than 100.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="tailLow" /> plus
<paramref name="tailHigh" /> is greater than 100.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="polarity" /> is neither 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
DarkBlobs</see> nor 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
LightBlobs</see>.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationHardFixedThreshold(System.Int32,Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants)">
            <summary>
Sets the segmentation Mode to HardFixedThreshold and sets the
HardFixedThreshold &amp; Polarity properties to the values supplied.
</summary>
            <param name="hardFixedThreshold">
If <paramref name="polarity" /> specifies light blobs, then pixel
values that are greater than or equal to this 
<see cgnxAnchor="hard_thresholding" cref="u:Search.Blob.Theory.ToolTheory">
hard threshold</see> are part of the blob(s); pixel values that are
less than this threshold are part of the background. If
<paramref name="polarity" /> specifies dark blobs, then the ranges
are inverted.
</param>
            <param name="polarity">
Specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
DarkBlobs</see> for dark blobs on a light background or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
LightBlobs</see> for light blobs on a dark background.
</param>
            <remarks>
                <para>
Sets the segmentation
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
HardFixedThreshold</see> and sets
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.HardFixedThreshold" />
and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
to the values supplied.
</para>
                <para>
This function suspends event delivery, then sets the
public properties of
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" />
with the supplied values. A single event that includes all
of the affected functional area is typically generated.
</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
                <paramref name="hardFixedThreshold" /> is less than 0 or greater
than 65535.
</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="polarity" /> is neither 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
DarkBlobs</see> nor 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
LightBlobs</see>.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationMap(System.Byte[],System.Int32)">
            <summary>
Sets the segmentation Mode to Map 
and sets the Map &amp; ScalingValue properties to the values supplied.
</summary>
            <param name="map">
Map used to map the input image to a segmented image. Each pixel
in the input image is replaced by the value within the pixel map
at the index equal to the input image pixel value.
</param>
            <param name="scalingValue">
Pixel value that represents a blob weight of 1.0, all other pixel
values are interpreted on a linear scale relative to this value.
</param>
            <remarks>
                <para>
Sets the segmentation
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
Map</see> and sets
<see cref="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetMap(System.Byte[])" />
and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" />
to the values supplied.
</para>
                <para>
This function suspends event delivery, then sets the public properties of
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" />
with the supplied values. A single event that includes all of the affected
functional area is typically generated.
</para>
            </remarks>
            <exception cref="System.ArgumentException">
                <paramref name="map" /> is NULL, or the supplied value is
not a 1-dimensional array with a size of eithe r256 or 65536.
</exception>
            <exception cref="System.ArgumentException">
                <paramref name="scalingValue" /> is less than or equal to 0 or greater
than 255.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetSegmentationNone(System.Int32)">
            <summary>
Sets the segmentation Mode to None and sets the ScalingValue
property to the value supplied.
</summary>
            <param name="scalingValue">
Pixel value that represents a blob weight of 1.0, all other
pixel values are interpreted on a linear scale relative
to this value.
</param>
            <remarks>
                <para>
Sets the segmentation
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
to 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
None</see> and sets
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" />
to the value supplied.
</para>
                <para>
This function suspends event delivery, then sets the public
properties of
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" />
with the supplied values. A single event that includes all of the
affected functional area is typically generated.
</para>
            </remarks>
            <exception cref="System.ArgumentException">
                <paramref name="scalingValue" /> is less than or equal to 0
or greater than 255.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetMap(System.Byte[])">
            <summary>
Pixel map that is to be applied to the InputImage when
using the Map segmentation mode. Each pixel in the input image is
replaced by the value within the pixel map at the index equal to the
input image pixel value.
</summary>
            <remarks>
The pixel map used to segment the input image when 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
Map</see>. Each pixel in the input image is replaced by the value within
the pixel map at the index equal to the input image pixel value.
</remarks>
            <param name="value">
The desired Map values.
</param>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetMap" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is NULL, or the supplied value is
not a 1-dimensional array with a size of either 256 or 65536.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.GetMap">
            <summary>
Pixel map that is to be applied to the InputImage when
using the Map segmentation mode. Each pixel in the input image is
replaced by the value within the pixel map at the index equal to the
input image pixel value.
</summary>
            <remarks>
The pixel map used to segment the input image when 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
Map</see>. Each pixel in the input image is replaced by the value within
the pixel map at the index equal to the input image pixel value.
</remarks>
            <returns>
The default is pixel map by which pixel values less than 64 map to 0,
pixel values from 64 through 192 map to 255, and pixel values
greater than 192 map to 0. (The map assumes that the tool is
configured to use the default
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" />
of 255).
</returns>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetPostMap(System.Byte[])">
            <summary>
Pixel map that is to be applied to the image that
resulted from subtracting the SubtractionImage from the InputImage.
The value resulting from the subtraction is used as an index into
PostMap and is replaced with the value at that index in PostMap.
</summary>
            <remarks>
Pixel map that is to be applied to the image that
resulted from subtracting the SubtractionImage from the InputImage.
This property is only used if
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see>. Each pixel in the subtracted image is used as an
index into the supplied map. The input pixel value is replaced with the
value from the map.
</remarks>
            <param name="value">
The desired PostMap values.
</param>
            <returns>
The default is a map which sets differences less than 20 equal to 0 and
differences greater than or equal to 20 equal to 255 (the map
assumes that the tool is configured to use the default
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" />
of 255).
</returns>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetPostMap" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is NULL, or the supplied value is
not a 1-dimensional array with a size of either 256
or 65536.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.GetPostMap">
            <summary>
Pixel map that is to be applied to the image that
resulted from subtracting the SubtractionImage from the InputImage.
The value resulting from the subtraction is used as an index into
PostMap and is replaced with the value at that index in PostMap.
</summary>
            <remarks>
Pixel map that is to be applied to the image that
resulted from subtracting the  subtraction image from the input image.
This property is only used if
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see>. Each pixel in the subtracted image is used as
an index into the supplied map. The input pixel value is replaced with
the value from the map.
</remarks>
            <returns>
The default is a map which sets differences less than 20 equal
to 0 and diffferences greater than or equal to 20 equal to 255
(the map assumes that the tool is configured to use the default
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue" />
of 255).
</returns>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetPreMap16(System.UInt16[])">
            <summary>
Pixel map that is to be applied to the 16 bit InputImage when
using subtraction image as the segmentation mode. Each pixel in the
InputImage is used as an index into PreMap16. The input pixel value is
replaced with the value from PreMap16.
</summary>
            <remarks>
                <para>
Pixel map that is to be applied to the 16 bit input image before
subtracting the subtraction image. This property is only used if
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see>. Each pixel in the input image is used as an
index into the supplied map. The input pixel value is replaced with the
value from the map.
</para>
            </remarks>
            <param name="value">
The desired PreMap16 values.
</param>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetPreMap16" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is
not a 1-dimensional array with a size of 65536.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SetPreMap(System.Byte[])">
            <summary>
Pixel map that is to be applied to the InputImage when
using subtraction image as the segmentation mode. Each pixel in the
InputImage is used as an index into PreMap. The input pixel value is
replaced with the value from PreMap.
</summary>
            <remarks>
                <para>
Pixel map that is to be applied to the input image before subtracting
the subtraction image. This property is only used if
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see>. Each pixel in the input image is used as an
index into the supplied map. The input pixel value is replaced with the
value from the map.
</para>
            </remarks>
            <param name="value">
The desired PreMap values.
</param>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetPreMap" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is NULL, or the supplied value is
not a 1-dimensional array with a size of 256.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.GetPreMap16">
            <summary>
Pixel map that is to be applied to the 16 bit InputImage when
using subtraction image as the segmentation mode. Each pixel in the
InputImage is used as an index into PreMap16. The input pixel value is
replaced with the value from PreMap16.
</summary>
            <remarks>
Pixel map that is to be applied to the 16 bit input image
before subtracting the subtraction image. This property is only used if
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see>. Each pixel in the input image is used as an
index into the supplied map. The input pixel value is replaced with
the value from the map.
</remarks>
            <returns>
The default is a null pointer.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.GetPreMap">
            <summary>
Pixel map that is to be applied to the InputImage when
using subtraction image as the segmentation mode. Each pixel in the
InputImage is used as an index into PreMap. The input pixel value is
replaced with the value from PreMap.
</summary>
            <remarks>
Pixel map that is to be applied to the input image before subtracting
the subtraction image. This property is only used if
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" />
is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see>. Each pixel in the input image is used as an
index into the supplied map. The input pixel value is replaced with
the value from the map.
</remarks>
            <returns>
The default is the identity map.
</returns>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.ScalingValue">
            <summary>
Pixel value that represents a blob weight of 1.0, all
other pixel values are interpreted on a linear scale relative to
ScalingValue.
</summary>
            <remarks>
                <para>
Pixel value that represents a blob weight of 1.0, all other pixel
values are interpreted on a linear scale relative to ScalingValue.
</para>
                <para>
This property is only useful if you are specifying 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
None</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
Map</see>, or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see>. You should make sure that no pixel in the input
image has a value greater than the scaling value, and you should also
make sure that no value in the
<see cref="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.GetMap" />
or
<see cref="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.GetPostMap" />
maps has a value greater than the scaling value.
</para>
                <para>
This parameter is ignored for labeled connectivity.
</para>
            </remarks>
            <value>
The default is 255.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfScalingValue" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is less than or equal to 0 or greater
than 255.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImageOffsetY">
            <summary>
Y offset value in pixels. The X &amp; Y offset values
measure the offset from the upper-left corner of the run-time input
image to the upper-left corner of the SubtractionImage in image
coordinates of the input image.
</summary>
            <remarks>
The Y offset value in pixels of the
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />.
The X and Y offset values measure the offset from the upper-left
corner of the run-time input image to the upper-left corner of the 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />
in image coordinates of the input image.
</remarks>
            <value>
The default value is 0.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSubtractionImageOffsetY" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImageOffsetX">
            <summary>
X offset value in pixels. The X &amp; Y offset values
measure the offset from the upper-left corner of the run-time input
image to the upper-left corner of the SubtractionImage in image
coordinates of the input image.
</summary>
            <remarks>
The X offset value in pixels of the
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />.
The X and Y offset values measure the offset from the upper-left
corner of the run-time input image to the upper-left corner of the 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage" />
in image coordinates of the input image.
</remarks>
            <value>
The default value is 0.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSubtractionImageOffsetX" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImage">
            <summary>
The subtraction image used when the segmentation mode is
SubtractionImage. The SubtractionImageOffsetX &amp;
SubtractionImageOffsetY specify the pixel alignment of this image
with the blob analysis InputImage.
</summary>
            <remarks>
                <para>
The 
<see cgnxAnchor="threshold_image" cref="u:Search.Blob.Theory.ToolTheory">
subtraction (or threshold) image</see> used when 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode" /> is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see>.
</para>
                <para>
The 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImageOffsetX" />
and 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SubtractionImageOffsetY" />
properties specify the pixel alignment of this image with the blob 
analysis InputImage.
</para>
            </remarks>
            <value>
The default is NULL.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSubtractionImage" />
                    </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity">
            <summary>
Blob polarity used for image segmentation with either
soft or hard thresholding. Indicates either dark blobs on a light
background or light blobs on a dark background.
</summary>
            <remarks>
                <para>
Blob 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
polarity</see> used for image segmentation with either soft or hard
thresholding. Specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
DarkBlobs</see> for dark blobs on a light background or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
LightBlobs</see> for light blobs on a dark background.
</para>
                <para>
This parameter is only used for the following segmentation modes:
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
HardDynamicThreshold</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
HardFixedThreshold</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
HardRelativeThreshold</see>, 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SoftFixedThreshold</see>, or 
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SoftRelativeThreshold</see>.
</para>
            </remarks>
            <value>
The default is
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
DarkBlobs</see>.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfPolarity" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is not a member of
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants" /></exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.HardRelativeThreshold">
            <summary>
A fixed threshold is computed by determining the pixel
value which lies at the specified percentage of the distance between
the low tail pixel value and the high tail pixel value. This computed
threshold is then used to perform Hard-Fixed segmentation.
</summary>
            <remarks>
                <para>
A 
<see cgnxAnchor="relative_hard_thresholding" cref="u:Search.Blob.Theory.ToolTheory">
hard fixed threshold</see> is computed by determining the pixel value
which lies at the specified percentage of the distance between the
low tail pixel value and the high tail pixel value. This computed
threshold is then used to perform Hard-Fixed segmentation.
</para>
                <para>
If
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
specifies light blobs, then pixels values that are greater than 
or equal to this computed threshold are part of the blob(s);
pixel values that are less than this threshold are part of 
the background. If
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
specifies dark blobs, then the ranges are inverted.
</para>
            </remarks>
            <value>
The default is 50.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfHardRelativeThreshold" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is less than 0 or greater than 100.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.HardFixedThreshold">
            <summary>
If Polarity is light blobs then pixels values that are
greater than or equal to this threshold are part of the blob(s); pixel
values that are less than this threshold are part of the background.
If polarity is dark blobs then the ranges are inverted.
</summary>
            <remarks>
                <para>
If
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
specifies light blobs, then pixels values that are greater than 
or equal to this 
<see cgnxAnchor="hard_thresholding" cref="u:Search.Blob.Theory.ToolTheory">
hard threshold</see> are part of the blob(s); pixel values that are less
than this threshold are part of the background. If
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
specifies dark blobs, then the ranges are inverted.
</para>
            </remarks>
            <value>
The default is 128.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfHardFixedThreshold" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is less than 0 or greater than 65535.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftFixedThresholdHigh">
            <summary>
Pixel values above(&gt;=) the high threshold are background
(weight 0) or full-weight blob (weight 1) depending on the Polarity.
Values between the low and high thresholds are considered fractional
blob (weight between 0 and 1, exclusive). See Softness.
</summary>
            <remarks>
                <para>
When 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
indicates light blobs, pixel values that are greater than the high
threshold are assigned a blob weight equal to 1. The range of pixel
values between the low and high threshold is divided into
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />
equally sized ranges. Pixels with values in each of these ranges are
assigned values between 1 and
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />.
A segmentation value of 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />+1
corresponds to a blob weight of one while all other segmentation values
are interpreted on a linear scale relative to
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />+1.
</para>
                <para>
Pixel values that are greater than the high threshold are assigned
a blob weight of 0 when
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
indicates dark blobs.
</para>
                <para>
The low threshold must be less than the high threshold. If a value
is supplied such that this requirement is not met, the other threshold
is adjusted.
</para>
            </remarks>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdHigh" />
                    </item>
                </list>
            </event>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the both the low and high thresholds are changed.
</para>
                <para>
The following state flags may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdLow" />
                    </item>
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdHigh" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is less than 1 or greater than 65535.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftFixedThresholdLow">
            <summary>
Pixel values below the low threshold are background
(weight 0) or full-weight blob (weight 1.0) depending on the Polarity.
Values between the low and high thresholds are considered fractional
blob (weight between 0 and 1, exclusive). See Softness.
</summary>
            <remarks>
                <para>
The low threshold for
<see cgnxAnchor="soft_thresholding_and_pixel_weighting" cref="u:Search.Blob.Theory.ToolTheory">
soft fixed segmentation</see>. Pixel values that are less than the low
threshold are assigned a blob weight of 0 when
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
indicates light blobs. Pixel values that are less than the low threshold
are assigned a blob weight of 1 when
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
indicates dark blobs.
</para>
                <para>
The low threshold must be less than the high threshold. If a
value is supplied such that this requirement is not met, the
other threshold is adjusted.
</para>
            </remarks>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdLow" />
                    </item>
                </list>
            </event>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the both the low and high thresholds are changed.
</para>
                <para>
The following state flags may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdLow" />
                    </item>
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdHigh" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is less than 0 or greater than 655344.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness">
            <summary>
The maximum number of fractional weights between
background pixels (whose weight is 0.0) and full-weight blob pixels
(whose weight is 1.0). The fractional weights are represented in the
segmentation image by pixel values between 1 and softness.
</summary>
            <remarks>
The number of intermediate weights separating blobs(1) and
background(0). Pixel values between the low and high
threshold are assigned to a blob weight between 0.0 and 1.0,
exclusive.
</remarks>
            <value>
The default is 254.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftness" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is less than 0 or greater than 254.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftRelativeThresholdHigh">
            <summary>
This relative threshold specifies a percentage of the distance
between the low and high tail grey scale pixel values. The
grey scale pixel value determined by this relative percentage
is then used as a soft, fixed threshold.
</summary>
            <remarks>
                <para>
Soft relative thresholding computes a high soft threshold value by 
determining the pixel value which lies at the specified percentage 
of the distance between the low tail pixel value and the high tail
pixel value. 
</para>
                <para>
When 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
indicates light blobs, pixel values that are greater than the
computed high threshold are assigned a blob weight equal to 1. 
The range of pixel values between the computed low and high
threshold is divided into
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />
equally sized ranges. Pixels with values in each of these ranges are
assigned values between 1 and
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />.
A segmentation value of 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />+1
corresponds to a blob weight of one while all other segmentation values are
interpreted on a linear scale relative to
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Softness" />+1.
</para>
                <para>
Pixel values that are greater than the computed high threshold are
assigned a blob weight of 0 when
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
indicates dark blobs.
</para>
                <para>
The low threshold must be less than or equal to the high threshold.
If a value is supplied such that this requirement is not met, both
thresholds are adjusted.
</para>
            </remarks>
            <value>
The default is 60.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdHigh" />
                    </item>
                </list>
            </event>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the both the low and high threshold values are changed.
</para>
                <para>
The following state flags may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdLow" />
                    </item>
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdHigh" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is less than 0 or greater than 100.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SoftRelativeThresholdLow">
            <summary>
This relative threshold specifies a percentage of the distance
between the low and high tail grey scale pixel values. The
grey scale pixel value determined by this relative percentage
is then used as a soft, fixed threshold.
</summary>
            <remarks>
                <para>
Soft relative thresholding computes a low soft threshold value by
determining the pixel value which lies at the specified percentage 
of the distance between the low tail pixel value and the high tail
pixel value. Pixel values that are less than the computed low
threshold are assigned a blob weight of 0 when 
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
indicates light blobs. Pixel values that are less than the computed
low threshold are assigned a blob weight of 1 when
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Polarity" />
indicates dark blobs.
</para>
                <para>
The low threshold must be less than or equal to the high threshold.
If a value is supplied such that this requirement is not met,
both thresholds are adjusted.
</para>
            </remarks>
            <value>
The default is 40.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdLow" />
                    </item>
                </list>
            </event>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the both the low and high threshold percentages are changed.
</para>
                <para>
The following state flags may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdLow" />
                    </item>
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdHigh" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is less than 0 or greater than 100.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailHigh">
            <summary>
The percentage of high tail pixels to discard before
computing either a hard relative, hard dynamic, or soft
relative threshold.
</summary>
            <remarks>
                <para>
The percentage of high 
<see cgnxAnchor="relative_hard_thresholding" cref="u:Search.Blob.Theory.ToolTheory">
tail pixels</see> to discard before computing either a hard relative,
hard dynamic, or soft relative threshold.
</para>
                <para>
The sum of the low and high tail value must be less than or equal
to 100. If a tail value is set such that this requirement is not met,
the other tail value is adjusted.
</para>
            </remarks>
            <value>
The default is 0%.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailHigh" />
                    </item>
                </list>
            </event>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the both the low and high tail values are changed.
</para>
                <para>
The following state flags may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailLow" />
                    </item>
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailHigh" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is less than 0 or greater than 100.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.TailLow">
            <summary>
The percentage of low tail pixels to discard before
computing either a hard relative, hard dynamic, or soft
relative threshold.
</summary>
            <remarks>
                <para>
The percentage of low 
<see cgnxAnchor="relative_hard_thresholding" cref="u:Search.Blob.Theory.ToolTheory">
tail pixels</see> to discard before computing either a hard relative,
hard dynamic, or soft relative threshold.
</para>
                <para>
The sum of the low and high tail value must be less than or equal
to 100. If a tail value is set such that this requirement is not met,
the other tail value is adjusted.
</para>
            </remarks>
            <value>
The default is 0%.
</value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailLow" />
                    </item>
                </list>
            </event>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the both the low and high tail values are changed.
</para>
                <para>
The following state flags may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailLow" />
                    </item>
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailHigh" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is less than 0 or greater than 100.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">
            <summary>
The method used to segment an input image into pixels
that make up the blob(s) and pixels that are part of the background.
</summary>
            <remarks>
The
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
method</see> used to segment an input image into pixels that make up
</remarks>
            <value>
The default is
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
HardDynamicThreshold</see></value>
            <event cref="Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfMode" />
                    </item>
                </list>
            </event>
            <exception cref="System.ArgumentException">
The supplied value is not a member of
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams" /></exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogBlobSegmentationParams object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Clone">
            <summary>
Returns a deep copy of this class instance. Derived classes that
implement Clone should override this method. Other clients who
wish to clone this instance should call ICloneable.Clone.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Finalize">
            <summary>
Finalize this CogBlobSegmentationParams.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Dispose">
            <summary>
Destruct this CogBlobSegmentationParams.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.#ctor(Cognex.VisionPro.Blob.CogBlobSegmentationParams)">
            <summary>
Constructs a new instance of this class as a deep copy of the
given instance.
</summary>
            <param name="Other">
The CogBlobSegmentationParams object to be copied. May not be null.
</param>
            <exception cref="System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobSegmentationParams.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetPreMap16">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by GetPreMap16 may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetMap">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by GetMap may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetPostMap">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by GetPostMap may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfGetPreMap">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by GetPreMap may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfScalingValue">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by ScalingValue may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSubtractionImageOffsetY">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by SubtractionImageOffsetY may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSubtractionImageOffsetX">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by SubtractionImageOffsetX may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSubtractionImage">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by SubtractionImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfPolarity">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Polarity may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfHardRelativeThreshold">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by HardRelativeThreshold may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfHardFixedThreshold">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by HardFixedThreshold may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdHigh">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by SoftRelativeThresholdHigh may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftRelativeThresholdLow">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by SoftRelativeThresholdLow may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftness">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Softness may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdHigh">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by SoftFixedThresholdHigh may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfSoftFixedThresholdLow">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by SoftFixedThresholdLow may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailHigh">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by TailHigh may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfTailLow">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by TailLow may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationParams.SfMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Mode may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobSegmentationParams">
            <summary>
Class which holds image segmentation parameters. Blob
analysis provides numerous methods of segmenting an image into object
and background pixels. The primary interface of this class allows the
user to select and configure the method of segmentation.
</summary>
            <remarks>
Blob analysis provides numerous methods of 
<see cgnxAnchor="image_segmentation" cref="u:Search.Blob.Theory.ToolTheory">
segmenting</see> an image into object pixels and background pixels.
This interface lets you control exactly how the image is segmented.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.IndexOf(Cognex.VisionPro.Blob.CogBlobMorphologyConstants)">
            <summary>
Get the index of the given item. If the item cannot be
found -1 is returned.
</summary>
            <param name="value">
The item whose index is desired.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Insert(Cognex.VisionPro.Blob.CogBlobMorphologyConstants,System.Int32)">
            <summary>
Inserts the given item at the specified index.
</summary>
            <param name="value">
The item to be inserted.
</param>
            <param name="index">
The index at which to insert the item.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied index is not a valid index into this collection.
</exception>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.InsertingItem">
Occurs before the value is inserted.
</event>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.InsertedItem">
Occurs after the value is inserted.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires because this method changes the Count and Item properties.
</event>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Add(Cognex.VisionPro.Blob.CogBlobMorphologyConstants)">
            <summary>
Adds the given item to the end of this collection.
</summary>
            <param name="value">
The item to be added.
</param>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.InsertingItem">
Occurs before the value is inserted.
</event>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.InsertedItem">
Occurs after the value is inserted.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires because this method changes the Count and Item properties.
</event>
            <exception cref="T:System.ArgumentException">
If the supplied value is not a valid member of the enumeration.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.SyncRoot">
            <summary>
Gets an object that can be used to synchronize access to this
collection.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.IsSynchronized">
            <summary>
Gets a value indicating whether access to this collection
is synchronized (thread-safe).
</summary>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Item(System.Int32)">
            <summary>
Gets or sets the item at the specified index. In C#, this property
is the indexer for the collection.
</summary>
            <param name="index">
The index of the item to get or set.
</param>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.ReplacingItem">
Occurs before the value is replaced.
</event>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.ReplacedItem">
Occurs after the value is replaced.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires after the Item is set to a new value.
</event>
            <exception cref="T:System.IndexOutOfRangeException">
If the supplied index parameter is not valid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Clone">
            <summary>
Returns a deep copy of this class instance. Derived classes that
implement Clone should override this method. Other clients who
wish to clone this instance should call ICloneable.Clone.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogBlobMorphologyCollection object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Finalize">
            <summary>
Finalize this CogBlobMorphologyCollection object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.Dispose">
            <summary>
Destruct this CogBlobMorphologyCollection object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.#ctor(Cognex.VisionPro.Blob.CogBlobMorphologyCollection)">
            <summary>
Construct a new instance of this class as a deep copy
</summary>
            <param name="Other">
The instance to copy from.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMorphologyCollection.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyCollection">
            <summary>
A collection of CogBlobMorphologyConstants indicating
which morphology operations are to be performed on the segmented image.
The operations are performed in the order in which they are added to the
collection. Operations can be added multiple times.
</summary>
            <remarks>
A collection of
<see cref="T:Cognex.VisionPro.Blob.CogBlobMorphologyConstants" />
indicating which morphology operations are to be performed on the
segmented image. The operations are performed in the order in which
they are added to the collection. Operations can be added multiple
times to repeat an operation.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.IndexOf(Cognex.VisionPro.Blob.CogBlobMeasure)">
            <summary>
Get the index of the given item. If the item cannot be
found -1 is returned.
</summary>
            <param name="value">
The item whose index is desired.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Insert(Cognex.VisionPro.Blob.CogBlobMeasure,System.Int32)">
            <summary>
Inserts the given item at the specified index.
</summary>
            <param name="value">
The item to be inserted.
</param>
            <param name="index">
The index at which to insert the item.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied index is not a valid index into this collection.
</exception>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.InsertingItem">
Occurs before the value is inserted.
</event>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.InsertedItem">
Occurs after the value is inserted.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires because this method changes the Count and Item properties.
</event>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Add(Cognex.VisionPro.Blob.CogBlobMeasure)">
            <summary>
Adds the given item to the end of this collection.
</summary>
            <param name="value">
The item to be added.
</param>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.InsertingItem">
Occurs before the value is inserted.
</event>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.InsertedItem">
Occurs after the value is inserted.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires because this method changes the Count and Item properties.
</event>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobMeasureCollection.SyncRoot">
            <summary>
Gets an object that can be used to synchronize access to this
collection.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobMeasureCollection.IsSynchronized">
            <summary>
Gets a value indicating whether access to this collection
is synchronized (thread-safe).
</summary>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Item(System.Int32)">
            <summary>
Gets or sets the item at the specified index. In C#, this property
is the indexer for the collection.
</summary>
            <param name="index">
The index of the item to get or set.
</param>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.ReplacingItem">
Occurs before the value is replaced.
</event>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.ReplacedItem">
Occurs after the value is replaced.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires after the Item is set to a new value.
</event>
            <exception cref="T:System.IndexOutOfRangeException">
If the supplied index parameter is not valid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Clone">
            <summary>
Create a duplicate of this CogBlobMeasureCollection object.
</summary>
            <returns>
A newly created duplicate of this CogBlobMeasureCollection object.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogBlobMeasureCollection object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Finalize">
            <summary>
Finalize this CogBlobMeasureCollection object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.Dispose">
            <summary>
Destruct this CogBlobMeasureCollection object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.#ctor(Cognex.VisionPro.Blob.CogBlobMeasureCollection)">
            <summary>
Construct a new instance of this class as a deep copy
</summary>
            <param name="Other">
The instance to copy from.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasureCollection.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobMeasureCollection">
            <summary>
A collection indicating how the specified measures will be
used during execution of blob analysis.  Blob measures can either be
used as filter criteria or precomputed such the time required to
calculate the measure is part of the blob execution time.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh">
            <summary>
The high limit of the filter range. Blobs whose
measurement falls within this range will be included in, or excluded
from, the filtered results depending on the FilterMode setting. The
high limit is considered to be 'inside' the range.
</summary>
            <remarks>
                <para>
The high limit of the filter range. The filter range specifies blobs to 
either include or exclude from the filtered results depending 
on the value of
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterMode" />.
</para>
                <para>
The value of
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" />
must be less than or equal to the value of
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" />.
If one of the values is set so that this is not true, the other value
is adjusted appropriately.
</para>
            </remarks>
            <value>
The default is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeHigh" />
                    </item>
                </list>
            </event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when both the low and high limits are changed.
</para>
                <para>
The following state flags may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeLow" />
                    </item>
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeHigh" />
                    </item>
                </list>
            </event>
            <example>
                <code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
</code>
                <code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow">
            <summary>
The low limit of the filter range. Blobs whose
measurement falls within this range will be included in, or excluded
from, the filtered results depending on the FilterMode setting. The
low limit is considered to be 'inside' the range.
</summary>
            <remarks>
                <para>
The low limit of the filter range. The filter range specifies blobs to 
either include or exclude from the filtered results depending 
on the value of
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterMode" />.
</para>
                <para>
The value of
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" />
must be less than or equal to the value of
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" />.
If one of the values is set so that this is not true, the other value
is adjusted appropriately.
</para>
            </remarks>
            <value>
The default is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeLow" />
                    </item>
                </list>
            </event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when both the low and high limits are changed.
</para>
                <para>
The following state flags may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeLow" />
                    </item>
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeHigh" />
                    </item>
                </list>
            </event>
            <example>
                <code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
</code>
                <code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterMode">
            <summary>
This mode specifies how to interpret the filter range.
It dictates whether blobs whose measurement falls within the range
will be included in, or excluded from, the filtered results. The
range limits are considered to be 'inside' the range.
</summary>
            <remarks>
                <para>
Mode indicating how the filter range is to be interpreted. Specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobFilterModeConstants">
ExcludeBlobsInRange</see> to include only blobs that have a measurement
value that is less than
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" />
or greater than
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" />.
Specify
<see cref="T:Cognex.VisionPro.Blob.CogBlobFilterModeConstants">
IncludeBlobsInRange</see> to include only blobs that have a measurement
value that is greater than or equal to 
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" />
or less than or equal to
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" />.
</para>
            </remarks>
            <value>
The default is ExcludeBlobsInRange.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterMode" />
                    </item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
The supplied value is not a member of
<see cref="T:Cognex.VisionPro.Blob.CogBlobFilterModeConstants" /></exception>
            <example>
                <code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
</code>
                <code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobMeasure.Mode">
            <summary>
Mode indicating how the specified measure will be used
during execution of blob analysis. It may indicate no special run-
time usage, the measure is to be used as a filter criterion, or that
the measure will be computed at run-time.
</summary>
            <remarks>
                <para>
Mode that indicates how the measure is used during execution of
blob analysis. 
</para>
                <para> 
If this property is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants">
None</see>, no run-time action is taken regarding the measure.
If this property is 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants">
Filter</see>, then the values specified for
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterMode" />,
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" />, 
and
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" />
are used to filter blobs at run time. If this property is
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants">
PreCompute</see>, then the specified measure is computed at run-time
for all blobs in the image.  
</para>
                <para>
Note that by default, blob measures are only computed when your program
specifically requests them. Specifying 
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants">
PreCompute</see> forces the tool to compute the specified measure for
all blobs at once, making it easier to determine how much time blob
analysis requires during your program's operation.
</para>
            </remarks>
            <value>
The default is
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants">
PreCompute</see>.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfMode" />
                    </item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
The supplied value is not a member of
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants" /></exception>
            <example>
                <code lang="Visual Basic">
    Imports Cognex.VisionPro
    Imports Cognex.VisionPro.Blob
    
    Dim myBlob As New CogBlob
    Dim myAreaMeasure As New CogBlobMeasure
    Dim myPerimeterMeasure As New CogBlobMeasure
    Dim myBlobResults As CogBlobResults

    Try
      ' Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myAreaMeasure.FilterRangeLow = 10
      myAreaMeasure.FilterRangeHigh = 500000
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange
      myPerimeterMeasure.FilterRangeLow = 100
      myPerimeterMeasure.FilterRangeHigh = 500000
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter
      myBlob.RunTimeMeasures.Add(myAreaMeasure)
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure)

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare)
      ' mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r)
      Debug.WriteLine(myBlobResults.GetBlobs.Count.ToString)
      Dim aResult As CogBlobResult
      Dim avgArea As Double
      For Each aResult In myBlobResults.GetBlobs
        avgArea = avgArea + aResult.Area
      Next

      avgArea = avgArea / myBlobResults.GetBlobs.Count
      Debug.WriteLine(" AvgArea:" + avgArea.ToString)

    Catch ex As Exception
      Debug.WriteLine("Following Error Occurred:" + ex.Message)

    End Try
</code>
                <code lang="C#">
    using Cognex.VisionPro; 
    using Cognex.VisionPro.Blob;
    
    private void doBlob()
    {
      CogBlob myBlob=new CogBlob(); 
      CogBlobMeasure myAreaMeasure=new CogBlobMeasure();  
      CogBlobMeasure myPerimeterMeasure=new CogBlobMeasure(); 
      CogBlobResults myBlobResults; 
      Double avgArea=0;
      try
    {
      // Find all blobs with an area greater than 10 and' a perimeter greater than 100 pixels
      myAreaMeasure.Measure = CogBlobMeasureConstants.Area;
      myAreaMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myAreaMeasure.FilterRangeLow = 10;
      myAreaMeasure.FilterRangeHigh = 500000;
      myAreaMeasure.Mode = CogBlobMeasureModeConstants.Filter;

      myPerimeterMeasure.Measure = CogBlobMeasureConstants.Perimeter;
      myPerimeterMeasure.FilterMode = CogBlobFilterModeConstants.IncludeBlobsInRange;
      myPerimeterMeasure.FilterRangeLow = 100;
      myPerimeterMeasure.FilterRangeHigh = 500000;
      myPerimeterMeasure.Mode = CogBlobMeasureModeConstants.Filter;
      myBlob.RunTimeMeasures.Add(myAreaMeasure);
      myBlob.RunTimeMeasures.Add(myPerimeterMeasure);

      myBlob.ConnectivityCleanup = CogBlobConnectivityCleanupConstants.Fill;
      myBlob.SegmentationParams.Mode = CogBlobSegmentationModeConstants.HardDynamicThreshold;
      myBlob.MorphologyOperations.Add(CogBlobMorphologyConstants.CloseSquare);
      // mobjImage is an acquired image
      myBlobResults = myBlob.Execute(mobjImage, r);
      Debug.WriteLine(myBlobResults.GetBlobs(true).Count.ToString());
     
      foreach (CogBlobResult aResult in myBlobResults.GetBlobs(true))
      {
        avgArea = avgArea + aResult.Area;
      }
      
      avgArea =avgArea / myBlobResults.GetBlobs(true).Count;
      Debug.WriteLine(" AvgArea:" + avgArea.ToString());
    }
      catch (System.Exception ex)
      {
        Debug.WriteLine("Following Error Occurred:" + ex.Message);
      }
   
                                
    }
</code>
            </example>
        </member>
        <member name="P:Cognex.VisionPro.Blob.CogBlobMeasure.Measure">
            <summary>
The measure for which usage during execution is being specified.
</summary>
            <remarks>
The
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
measure</see> for which usage during execution is being specified.
</remarks>
            <value>
The default is
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">Area</see>.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <para>
The following state flag may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfMeasure" />
                    </item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
The supplied value is not a member of
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants" /></exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogBlobMeasure object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.Clone">
            <summary>
Create a duplicate of this CogBlobMeasure object.
</summary>
            <returns>
A newly created duplicate of this CogBlobMeasure object.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.Finalize">
            <summary>
Finalize this CogBlobMeasure.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.Dispose">
            <summary>
Destruct this CogBlobMeasure.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.#ctor(Cognex.VisionPro.Blob.CogBlobMeasure)">
            <summary>
Constructs a new instance of this class as a deep copy of the
given instance.
</summary>
            <param name="Other">
The CogBlobMeasure object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.#ctor(Cognex.VisionPro.Blob.CogBlobMeasureConstants,Cognex.VisionPro.Blob.CogBlobMeasureModeConstants,Cognex.VisionPro.Blob.CogBlobFilterModeConstants,System.Double,System.Double)">
            <summary>
Constructs a new instance of CogBlobMeasure with
the supplied parameters.
</summary>
            <param name="measure">
The measure whose usage is being described.
</param>
            <param name="mode">
How the subject measure is processed at runtime.
</param>
            <param name="filterMode">
How FilterRangeLow and FilterRangeHigh are to be interpreted.
Only meaningful if Mode is Filter.
</param>
            <param name="filterRangeLow">
The low limit of the filter range.
Only meaningful if Mode is Filter.
</param>
            <param name="filterRangeHigh">
The high limit of the filter range.
Only meaningful if Mode is Filter.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.#ctor(Cognex.VisionPro.Blob.CogBlobMeasureConstants,Cognex.VisionPro.Blob.CogBlobMeasureModeConstants)">
            <summary>
Constructs a new instance of CogBlobMeasure with
the supplied Measure and Mode values.
</summary>
            <param name="measure">
The measure whose usage is being described.
</param>
            <param name="mode">
How the subject measure is processed at runtime.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.#ctor(Cognex.VisionPro.Blob.CogBlobMeasureConstants)">
            <summary>
Constructs a new instance of CogBlobMeasure with
the supplied Measure value.
</summary>
            <param name="measure">
The measure whose runtime usage is being described.
</param>
        </member>
        <member name="M:Cognex.VisionPro.Blob.CogBlobMeasure.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by FilterMode may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeHigh">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by FilterRangeHigh may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfFilterRangeLow">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by FilterRangeLow may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Mode may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasure.SfMeasure">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Measure may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobMeasure">
            <summary>
Class indicating how a specified measure will be used
during execution of blob analysis. Blob measures can either be used
as filter criteria or precomputed such that the time required to
calculate the measure is part of the blob analysis execution time.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogBlobMeasureNotComputedException">
            <summary>
The exception that is thrown when you attempt to access
a measurement that was not computed because
ComputeBlobRLE or ComputeInertia or ComputeTopology
was false.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogBlobEntireBlobExcludedException">
            <summary>
The exception that is thrown when the entire blob has been
excluded because you specified an extrema exclusion setting
greater than or equal to the area of the blob.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogBlobDynamicThresholdNotComputedException">
            <summary>
The exception that is thrown when the segmentation mode is
HardDynamicThreshold but a dynamic threshold could not be computed,
probably because you specified the same value for both the low and high
tail percentages. Or because the input image contains only a very
small range of grey levels.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogBlobDuplicateMeasureException">
            <summary>
The exception that is thrown when the
<see cref="T:Cognex.VisionPro.Blob.CogBlobMeasure" /> you are
adding to the collection of run-time measures has the same
measure as an existing member of the collection. Only one
object per measure is allowed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogBlobInvalidMeasureException">
            <summary>
The exception that is thrown when the connectivity mode is
WholeImageGreyScale and you have requested one of the following
measurements: BoundaryPixelLength, Acircularity,
AcircularityRms, or Perimeter.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogBlobSaveSegmentedImageBeforeMorphologyErrorException">
            <summary>
The exception that is thrown
when <see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMorphology" />
is set to False but the corresponding bit is set in the
LastRunRecordDiagEnable property of the blob tool.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogBlobSaveSegmentedImageBeforeMaskingErrorException">
            <summary>
The exception that is thrown when
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImageBeforeMasking" />
is set to False but the corresponding bit is set in the
LastRunRecordDiagEnable property of the blob tool.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogBlobSaveSegmentedImageErrorException">
            <summary>
The exception that is thrown when
<see cref="P:Cognex.VisionPro.Blob.CogBlob.SaveSegmentedImage" />
is set to False but the corresponding bit is set in the
LastRunRecordDiagEnable property of the blob tool.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogBlobSubtractionImageAlignmentErrorException">
            <summary>
The exception that is thrown when the segmentation mode is
SubtractionImage and the subtraction image does not completely overlap
the processed region of the input image. This exception usually occurs
because the subtraction image is too small or because incorrect offset
values were supplied.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogBlobNoSubtractionImagePixelsException">
            <summary>
The exception that is thrown when the segmentation mode is
SubtractionImage and the subtraction image has no pixels.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogBlobNoSubtractionImageException">
            <summary>
The exception that is thrown when the segmentation mode is
SubtractionImage and the subtraction image was null.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants">
            <summary>
Enumeration of data that can be provided in the Tool's
CurrentRecord.
</summary>
            <remarks>
                <para>
Use these constants with
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.CurrentRecordEnable" />
to specify the
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see>
that the CogBlob Tool generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</para>
                <para>
See <see cgnxAnchor="cogblobtool_record_keys" cref="u:Programming.Tools.Theory.RecordKeys">
About Record Keys</see> for a list of the record keys that the tool uses.
</para>
            </remarks>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.All">
            <summary>
Include all possible records in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.SubtractionImage">
            <summary>
Include the subtraction image in the CurrentRecord. This record
is only included if the
<see cref="P:Cognex.VisionPro.Blob.CogBlobSegmentationParams.Mode">
segmentation mode</see> is
<see cref="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
SubtractionImage</see>.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.InputImageMask">
            <summary>
Include a graphic representing the input image mask in
the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.Histogram">
            <summary>
Include a histogram of the input image in the
CurrentRecord. The histogram also provides a graphical representation
of the segmentation parameters.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.Region">
            <summary>
Include the (interactive) region to be used for blob
analysis in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.InputImage">
            <summary>
Include the input image in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobCurrentRecordConstants.None">
            <summary>
Do not include any records in the CurrentRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants">
            <summary>
Enumeration of Diagnostic data that can be provided in the
Tool's LastRunRecord.
</summary>
            <remarks>
                <para>
Use these constants with
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordDiagEnable" />
to specify the diagnostic
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see>
that the CogBlob Tool generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</para>
                <para>
See
<see cgnxAnchor="cogblobtool_record_keys" cref="u:Programming.Tools.Theory.RecordKeys">
About Record Keys</see> for a list of the record keys that the tool uses.
</para>
            </remarks>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.All">
            <summary>
Include all of the diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.InputImageMask">
            <summary>
Include a graphic representing the input image mask in
the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.Region">
            <summary>
Include the region used for blob analysis in
the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.Histogram">
            <summary>
Include a histogram of the input image in the
LastRunRecord. The histogram also provides a graphical representation
of the segmentation parameters used for the blob analysis.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.SubtractionImageByReference">
            <summary>
Include the subtraction image in the LastRunRecord.
This record is only included if the segmentation mode is
<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants">
SubtractionImage</see>.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.SegmentedImageBeforeMasking">
            <summary>
Include a viewable version of the segmented image,
before morphology and masking, in the LastRunRecord. The
SaveSegmentedImageBeforeMasking property of the run parameters must
also be true in order to include this record.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.SegmentedImageBeforeMorphology">
            <summary>
Include a viewable version of the segmented image,
before morphology, in the LastRunRecord. The
SaveSegmentedImageBeforeMorphology property of the run parameters must
also be true in order to include this record.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.SegmentedImage">
            <summary>
Include a viewable version of the segmented image in the
LastRunRecord. The SaveSegmentedImage property of the run parameters
must also be true in order to include this record.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.InputImageDeepCopy">
            <summary>
Include a deep copy of the input image in the
LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.InputImageByReference">
            <summary>
Include a reference to the input image in the
LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordDiagConstants.None">
            <summary>
Do not include any of the diagnostic data in
the LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants">
            <summary>
Enumeration of Non-Diagnostic data that can be provided in
the Tool's LastRunRecord.
</summary>
            <remarks>
                <para>
Use these constants with
<see cref="P:Cognex.VisionPro.Blob.CogBlobTool.LastRunRecordEnable" />
to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see>
that the CogBlob Tool generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</para>
                <para>
See <see cgnxAnchor="cogblobtool_record_keys" cref="u:Programming.Tools.Theory.RecordKeys">
About Record Keys</see> for a list of the record keys that the tool uses.
</para>
            </remarks>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.All">
            <summary>
Include all of the non-diagnostic data in the
LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsUnfiltered">
            <summary>
Include graphics for all unfiltered blobs in
the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsCenterOfMass">
            <summary>
Include in the composite result graphics of the
LastRunRecord, a cross hair at the center of mass of the blob.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsBoundary">
            <summary>
Include in the composite result graphics of the
LastRunRecord, a graphic representing the boundary of the blob.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsMedianSelectedSpace">
            <summary>
Include in the composite result graphics of the
LastRunRecord, a cross at the point where the blob is divided in half
by a pair of perpendicular lines which are aligned with the axes of
the selected space of the input image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsMedianExtremaAngle">
            <summary>
Include in the composite result graphics of the
LastRunRecord, a cross at the point where the blob is divided in half
by a pair of perpendicular lines, one of which is aligned with the
angle specified by 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsMedianPrincipalAxis">
            <summary>
Include in the composite result graphics of the
LastRunRecord, a cross at the point where the blob is divided in half
by a pair of perpendicular lines, one of which is aligned with the
principal axis of this blob.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsMedianPixelAligned">
            <summary>
Include in the composite result graphics of the
LastRunRecord, a cross at the point where the blob is divided in half
by a pair of perpendicular lines which are aligned with the axes of
the pixel space of the input image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsBoundingBoxSelectedSpace">
            <summary>
Include in the composite result graphics of the
LastRunRecord, a graphic representing the smallest rectangle that
completely encloses the blob and is aligned with the selected space of
the input image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsBoundingBoxExtremaAngle">
            <summary>
Include in the composite result graphics of 
LastRunRecord, a graphic representing the smallest rectangle that
completely encloses the blob and is aligned with the angle
specified by 
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsBoundingBoxPrincipalAxis">
            <summary>
Include in the composite result graphics of the
LastRunRecord, a graphic representing the smallest rectangle that
completely encloses the blob and is aligned with the blob's
principal axis.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.ResultsBoundingBoxPixelAligned">
            <summary>
Include in the composite result graphics of the
LastRunRecord, a graphic representing the smallest rectangle that
completely encloses the blob and is aligned with the pixels
of the image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.BlobImageAsGraphic">
            <summary>
Include a partially transparent graphic over the blobs &amp; holes
in the input image of the LastRunRecord. The
<see cref="T:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants">
ResultsUnfiltered</see>
bit determines whether the graphic is drawn over the
unfiltered blobs.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.BlobImageUnfiltered">
            <summary>
Include a synthetically created image of the unfiltered
blobs &amp; holes in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.BlobImage">
            <summary>
Include a synthetically created image of the filtered
blobs &amp; holes in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLastRunRecordConstants.None">
            <summary>
Do not include any of the non-diagnostic data in the
LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants">
            <summary>
Enumeration of segmented images that may be obtained from
the results by calling CreateSegmentedImage.
</summary>
            <remarks>
Enumeration of segmented images that may be obtained from
the results by calling 
<see cref="M:Cognex.VisionPro.Blob.CogBlobResults.CreateSegmentedImage(Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants,System.Boolean)" />.
</remarks>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants.BeforeMasking">
            <summary>
The segmented image before masking and morphology have
been performed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants.BeforeMorphology">
            <summary>
The segmented image before morphology has been performed
  This image will include the effects of masking if masking
was enabled.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentedImageConstants.FinalImage">
            <summary>
The segmented blob image that was used for connectivity
analysis. This will be the segmented image after any masking or
morphology had been performed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants">
            <summary>
Constants used to specify desired result graphics
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.All">
            <summary>
Draw all result graphics.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.MedianSelectedSpace">
            <summary>
Draw a crosshair graphic at the point where the blob is divided in
half by a pair of perpendicular lines which are aligned with the axes
of the selected space of the input image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.MedianExtremaAngle">
            <summary>
Draw a cross at the point where the blob is divided in half
by a pair of perpendicular lines, one of which is aligned with
the angle specified by
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.MedianPrincipalAxis">
            <summary>
Draw a crosshair graphic at the point where the blob is divided
in half by a pair of perpendicular lines, one of which is aligned
with the principal axis of this blob.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.MedianPixelAligned">
            <summary>
Draw a crosshair graphic at the point where the blob is
divided in half by a pair of perpendicular lines which are
aligned with the axes of the pixel space of the input image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.BoundingBoxSelectedSpace">
            <summary>
Draw the smallest rectangle that completely encloses the
blob and is aligned with the selected space of the input image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.BoundingBoxExtremaAngle">
            <summary>
Draw the smallest rectangle that completely encloses the
blob and is aligned with the angle specified by
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.BoundingBoxPrincipalAxis">
            <summary>
Draw the smallest rectangle that completely encloses the
blob and is aligned with the blob's first principal axis.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.BoundingBoxPixelAligned">
            <summary>
Draw the smallest rectangle that completely encloses the
blob and is aligned with the pixels of the image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.Boundary">
            <summary>
Draw the boundary of the blob. The boundary follows the outside
edges of the pixels that make up the blob.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.CenterOfMass">
            <summary>
Draw a crosshair graphic at the center of mass of the blob.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.TipText">
            <summary>
Turn on tip text for result graphics.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobResultGraphicConstants.None">
            <summary>
Draw no result graphics.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobAxisConstants">
            <summary>
Enumeration of axes that can be selected for the median
&amp; bounding box measures.
</summary>
            <remarks>
Enumeration of the axes that you can specify when requesting a
<see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetBoundingBox(Cognex.VisionPro.Blob.CogBlobAxisConstants)" />
or 
<see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetMedianX(Cognex.VisionPro.Blob.CogBlobAxisConstants)">median</see>
measure.
</remarks>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobAxisConstants.PixelAlignedNoExclude">
            <summary>
The bounding box and median measures are based on an 
axes aligned with the pixels of the input image. The
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeMode" />
settings are ignored when selecting this axis which allows for
a faster calculation of the bounding box and median measures.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobAxisConstants.PixelAligned">
            <summary>
The bounding box and median measures are based on an
axes aligned with the pixels of the input image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobAxisConstants.ExtremaAngle">
            <summary>
The bounding box and median measures are based on the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" /> 
specified in the selected space of the input image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobAxisConstants.SelectedSpace">
            <summary>
The bounding box and median measures are based on the
coordinate axes of the selected space of the input image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobAxisConstants.Principal">
            <summary>
The bounding box and median measures are based on the
principal axis of the blob.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobLabelConstants">
            <summary>
Enumeration of blob grey scale label constants. The Label
property of CogBlobResult returns a value which indicate that the
feature is either a blob or a hole when performing grey scale
connectivity.
</summary>
            <remarks>
Enumeration of the blob grey scale connectivity label constants.
A feature's
<see cref="P:Cognex.VisionPro.Blob.CogBlobResult.Label" />
indicates whether the feature is a blob or a hole.
</remarks>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLabelConstants.Blob">
            <summary>
If performing grey scale connectivity,
<see cref="P:Cognex.VisionPro.Blob.CogBlobResult.Label" /> is
<BOLD>Blob</BOLD> if the result represents a blob.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobLabelConstants.Hole">
            <summary>
If performing grey scale connectivity,
<see cref="P:Cognex.VisionPro.Blob.CogBlobResult.Label" /> is
<BOLD>Hole</BOLD> if the result represents a hole.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants">
            <summary>
Enumeration indicates which, or none, exclude area
property is used to indicate the amount of feature to exclude for the
median and bounding box measures.
</summary>
            <remarks>
An enumeration that determines how the tool excludes pixels
lying at the extrema of a blob from the blob when computing the
<see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetBoundingBox(Cognex.VisionPro.Blob.CogBlobAxisConstants)" />
or 
<see cref="M:Cognex.VisionPro.Blob.CogBlobResult.GetMedianX(Cognex.VisionPro.Blob.CogBlobAxisConstants)">median</see> measures.
</remarks>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants.AreaPercent">
            <summary>
Specifies that the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeAreaPercent" />
property is used to indicate the amount of feature to exclude
for the median and bounding box measures. This value is specified
in terms of the percentage of pixels to exclude.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants.AreaPixels">
            <summary>
Specifies that the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeAreaPixels" />
property is used to indicate the amount of feature to exclude
for the median and bounding box measures. This value is in
image pixel units.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants.Area">
            <summary>
Specifies that the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaExcludeArea" /> 
property is used to indicate the amount of feature to exclude
for the median and bounding box measures. This value is in
units of input image's selected space.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobExtremaExcludeConstants.None">
            <summary>
No area of the feature will be excluded for the median
and bounding box measures
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants">
            <summary>
Enumeration of blob connectivity cleanup types.
</summary>
            <remarks>
Enumeration of blob
<see cgnxAnchor="image_pruning_and_filling" cref="u:Search.Blob.Theory.ToolTheory">
connectivity cleanup</see> types.
</remarks>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants.Fill">
            <summary>
Features below a specified
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ConnectivityMinPixels">
size threshold</see> are filled in with the segmentation value of
the surrounding feature. Calculations of measures will consider
the pruned feature as part of the feature that surrounds the
pruned feature.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants.Prune">
            <summary>
Features below a specified
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ConnectivityMinPixels">
size threshold</see> are discarded and will not appear in the
results. Calculations of measures will not consider 
pixels belonging to the pruned feature as part of the feature
that surrounds the pruned feature.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobConnectivityCleanupConstants.None">
            <summary>
No connectivity cleanup is performed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants">
            <summary>
Enumeration of
<see cgnxAnchor="connectivity" cref="u:Search.Blob.Theory.ToolTheory">
connectivity modes</see>.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants.WholeImageGreyScale">
            <summary>
All of the object pixels in the image are analyzed as a
single blob, regardless of whether or how they are connected
to each other. No connectivity is performed. All the blob
statistics and measures are computed using every object pixel
in the image. The boundary, perimeter, and acircularity
measures are not available when using this mode.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants.Labeled">
            <summary>
All pixels with the same label value, as produced during
the image segmentation step, are connected into individual
features. There is no notion of object or background pixels.
All features are
<see cgnxAnchor="6way_connectivity" cref="u:Search.Blob.Theory.ToolTheory">
6-connected</see>.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobConnectivityModeConstants.GreyScale">
            <summary>
Connected object pixels are grouped and analyzed as individual
features (blobs and holes). Blobs are
<see cgnxAnchor="8way_and_4way_connectivity" cref="u:Search.Blob.Theory.ToolTheory">
8-connected</see>. 
Holes are
<see cgnxAnchor="8way_and_4way_connectivity" cref="u:Search.Blob.Theory.ToolTheory">
4-connected</see>.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobMorphologyConstants">
            <summary>
Morphology operations that can be performed on the
segmented image.
</summary>
            <remarks>
                <see cgnxAnchor="morphological_operations" cref="u:Search.Blob.Theory.ToolTheory">
Morphology operations</see>
that can be performed on the segmented image.
</remarks>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.OpenSquare">
            <summary>
                <para>
Performs a square opening operation which consists of an erosion
followed by a dilation. Opening eliminates small and/or thin blobs.
It maintains the relative size of larger blobs while smoothing the
contours and maintaining holes.
</para>
                <picture src="morphOpenS.jpg" apiSRC="cogBlobMorphologyOpenSquare_morphOpenS.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.OpenVertical">
            <summary>
                <para>
Performs a vertical opening operation which consists of an
erosion followed by a dilation. Opening eliminates small and/or
thin blobs. It maintains the relative size of larger blobs while
smoothing the contours and maintaining holes.
</para>
                <picture src="morphOpenV.jpg" apiSRC="cogBlobMorphologyOpenVertical_morphOpenV.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.OpenHorizontal">
            <summary>
                <para>
Performs a horizontal opening operation which consists of
an erosion followed by a dilation. Opening eliminates small
and/or thin blobs. It maintains the relative size of larger
blobs while smoothing the contours and maintaining holes.
</para>
                <picture src="morphOpenH.jpg" apiSRC="cogBlobMorphologyOpenHorizontal_morphOpenH.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.CloseSquare">
            <summary>
                <para>
Performs a square closing operation which consists of a
dilation followed by an erosion. Closing fills small holes
and connects closely situated blobs. It maintains the relative
size of both large and small blobs while smoothing the contours.
</para>
                <picture src="morphCloseS.jpg" apiSRC="cogBlobMorphologyCloseSquare_morphCloseS.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.CloseVertical">
            <summary>
                <para>
Performs a vertical closing operation which consists of a
dilation followed by an erosion. Closing fills small holes
and connects closely situated blobs. It maintains the relative
size of both large and small blobs while smoothing the contours.
</para>
                <picture src="morphCloseV.jpg" apiSRC="cogBlobMorphologyCloseVertical_morphCloseV.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.CloseHorizontal">
            <summary>
                <para>
Performs a horizontal closing operation which consists
of a dilation followed by an erosion. Closing fills small
holes and connects closely situated blobs. It maintains
the relative size of both large and small blobs while
smoothing the contours.
</para>
                <picture src="morphCloseH.jpg" apiSRC="cogBlobMorphologyCloseHorizontal_morphCloseH.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.DilateSquare">
            <summary>
                <para>
Dilates blobs by replacing the target pixel with the maximum
value of the 9 square pixel area centered on the target pixel.
</para>
                <picture src="morphDilationS.jpg" apiSRC="cogBlobMorphologyDilateSquare_morphDilationS.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.DilateVertical">
            <summary>
                <para>
Dilates blobs by replacing the target pixel with the
maximum value of the 3 vertical pixels centered on the
target pixel.
</para>
                <picture src="morphDilationV.jpg" apiSRC="cogBlobMorphologyDilateVertical_morphDilationV.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.DilateHorizontal">
            <summary>
                <para>
Dilates blobs by replacing the target pixel with the
maximum value of the 3 horizontal pixels centered on
the target pixel.
</para>
                <picture src="morphDilationH.jpg" apiSRC="cogBlobMorphologyDilateHorizontal_morphDilationH.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.ErodeSquare">
            <summary>
                <para>
Erodes blobs by replacing the target pixel with the
minimum value of the 9 square pixel area centered on the
target pixel.
</para>
                <picture src="morphErosionS.jpg" apiSRC="cogBlobMorphologyErodeSquare_morphErosionS.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.ErodeVertical">
            <summary>
                <para>
Erodes blobs by replacing the target pixel with the
minimum value of the 3 vertical pixels centered on
the target pixel.
</para>
                <picture src="morphErosionV.jpg" apiSRC="cogBlobMorphologyErodeVertical_morphErosionV.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMorphologyConstants.ErodeHorizontal">
            <summary>
                <para>
Erodes blobs by replacing the target pixel with the
minimum value of the 3 horizontal pixels centered on
the target pixel.
</para>
                <picture src="morphErosionH.jpg" apiSRC="cogBlobMorphologyErodeHorizontal_morphErosionH.jpg" />
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobFilterModeConstants">
            <summary>
Enumeration indicating how the filter range is
to be interpreted.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobFilterModeConstants.IncludeBlobsInRange">
            <summary>
Include only the blobs in the filtered results that have a
measurement value that is greater than or equal to 
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" />
and less than or equal to
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" />.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobFilterModeConstants.ExcludeBlobsInRange">
            <summary>
Include only the blobs in the filtered results that have a
measurement value that is less than or equal to 
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeLow" />
or greater than or equal to
<see cref="P:Cognex.VisionPro.Blob.CogBlobMeasure.FilterRangeHigh" />.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants">
            <summary>
Enumeration indicating how a specified measure will be
used during execution of blob analysis. Blob measures can either be
used as filter criteria or precomputed such that the time required to
calculate the measure is part of the blob analysis execution time.
</summary>
            <remarks>
Enumeration indicating how a specified measure will be used
during execution of blob analysis. A given measure can be used
to filter blobs, or you can specify that a given measure be
pre-computed when the blob tool is run. (Precomputing a blob
measures helps you get a more accurate measure of the time
required to run the tool since by default measures are not
computed until you request them.)
</remarks>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants.Filter">
            <summary>
Use the specified measure as a blob filter criterion
Blobs can be filtered out of the final results that have a measurement
value that falls either inside or outside of a specified
range of values.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants.PreCompute">
            <summary>
Precompute the specified measure during execution of
blob analysis. Measures that are not precomputed can still be
obtained, however, part of the computation may not be performed until
the measure is requested.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureModeConstants.None">
            <summary>
Do not perform any special action regarding the
specified measure during execution of blob analysis.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobMeasureConstants">
            <summary>
Enumeration of the various
<see cgnxAnchor="properties_of_blobs" cref="u:Search.Blob.Theory.ToolTheory">
measurements</see> that can be
performed on a specified blob. Measurements can be obtained by calling
the Measure property of a blob result. Measurements can also be used to
specify blob filtering &amp; sorting criteria.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.NotClipped">
            <summary>
This measure will be 1.0 if the blob was not clipped during
processing. It will be zero if the blob touches the edge of
the region of interest, or the edge of the run-time image,
or any Don't Care pixel in the InputImageMask.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisAspect">
            <summary>
The ratio of height to width of the smallest rectangle
that completely encloses the blob and is aligned with the blob's
principal axis.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisHeight">
            <summary>
The height of the smallest rectangle that completely
encloses the blob and is aligned with the blob's principal axis.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisWidth">
            <summary>
The width of the smallest rectangle that completely
encloses the blob and is aligned with the blob's principal axis.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisMaxY">
            <summary>
                <para>
The maximum y-coordinate enclosed by the smallest rectangle
that completely encloses the blob and is aligned with the blob's
principal axis.
</para>
                <para>
This measure is specified in a coordinate space which is a
rotated and translated version of the input image's selected
space. The origin of the new space is the blob's center of mass
and is rotated by the angle of the blob's principal axis.
</para>
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisMinY">
            <summary>
                <para>
The minimum y-coordinate enclosed by the smallest
rectangle that completely encloses the blob and is
aligned with the blob's principal axis.
</para>
                <para>
This measure is specified in a coordinate space which is a
rotated and translated version of the input image's selected
space. The origin of the new space is the blob's center of
mass and is rotated by the angle of the blob's principal axis.
</para>
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisMaxX">
            <summary>
                <para>
The maximum x-coordinate enclosed by the smallest rectangle
that completely encloses the blob and is aligned with the
blob's principal axis.
</para>
                <para>
This measure is specified in a coordinate space which is a rotated
and translated version of the input image's selected space. The
origin of the new space is the blob's center of mass and is
rotated by the angle of the blob's principal axis.
</para>
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPrincipalAxisMinX">
            <summary>
                <para>
The minimum x-coordinate enclosed by the smallest
rectangle that completely encloses the blob and is
aligned with the blob's principal axis.
</para>
                <picture src="mPrincipalBox.jpg" apiSRC="cogBlobMeasureBoundingBoxPrincipalAxisMinX_mPrincipalBox.jpg" />
                <para>
This measure is specified in a coordinate space which is a rotated and 
translated version of the input image's selected space. The origin of 
the new space is the blob's center of mass and is rotated by rotated
by the angle of the blob's principal axis.
</para>
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleAspect">
            <summary>
The ratio of height to width of the smallest rectangle that
completely encloses the blob and is aligned with the angle
specified by the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />
property.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleHeight">
            <summary>
The height of the smallest rectangle that completely encloses
the blob and is aligned with the angle specified by the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />
property.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleWidth">
            <summary>
The width of the smallest rectangle that completely
encloses the blob and is aligned with the angle specified by the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />
property.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleMaxY">
            <summary>
                <para>
The maximum y-coordinate enclosed by the smallest rectangle
that completely encloses the blob and is aligned with the
angle specified by the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />
property.
</para>
                <para>
This measure is specified in a coordinate space which is a
rotated and translated version of the input image's selected
space. The origin of the new space is the blob's center of
mass and is rotated by the angle specified by
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.
</para>
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleMinY">
            <summary>
                <para>
The minimum y-coordinate enclosed by the smallest rectangle
that completely encloses the blob and is aligned with the
angle specified by the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />
property.
</para>
                <para>
This measure is specified in a coordinate space which is a
rotated and translated version of the input image's selected
space. The origin of the new space is the blob's center of
mass and is rotated by the angle specified by
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.
</para>
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleMaxX">
            <summary>
                <para>
The maximum x-coordinate enclosed by the smallest rectangle
that completely encloses the blob and is aligned with the angle
specified by the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />
property.
</para>
                <para>
This measure is specified in a coordinate space which is a
rotated and translated version of the input image's selected
space. The origin of the new space is the blob's center of
mass and is rotated by the angle specified by
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.
</para>
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleMinX">
            <summary>
The minimum x-coordinate enclosed by the smallest
rectangle that completely encloses the blob and is aligned with
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />
property.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleCenterY">
            <summary>
The y-coordinate of the center point of the smallest rectangle
that completely encloses the blob and is aligned with the angle
specified by the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />
property.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxExtremaAngleCenterX">
            <summary>
                <para>
The x-coordinate of the center point of the smallest
rectangle that completely encloses the blob and is aligned
with the angle specified by the
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />
property.
</para>
                <picture src="mExtremaAngleBox.jpg" apiSRC="cogBlobMeasureBoundingBoxExtremaAngleCenterX_mExtremaAngleBox.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.MedianExtremaAngleY">
            <summary>
The y-coordinate of the point through which two orthogonal lines
each divide the blob's area in half. The orthogonal lines are
aligned with the angle specified by
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.
The value of y is specified in units of the input image's selected
space.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.MedianExtremaAngleX">
            <summary>
The x-coordinate of the point through which two
orthogonal lines each divide the blob's area in half. The orthogonal
lines are aligned with the angle specified by
<see cref="P:Cognex.VisionPro.Blob.CogBlob.ExtremaAngle" />.
The value of x is specified in units of the input image's
selected space.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeAspect">
            <summary>
The ratio of height to width of the smallest rectangle
that completely encloses the blob and is aligned with the pixels of
the image. No exclude extrema settings are used for this
calculation.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeHeight">
            <summary>
The height of the smallest rectangle that completely
encloses the blob and is aligned with the pixels of the image. No
exclude extrema settings are used for this calculation.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeWidth">
            <summary>
The width of the smallest rectangle that completely
encloses the blob and is aligned with the pixels of the image. No
exclude extrema settings are used for this calculation.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeMaxY">
            <summary>
The maximum y-coordinate enclosed by the smallest
rectangle that completely encloses the blob and is aligned with the
pixels of the image. No exclude extrema settings are used for this
calculation.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeMinY">
            <summary>
The minimum y-coordinate enclosed by the smallest
rectangle that completely encloses the blob and is aligned with the
pixels of the image. No exclude extrema settings are used for this
calculation.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeMaxX">
            <summary>
The maximum x-coordinate enclosed by the smallest
rectangle that completely encloses the blob and is aligned with the
pixels of the image. No exclude extrema settings are used for this
calculation.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeMinX">
            <summary>
The minimum x-coordinate enclosed by the smallest
rectangle that completely encloses the blob and is aligned with the
pixels of the image. No exclude extrema settings are used for this
calculation.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeCenterY">
            <summary>
The y-coordinate of the center point of the smallest
rectangle that completely encloses the blob and is aligned with the
pixels of the image. No exclude extrema settings are used for this
calculation.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundingBoxPixelAlignedNoExcludeCenterX">
            <summary>
                <para>
The x-coordinate of the center point of the smallest
rectangle that completely encloses the blob and is aligned with
the pixels of the image. No exclude extrema settings are used for
this calculation.
</para>
                <picture src="mPixelBox.jpg" apiSRC="cogBlobMeasureBoundingBoxPixelAlignedNoExcludeCenterX_mPixelBox.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.AcircularityRms">
            <summary>
The acircularity of this blob as defined by the normalized RMS 
deviation of the boundary point radius values from
<ITALIC>r0</ITALIC>, where <ITALIC>r0</ITALIC>is the square root
of the blob's area divided by pi. This measure is not available
when using whole-image connectivity.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.Acircularity">
            <summary>
The acircularity of this blob as defined by the formula:
Perimeter^2 / (4 x PI x Area). This measure is not available
when using whole-image connectivity.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.Angle">
            <summary>
                <para>
The angle of the principal axis of the blob 
specified in units of the input image's selected 
space at run-time. The angle is measured from
the X-axis of the selected space to the principal 
axis of the blob and is in the range -ÃÂ€/2 
radians to +ÃÂ€/2 radians. This value is not 
very meaningful if the elongation measure is very close to one.
</para>
                <picture src="mAngle.jpg" apiSRC="cogBlobMeasureAngle_mAngle.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.Elongation">
            <summary>
                <see cref="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaMax" /> to 
<see cref="P:Cognex.VisionPro.Blob.CogBlobResult.InertiaMin" />.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.InertiaMax">
            <summary>
The blob's second moment of inertia about the second
principal axis of the blob.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.InertiaMin">
            <summary>
The blob's second moment of inertia about the principal
axis of the blob.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.InertiaY">
            <summary>
The second moment of inertia of the blob about an axis
drawn through the blob's center of mass and parallel to the X-axis of
selected space of the input image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.InertiaX">
            <summary>
The second moment of inertia of the blob about an axis
drawn through the blob's center of mass and parallel to the Y-axis of
selected space of the input image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.CenterMassY">
            <summary>
The y-coordinate of the center of mass of the blob
specified in units of the input image's selected space at run-time.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.CenterMassX">
            <summary>
The x-coordinate of the center of mass of the blob
specified in units of the input image's selected space at run-time.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.NumUnfilteredChildren">
            <summary>
The number of children of this blob before any filter
criteria are applied.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.Perimeter">
            <summary>
The perimeter of the blob specified in units of the input
image's selected space at run-time. This measure is a
corrected version of the <BOLD>BoundaryPixelLength</BOLD>
that adjusts for the tendency of <BOLD>BoundaryPixelLength</BOLD>
to overstate the true blob perimeter. Not available for
whole-image connectivity.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.BoundaryPixelLength">
            <summary>
                <para>
The length of the pixel aligned boundary of this blob
specified in image pixel units. This measure is computed by
taking measuring the length of a boundary drawn along the
outside edge of each pixel that makes up the blob.
This measure is not available when using whole-image connectivity.
</para>
                <picture src="mBoundaryPixelLength.jpg" apiSRC="cogBlobMeasureBoundaryPixelLength_mBoundaryPixelLength.jpg" />
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.Area">
            <summary>
The area of the blob specified in units of the input image's
selected space at run-time. If you have specified a 
<see cgnxAnchor="hard_thresholding" cref="u:Search.Blob.Theory.ToolTheory">
hard threshold</see>, 
then this measure is equal to the number of pixels in the blob. 
If you have specified a 
<see cgnxAnchor="soft_thresholding_and_pixel_weighting" cref="u:Search.Blob.Theory.ToolTheory">
soft threshold</see>, then the area is the sum of the weights
(from 0.0 to 1.0) of the pixels in the blob.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobMeasureConstants.Label">
            <summary>
The connectivity label. For grey scale connectivity,
the label will be 1 for blobs and 0 for holes. For labeled
connectivity, this is the blob's label.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants">
            <summary>
Enumeration that indicates blob polarity when using either
soft or hard thresholding for image segmentation.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants.LightBlobs">
            <summary>
Polarity indicating that image should be segmented for
light blobs on a dark background.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationPolarityConstants.DarkBlobs">
            <summary>
Polarity indicating that image should be segmented for
dark blobs on a light background.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants">
            <summary>
Enumeration of blob segmentation modes which indicate how
the input image will be segmented into blob and background pixels.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.SubtractionImage">
            <summary>
Segment the input image by performing a pixel map
(PostMap) on the image that results from subtracting each pixel in
SubtractionImage from the corresponding pixel in the input image
(after PreMap applied) with the result clamped to zero.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.SoftRelativeThreshold">
            <summary>
Segment the input image using a pair of soft threshold
values that are determined at run-time based on specified percentage
of the distances between the low tail pixel value and the high tail
pixel value of the input image's histogram.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.SoftFixedThreshold">
            <summary>
Segment the input image using a pair of threshold values
specified in image grey scale units. Pixels values outside of the
thresholds are either entirely part of a blob or the background.
Values between the thresholds are part blob and part background.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.HardDynamicThreshold">
            <summary>
Segments the input image using a hard threshold value
that is determined at run-time based on an analysis of the input
image's histogram.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.HardRelativeThreshold">
            <summary>
Segment the input image using a single threshold value
that is determined at run-time based on a specified percentage (
HardRelativeThreshold) of the distance between the low tail pixel
value and the high tail pixel value of the input image's histogram.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.HardFixedThreshold">
            <summary>
Segment the input image using a single threshold value
specified in image grey scale units. This hard threshold determines
if an image pixel is entirely part of a blob or constitutes a
background pixel.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.Map">
            <summary>
Segment the input image using a pixel map. Each pixel
in the input image is replaced by the value within the pixel map at
the index equal to the input image pixel value. ScalingValue is used
to assign blob weights based on the mapped pixel values.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.Blob.CogBlobSegmentationModeConstants.None">
            <summary>
No image segmentation is performed. Use this mode if
the input image is already segmented. Pixels with a value equal to
ScalingValue receive a blob weight of one. All other pixel values
are interpreted on a linear scale relative to ScalingValue.
</summary>
        </member>
    </members>
</doc>